{
  "address": "0xfBB400aC812541b05525bf511f560e1B1Ac9f0E3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fortunnaTokenPrototype",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fortunnaPoolPrototype",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fortunnaPoolUniswapV3Prototype",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "paymentTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "AddressAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "AreNotEqual",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Banned",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "basePoints",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "IncorrectBasePoints",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finish",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "IncorrectInterval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughtPayment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prototypeIndex",
          "type": "uint256"
        }
      ],
      "name": "UnknownPrototypeIndex",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeTokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORTUNNA_TOKEN_PROTO_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prototype",
          "type": "address"
        }
      ],
      "name": "addPrototype",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protoPoolIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLockUpRewardsPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earlyWithdrawalFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositWithdrawFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardBasePointsPerDistribution",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "stakingTokensMask",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "rewardTokensMask",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "nonfungiblePositionManager",
                  "type": "address"
                }
              ],
              "internalType": "struct FortunnaLib.CustomPoolParameters",
              "name": "custom",
              "type": "tuple"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParameters",
          "name": "poolParameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "utilizingTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialRewardAmounts",
              "type": "uint256[2][]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialDepositAmounts",
              "type": "uint256[2][]"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParametersArrays",
          "name": "poolParametersArrays",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool[]",
          "name": "flags",
          "type": "bool[]"
        }
      ],
      "name": "generateMask",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPoolAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPrototypeAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrototypesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolProtoIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolIdx",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStakingOrReward",
          "type": "bool"
        }
      ],
      "name": "predictFortunnaTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolProtoIdx",
          "type": "uint256"
        }
      ],
      "name": "predictPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendCollectedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cost",
              "type": "uint256"
            }
          ],
          "internalType": "struct FortunnaLib.PaymentInfo",
          "name": "_paymentInfo",
          "type": "tuple"
        }
      ],
      "name": "setPaymentInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x51e501ff7591936c8ece3d42e1250aad2ca1d702f348988b88ea4447bfba7a3a",
  "receipt": {
    "to": null,
    "from": "0x57eb63d0aab5822EFCd7A9B56775F772D3e03CfD",
    "contractAddress": "0xfBB400aC812541b05525bf511f560e1B1Ac9f0E3",
    "transactionIndex": 42,
    "gasUsed": "1914673",
    "logsBloom": "0x
    "blockHash": "0x2cc08484d8efaeac37383a254216fae1df60791e5b6c257521f09fa58f64c77f",
    "transactionHash": "0x51e501ff7591936c8ece3d42e1250aad2ca1d702f348988b88ea4447bfba7a3a",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 9463059,
        "transactionHash": "0x51e501ff7591936c8ece3d42e1250aad2ca1d702f348988b88ea4447bfba7a3a",
        "address": "0xfBB400aC812541b05525bf511f560e1B1Ac9f0E3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057eb63d0aab5822efcd7a9b56775f772d3e03cfd",
          "0x00000000000000000000000057eb63d0aab5822efcd7a9b56775f772d3e03cfd"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x2cc08484d8efaeac37383a254216fae1df60791e5b6c257521f09fa58f64c77f"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 9463059,
        "transactionHash": "0x51e501ff7591936c8ece3d42e1250aad2ca1d702f348988b88ea4447bfba7a3a",
        "address": "0xfBB400aC812541b05525bf511f560e1B1Ac9f0E3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df3",
          "0x00000000000000000000000057eb63d0aab5822efcd7a9b56775f772d3e03cfd",
          "0x00000000000000000000000057eb63d0aab5822efcd7a9b56775f772d3e03cfd"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x2cc08484d8efaeac37383a254216fae1df60791e5b6c257521f09fa58f64c77f"
      },
      {
        "transactionIndex": 42,
        "blockNumber": 9463059,
        "transactionHash": "0x51e501ff7591936c8ece3d42e1250aad2ca1d702f348988b88ea4447bfba7a3a",
        "address": "0xfBB400aC812541b05525bf511f560e1B1Ac9f0E3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x185fa0fa3354ff548ee95bc7375967e5e2cdbd00e7211f15ee5ea68c1d5dbae5",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057eb63d0aab5822efcd7a9b56775f772d3e03cfd"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x2cc08484d8efaeac37383a254216fae1df60791e5b6c257521f09fa58f64c77f"
      }
    ],
    "blockNumber": 9463059,
    "cumulativeGasUsed": "12527901",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8426a9718874F5B37c238Eb55eF7b89b7Beec86F",
    "0x7490A9b9CF8Fb4fC269936B7Af3De549eB8e2C45",
    "0x9368E47733361eECaba61cd52A5604A73A7E3AB9",
    [
      "0x0000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "dfc0b4bbd81236be9f16ab2d5a82ad4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fortunnaTokenPrototype\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fortunnaPoolPrototype\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fortunnaPoolUniswapV3Prototype\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"paymentTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"AddressAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"AreNotEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Banned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basePoints\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"IncorrectBasePoints\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"IncorrectInterval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughtPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prototypeIndex\",\"type\":\"uint256\"}],\"name\":\"UnknownPrototypeIndex\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORTUNNA_TOKEN_PROTO_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prototype\",\"type\":\"address\"}],\"name\":\"addPrototype\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protoPoolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockUpRewardsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWithdrawFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBasePointsPerDistribution\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stakingTokensMask\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rewardTokensMask\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"}],\"internalType\":\"struct FortunnaLib.CustomPoolParameters\",\"name\":\"custom\",\"type\":\"tuple\"}],\"internalType\":\"struct FortunnaLib.PoolParameters\",\"name\":\"poolParameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"utilizingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialRewardAmounts\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialDepositAmounts\",\"type\":\"uint256[2][]\"}],\"internalType\":\"struct FortunnaLib.PoolParametersArrays\",\"name\":\"poolParametersArrays\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"name\":\"generateMask\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPoolAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPrototypeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrototypesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolProtoIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStakingOrReward\",\"type\":\"bool\"}],\"name\":\"predictFortunnaTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolProtoIdx\",\"type\":\"uint256\"}],\"name\":\"predictPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendCollectedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"internalType\":\"struct FortunnaLib.PaymentInfo\",\"name\":\"_paymentInfo\",\"type\":\"tuple\"}],\"name\":\"setPaymentInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Fortunna Team\",\"errors\":{\"AddressAlreadyExists(address)\":[{\"details\":\"An error to be reverted if an `enity` is already exists in some address set.\",\"params\":{\"entity\":\"An entity address.\"}}],\"AreNotEqual(uint256,uint256,string)\":[{\"details\":\"An error to be reverted if some pair of scalars is not equal, but they should be.\",\"params\":{\"comment\":\"Some comment as to what kind of a data structure property this is.\",\"x\":\"A first scalar.\",\"y\":\"A second scalar.\"}}],\"Banned(address)\":[{\"details\":\"An error to be reverted if an `account` would be banned.\",\"params\":{\"account\":\"A banned user.\"}}],\"IncorrectBasePoints(uint256,string)\":[{\"details\":\"An error to be reverted if some base points were defined out of their boundaries.\",\"params\":{\"basePoints\":\"An actual base points amount.\",\"comment\":\"Some comment as to what kind of a base points this is.\"}}],\"IncorrectInterval(uint256,uint256,string)\":[{\"details\":\"An error to be reverted if some Euclidean interval hasn't been defined correctly.\",\"params\":{\"comment\":\"Some comment as to what kind of an interval this is.\",\"finish\":\"An end of the interval.\",\"start\":\"A start of the interval.\"}}],\"InvalidLength(uint256,string)\":[{\"details\":\"An error to be reverted if some data structures `length` is not defined correctly.\",\"params\":{\"comment\":\"Some comment as to what kind of a data structure has been addressed to.\",\"length\":\"An actual length of the data structure.\"}}],\"NotAuthorized(bytes32,address)\":[{\"details\":\"An error to be reverted if an `entity` does not possess the `role`.\",\"params\":{\"entity\":\"An entity violating authorization.\",\"role\":\"A role an entity doesn't posess.\"}}],\"NotEnoughtPayment(uint256)\":[{\"details\":\"An error to be reverted if the pool deployer didn't payed enough for it.\",\"params\":{\"amount\":\"An actual amount the deployer sent.\"}}],\"UnknownPrototypeIndex(uint256)\":[{\"details\":\"An error to be reverted if an unknown prototype name would be used to deploy a pool or other utility smart-contract.\",\"params\":{\"prototypeIndex\":\"An index of prototype smart-contract.\"}}]},\"events\":{\"NativeTokenReceived(uint256)\":{\"params\":{\"amount\":\"An exact amount of the tokens arrived.\"}},\"PoolCreated(address)\":{\"params\":{\"pool\":\"An address of the newly created pool.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addPrototype(address)\":{\"params\":{\"prototype\":\"An address of the deployed prototype.\"}},\"constructor\":{\"params\":{\"paymentTokens\":\"An array of tokens addresses to be allowed as payment for pool deploy tokens.\"}},\"createPool((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))\":{\"params\":{\"poolParameters\":\"A scalar parameters for the pool.\",\"poolParametersArrays\":\"A vector parameters for the pool.\"}},\"generateMask(bool[])\":{\"params\":{\"flags\":\"An array of booleans to be converted to a mask.\"}},\"getPoolAt(uint256)\":{\"params\":{\"index\":\"An index in the pools enumerable set.\"}},\"getPrototypeAt(uint256)\":{\"params\":{\"index\":\"An index in the pools enumerable set.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"predictFortunnaTokenAddress(uint256,uint256,bool)\":{\"params\":{\"isStakingOrReward\":\"Is a Fortuna Dust token would be utilized as a staking or a reward token? True - staking, False - reward.\",\"poolIdx\":\"A specific already deployed pool index from the factory.\",\"poolProtoIdx\":\"A pool prototype index to which the token would be connected to.\"},\"returns\":{\"result\":\"An address of the would be deployed token.\",\"salt\":\"A salt bytes to deploy such a token.\"}},\"predictPoolAddress(uint256)\":{\"params\":{\"poolProtoIdx\":\"An index of the pool prototype in the factory.\"},\"returns\":{\"result\":\"A predicted address of the pool.\",\"salt\":\"A salt bytes to deploy the pool to the predicted address.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"sendCollectedTokens(address,address,uint256)\":{\"params\":{\"amount\":\"An exact amount of the tokens to be sent.\",\"token\":\"A token to be send to.\",\"who\":\"A receiver of the tokens.\"}},\"setPaymentInfo((address,uint256))\":{\"params\":{\"_paymentInfo\":\"A struct to hold new payment info.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"paymentInfo\":{\"returns\":{\"cost\":\"An actual cost of the pool deploy.\",\"paymentToken\":\"An address of the token to be held as payment asset.\"}},\"pools\":{\"details\":\"A set of unique deployed pools.\"},\"prototypes\":{\"details\":\"A set of unique deployed prototypes.\"}},\"title\":\"Canonical Fortunna Yield Farming pools factory\",\"version\":1},\"userdoc\":{\"events\":{\"NativeTokenReceived(uint256)\":{\"notice\":\"An event to be fired when native tokens arrive to the fabric.\"},\"PoolCreated(address)\":{\"notice\":\"An event to be emitted when the pool is created.\"}},\"kind\":\"user\",\"methods\":{\"FORTUNNA_TOKEN_PROTO_INDEX()\":{\"notice\":\"An index in `prototypes` of FortunnaToken. Depends on the addition process in the initialization function.\"},\"addPrototype(address)\":{\"notice\":\"An admin function to create to add deployed prototype.\"},\"constructor\":{\"notice\":\"A constructor.\"},\"createPool((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))\":{\"notice\":\"The main public function. It is deploying the pool according to the pool parameters and it's prototype.\"},\"generateMask(bool[])\":{\"notice\":\"A public helper function to make mask generation quicker.\"},\"getPoolAt(uint256)\":{\"notice\":\"A public getter function to acquire a pool address at the specific index.\"},\"getPoolsLength()\":{\"notice\":\"A public getter function to acquire the total amount of deployed pools.\"},\"getPrototypeAt(uint256)\":{\"notice\":\"A public getter function to acquire a prototype address at the specific index.\"},\"getPrototypesLength()\":{\"notice\":\"A public getter function to acquire the total amount of deployed prototypes.\"},\"paymentInfo()\":{\"notice\":\"A getter function to acquire the payment info for one pool deploy.\"},\"predictFortunnaTokenAddress(uint256,uint256,bool)\":{\"notice\":\"A helper function that could predict an address of the Fortuna Dust token for a specific pool.\"},\"predictPoolAddress(uint256)\":{\"notice\":\"A helper function that could predict an address for the pool with a `poolProtoIdx` parameter.\"},\"sendCollectedTokens(address,address,uint256)\":{\"notice\":\"An admin function to send all collected payments in any tokens to the specific receiver.\"},\"setPaymentInfo((address,uint256))\":{\"notice\":\"An admin setter function to adjust payment info.\"}},\"notice\":\"Deploys Fortunna Yield Farming pools and manages ownership and control over pool protocol fees.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FortunnaFactory.sol\":\"FortunnaFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-new/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/FortunnaFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IFortunnaFactory.sol\\\";\\nimport \\\"./interfaces/IFortunnaPool.sol\\\";\\nimport \\\"./interfaces/IFortunnaToken.sol\\\";\\n\\n/// @title Canonical Fortunna Yield Farming pools factory\\n/// @author Fortunna Team\\n/// @notice Deploys Fortunna Yield Farming pools and manages ownership and control over pool protocol fees.\\ncontract FortunnaFactory is AccessControl, IFortunnaFactory {\\n    using SafeERC20 for IERC20;\\n    using FortunnaBitMaskLib for bytes32;\\n    using Clones for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @inheritdoc IFortunnaFactory\\n    FortunnaLib.PaymentInfo public override paymentInfo;\\n\\n    /// @dev A set of unique deployed pools.\\n    EnumerableSet.AddressSet internal pools;\\n\\n    /// @dev A set of unique deployed prototypes.\\n    EnumerableSet.AddressSet internal prototypes;\\n\\n    /// @notice An index in `prototypes` of FortunnaToken. Depends on the addition process in the initialization function.\\n    uint256 public constant override FORTUNNA_TOKEN_PROTO_INDEX = 2;\\n\\n    /// @notice A constructor.\\n    /// @param paymentTokens An array of tokens addresses to be allowed as payment for pool deploy tokens.\\n    constructor(\\n        address _fortunnaTokenPrototype,\\n        address _fortunnaPoolPrototype,\\n        address _fortunnaPoolUniswapV3Prototype,\\n        address[] memory paymentTokens\\n    ) {\\n        address sender = _msgSender();\\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\\n        _grantRole(FortunnaLib.POOL_REWARDS_PROVIDER, sender);\\n        _grantRole(FortunnaLib.ALLOWED_PAYMENT_TOKEN_ROLE, address(0));\\n        prototypes.add(_fortunnaPoolPrototype);\\n        prototypes.add(_fortunnaPoolUniswapV3Prototype);\\n        prototypes.add(_fortunnaTokenPrototype);\\n        for (uint256 i = 0; i < paymentTokens.length; i++) {\\n            _grantRole(\\n                FortunnaLib.ALLOWED_PAYMENT_TOKEN_ROLE,\\n                paymentTokens[i]\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function getPoolAt(uint256 index) external view override returns (address) {\\n        return pools.at(index);\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function getPoolsLength() external view override returns (uint256) {\\n        return pools.length();\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function setPaymentInfo(\\n        FortunnaLib.PaymentInfo calldata _paymentInfo\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        paymentInfo = _paymentInfo;\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function addPrototype(\\n        address prototype\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        prototypes.add(prototype);\\n    }\\n\\n    /// @inheritdoc AccessControl\\n    function renounceRole(bytes32 role, address account) public override {\\n        if (hasRole(FortunnaLib.BANNED_ROLE, account))\\n            revert FortunnaErrorsLib.Banned(account);\\n        super.renounceRole(role, account);\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function generateMask(\\n        bool[] calldata flags\\n    ) external pure override returns (bytes32) {\\n        return FortunnaBitMaskLib.getMaskFromBooleans(flags);\\n    }\\n\\n    /// @dev An internal function that validates the addresses if they're allowed\\n    /// to be used as staking, reward, or external tokens and if the arrays lengths are less then 256.\\n    /// Also there is a check if `_utilizingTokens` and `_externalRewardTokens` are unique arrays.\\n    /// @param sender Alias for `_msgSender()`.\\n    /// @param stakingTokensMask A bit mask to define if the `utilizingTokens` token is for staking.\\n    /// @param rewardTokensMask A bit mask to define if the `utilizingTokens` token is for user rewards.\\n    /// @param utilizingTokens An array of tokens either for stake or for rewards.\\n    function _validateRoles(\\n        address sender,\\n        uint256 initialRewardAmountsLength,\\n        uint256 initialDepositAmountsLength,\\n        bytes32 stakingTokensMask,\\n        bytes32 rewardTokensMask,\\n        address[] calldata utilizingTokens\\n    ) internal view {\\n        if (hasRole(FortunnaLib.BANNED_ROLE, sender))\\n            revert FortunnaErrorsLib.Banned(sender);\\n        if (utilizingTokens.length > 256) {\\n            revert FortunnaErrorsLib.InvalidLength(\\n                utilizingTokens.length,\\n                \\\"utilizingTokens>256\\\"\\n            );\\n        }\\n        for (uint8 i = 0; i < utilizingTokens.length; i++) {\\n            address token = utilizingTokens[i];\\n            if (stakingTokensMask.isBitUp(i)) {\\n                if (!hasRole(FortunnaLib.ALLOWED_STAKING_TOKEN_ROLE, token)) {\\n                    revert FortunnaErrorsLib.NotAuthorized(\\n                        FortunnaLib.ALLOWED_STAKING_TOKEN_ROLE,\\n                        token\\n                    );\\n                }\\n            }\\n            if (rewardTokensMask.isBitUp(i)) {\\n                if (!hasRole(FortunnaLib.ALLOWED_REWARD_TOKEN_ROLE, token)) {\\n                    revert FortunnaErrorsLib.NotAuthorized(\\n                        FortunnaLib.ALLOWED_REWARD_TOKEN_ROLE,\\n                        token\\n                    );\\n                }\\n            }\\n        }\\n        if (initialRewardAmountsLength != utilizingTokens.length) {\\n            revert FortunnaErrorsLib.AreNotEqual(\\n                initialRewardAmountsLength,\\n                utilizingTokens.length,\\n                \\\"tokensLen!=initRewardLen\\\"\\n            );\\n        }\\n\\n        if (initialDepositAmountsLength != utilizingTokens.length) {\\n            revert FortunnaErrorsLib.AreNotEqual(\\n                initialDepositAmountsLength,\\n                utilizingTokens.length,\\n                \\\"tokensLen!=initDepositLen\\\"\\n            );\\n        }\\n    }\\n\\n    /// @dev An internal function that checks scalar parameters of the pools.\\n    /// Firstly, if the chainIds are as expected equal. Secondly, if the start and end timestamps making\\n    /// a valid time interval. Thirdly, if min and max stake amounts are making also a valid interval. Then,\\n    /// if early withdrawal fee and deposit/withdraw fee are represented as base points validly.\\n    /// @param _poolParameters A struct containing the scalar parameters of the pool.\\n    function _validateScalarParameters(\\n        FortunnaLib.PoolParameters calldata _poolParameters\\n    ) internal view {\\n        if (prototypes.at(_poolParameters.protoPoolIdx) == address(0)) {\\n            revert FortunnaErrorsLib.UnknownPrototypeIndex(\\n                _poolParameters.protoPoolIdx\\n            );\\n        }\\n        if (_poolParameters.startTimestamp > _poolParameters.endTimestamp) {\\n            revert FortunnaErrorsLib.IncorrectInterval(\\n                _poolParameters.startTimestamp,\\n                _poolParameters.endTimestamp,\\n                \\\"time\\\"\\n            );\\n        }\\n        if (_poolParameters.minStakeAmount > _poolParameters.maxStakeAmount) {\\n            revert FortunnaErrorsLib.IncorrectInterval(\\n                _poolParameters.minStakeAmount,\\n                _poolParameters.maxStakeAmount,\\n                \\\"stakeAmount\\\"\\n            );\\n        }\\n        if (\\n            _poolParameters.earlyWithdrawalFeeBasePoints >\\n            FortunnaLib.BASE_POINTS_MAX\\n        ) {\\n            revert FortunnaErrorsLib.IncorrectBasePoints(\\n                _poolParameters.earlyWithdrawalFeeBasePoints,\\n                \\\"earlyWithdrawal\\\"\\n            );\\n        }\\n        if (\\n            _poolParameters.depositWithdrawFeeBasePoints >\\n            FortunnaLib.BASE_POINTS_MAX\\n        ) {\\n            revert FortunnaErrorsLib.IncorrectBasePoints(\\n                _poolParameters.depositWithdrawFeeBasePoints,\\n                \\\"depositWithdraw\\\"\\n            );\\n        }\\n        if (\\n            _poolParameters.totalRewardBasePointsPerDistribution >\\n            FortunnaLib.BASE_POINTS_MAX\\n        ) {\\n            revert FortunnaErrorsLib.IncorrectBasePoints(\\n                _poolParameters.totalRewardBasePointsPerDistribution,\\n                \\\"rewardBasePoints\\\"\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function predictPoolAddress(\\n        uint256 poolProtoIdx\\n    ) public view override returns (address result, bytes32 salt) {\\n        address poolPrototypeAddress = prototypes.at(poolProtoIdx);\\n        salt = keccak256(abi.encodePacked(pools.length()));\\n        result = poolPrototypeAddress.predictDeterministicAddress(salt);\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function predictFortunnaTokenAddress(\\n        uint256 poolProtoIdx,\\n        uint256 poolIdx,\\n        bool isStakingOrReward\\n    ) external view override returns (address result, bytes32 salt) {\\n        salt = keccak256(abi.encodePacked(poolIdx, isStakingOrReward));\\n        address fortunnaTokenPrototype = prototypes.at(FORTUNNA_TOKEN_PROTO_INDEX);\\n        address tokenDeployer = prototypes.at(poolProtoIdx)\\n            .predictDeterministicAddress(keccak256(abi.encodePacked(poolIdx)));\\n        result = fortunnaTokenPrototype.predictDeterministicAddress(salt, tokenDeployer);\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function createPool(\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external payable override returns (address pool) {\\n        address sender = _msgSender();\\n        _validateRoles(\\n            sender,\\n            poolParametersArrays.initialRewardAmounts.length,\\n            poolParametersArrays.initialDepositAmounts.length,\\n            poolParameters.stakingTokensMask,\\n            poolParameters.rewardTokensMask,\\n            poolParametersArrays.utilizingTokens\\n        );\\n        _validateScalarParameters(poolParameters);\\n\\n        if (paymentInfo.paymentToken == address(0)) {\\n            if (msg.value < paymentInfo.cost) {\\n                revert FortunnaErrorsLib.NotEnoughtPayment(msg.value);\\n            }\\n        } else {\\n            IERC20(paymentInfo.paymentToken).safeTransferFrom(\\n                sender,\\n                address(this),\\n                paymentInfo.cost\\n            );\\n        }\\n\\n        bytes32 deploySalt;\\n        (pool, deploySalt) = predictPoolAddress(\\n            poolParameters.protoPoolIdx\\n        );\\n        _grantRole(FortunnaLib.LP_MINTER_BURNER_ROLE, pool);\\n\\n        if (!pools.add(pool)) {\\n            revert FortunnaErrorsLib.AddressAlreadyExists(pool);\\n        }\\n\\n        address prototypeAddress = prototypes.at(poolParameters.protoPoolIdx);\\n        prototypeAddress.cloneDeterministic(deploySalt);\\n\\n        IFortunnaPool(pool).initialize(\\n            sender,\\n            poolParameters,\\n            poolParametersArrays\\n        );\\n        emit PoolCreated(pool);\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function sendCollectedTokens(\\n        address token,\\n        address payable who,\\n        uint256 amount\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (token != address(0)) {\\n            IERC20(token).safeTransfer(_msgSender(), amount);\\n        } else {\\n            who.transfer(amount);\\n        }\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function getPrototypeAt(\\n        uint256 index\\n    ) external view override returns (address result) {\\n        result = prototypes.at(index);\\n    }\\n\\n    /// @inheritdoc IFortunnaFactory\\n    function getPrototypesLength()\\n        external\\n        view\\n        override\\n        returns (uint256 result)\\n    {\\n        result = prototypes.length();\\n    }\\n\\n    /// @dev Every income in native tokens should be recorded as the behaviour\\n    /// of the contract would be a funds hub like.\\n    receive() external payable {\\n        emit NativeTokenReceived(msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x5ed886a774db84fa7d70882d455d7e3f091b927c5b1aa569bc1c59dafcf46da5\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"../libraries/FortunnaErrorsLib.sol\\\";\\nimport \\\"../libraries/FortunnaBitMaskLib.sol\\\";\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\nimport \\\"./INativeTokenReceivable.sol\\\";\\n\\n/// @title The interface for the Fortunna Yield Farming pools factory.\\n/// @author Fortunna Team\\n/// @notice The Fortunna Yield Faming pools factory facilitates creation of Fortunna pools and control over the protocol fees.\\ninterface IFortunnaFactory is INativeTokenReceivable {\\n    /// @notice An event to be emitted when the pool is created.\\n    /// @param pool An address of the newly created pool.\\n    event PoolCreated(address indexed pool);\\n\\n    /// @notice A getter function to acquire the payment info for one pool deploy.\\n    /// @return token An address of the token to be held as payment asset.\\n    /// @return cost An actual cost of the pool deploy.\\n    function paymentInfo() external view returns (address token, uint256 cost);\\n\\n    /// @notice An admin setter function to adjust payment info.\\n    /// @param _paymentInfo A struct to hold new payment info.\\n    function setPaymentInfo(\\n        FortunnaLib.PaymentInfo calldata _paymentInfo\\n    ) external;\\n\\n    /// @notice An admin function to create to add deployed prototype.\\n    /// @param prototype An address of the deployed prototype.\\n    function addPrototype(address prototype) external;\\n\\n    /// @notice A public helper function to make mask generation quicker.\\n    /// @param flags An array of booleans to be converted to a mask.\\n    function generateMask(\\n        bool[] calldata flags\\n    ) external pure returns (bytes32);\\n\\n    /// @notice An admin function to send all collected payments in any tokens to the specific receiver.\\n    /// @param token A token to be send to.\\n    /// @param who A receiver of the tokens.\\n    /// @param amount An exact amount of the tokens to be sent.\\n    function sendCollectedTokens(\\n        address token,\\n        address payable who,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice The main public function. It is deploying the pool according to the pool parameters and it's prototype.\\n    /// @param poolParameters A scalar parameters for the pool.\\n    /// @param poolParametersArrays A vector parameters for the pool.\\n    function createPool(\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external payable returns (address poolAddress);\\n\\n    /// @notice A public getter function to acquire a pool address at the specific index.\\n    /// @param index An index in the pools enumerable set.\\n    function getPoolAt(uint256 index) external view returns (address);\\n\\n    /// @notice A public getter function to acquire the total amount of deployed pools.\\n    function getPoolsLength() external view returns (uint256);\\n\\n    /// @notice A public getter function to acquire a prototype address at the specific index.\\n    /// @param index An index in the pools enumerable set.\\n    function getPrototypeAt(uint256 index) external view returns (address);\\n\\n    /// @notice A public getter function to acquire the total amount of deployed prototypes.\\n    function getPrototypesLength() external view returns (uint256);\\n\\n    /// @notice A helper function that could predict an address for the pool with a `poolProtoIdx` parameter.\\n    /// @param poolProtoIdx An index of the pool prototype in the factory.\\n    /// @return result A predicted address of the pool.\\n    /// @return salt A salt bytes to deploy the pool to the predicted address.\\n    function predictPoolAddress(\\n        uint256 poolProtoIdx\\n    ) external view returns (address result, bytes32 salt);\\n\\n    /// @notice A helper function that could predict an address of the Fortuna Dust token for a specific pool.\\n    /// @param poolProtoIdx A pool prototype index to which the token would be connected to.\\n    /// @param poolIdx A specific already deployed pool index from the factory.\\n    /// @param isStakingOrReward Is a Fortuna Dust token would be utilized as a staking or a reward token? True - staking, False - reward.\\n    /// @return result An address of the would be deployed token.\\n    /// @return salt A salt bytes to deploy such a token.\\n    function predictFortunnaTokenAddress(\\n        uint256 poolProtoIdx,\\n        uint256 poolIdx,\\n        bool isStakingOrReward\\n    ) external view returns (address result, bytes32 salt);\\n\\n    /// @notice A constant that indicates under which index in the factory there is a Fortuna Dust token prototype.\\n    function FORTUNNA_TOKEN_PROTO_INDEX() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc188d7d7059564169bc05d0ee9dec9d15c996605f9b3c7488432f26bd4467c5\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\n\\n/// @title An interface to implement by the contract of the Fortuna Pool.\\n/// @author Fortunna Team\\n/// @notice The interface contains events and initializing function of the pool.\\ninterface IFortunnaPool {\\n    /// @notice An event to be emitted when the part of the total reward is set to be distributed.\\n    /// @param partOfTotalRewards An exact amount of the part.\\n    event PartDistributed(uint256 partOfTotalRewards);\\n\\n    /// @notice An event to be emitted when the total reward is set up.\\n    /// @param reward An exact amount of the total rewards.\\n    event RewardAdded(uint256 reward);\\n\\n    /// @notice An event to be emitted when a user performs the stake.\\n    /// @param user A user (staker) address.\\n    /// @param amount Amount of the Fortuna Dust staked.\\n    event Staked(address indexed user, uint256 amount);\\n\\n    /// @notice An event to be emitted when a user withdraws their staked Fortuna Dust.\\n    /// @param user A user (staker) address.\\n    /// @param amount An amount of the Fortuna Dust to be withdrawn.\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    /// @notice An event to be emitted when a user receives a reward Fortuna Dust.\\n    /// @param user A user (staker) address.\\n    /// @param reward A reward Fortuna Dust paid to the user.\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    /// @notice An event to be emitted when a user performs an emergency withdraw of their staked Fortuna Dust.\\n    /// @param user A user (staker) address.\\n    /// @param amount An amount of Fortuna Dust to be withdrawn.\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    /// @notice A getter function that returns a FortunnaFactory instance address.\\n    function factory() external view returns (address);\\n\\n    /// @notice A function that is to be called when the pool is created by the factory.\\n    /// @param poolOwner An owner of the pool address.\\n    /// @param poolParameters A scalar parameters of the pool.\\n    /// @param poolParametersArrays A vector parameters of the pool.\\n    function initialize(\\n        address poolOwner,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd5b6da214028d05d9cd532bcd50e070c2ca7edcc480e59e59e7d79240192e825\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\nimport \\\"./INativeTokenReceivable.sol\\\";\\n\\n/// @title An interface to implement by the contract of the Fortuna Dust.\\n/// @author Fortunna Team\\n/// @notice The interface contains functions of the mint, burn and calculations of the dust.\\ninterface IFortunnaToken is IERC20, IERC20Metadata, INativeTokenReceivable {\\n    /// @notice A mint function that could be called either by anyone or only by an admin. Depends if the token is initialized as staking or reward token.\\n    /// @param user A user (minter) address.\\n    /// @param amount An amount to be minted.\\n    function mint(address user, uint256 amount) external payable;\\n\\n    function mint(\\n        address user,\\n        uint256[] calldata amounts\\n    ) external payable;\\n\\n    /// @notice A burn function that could be called either by anyone or only by an admin. Depends if the token is initialized as staking or reward token.\\n    /// @param user A user (burner) address.\\n    /// @param amount An amount to be burned.\\n    function burn(address payable user, uint256 amount) external;\\n\\n    /// @notice A helper function to calculate an amount of Fortuna Dust to be minted/burned if this amount of an underlying token is placed/taken as a collateral. \\n    /// @param underlyingTokenIdx A collateral token index.\\n    /// @param underlyingTokenAmountInOrOut An amount of the collateral token to be placed in or out.\\n    /// @return fortunnaTokensAmountInOrOut An amount of Fortuna Dust minted or burned.\\n    function calcFortunnaTokensInOrOutPerUnderlyingToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 underlyingTokenAmountInOrOut\\n    ) external view returns (uint256 fortunnaTokensAmountInOrOut);\\n\\n    /// @notice A helper function to calculate an amount of collateral tokens to be gotten out or placed in if a specified amount of Fortuna Dust provided.\\n    /// @param underlyingTokenIdx A collateral token index in the factory.\\n    /// @param amountToMintOrBurn An amount of the Fortuna Dust to be minted or burned.\\n    /// @return underlyingTokensInOrOut An amount of collateral token to be placed in or taken out.\\n    function calcUnderlyingTokensInOrOutPerFortunnaToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 amountToMintOrBurn\\n    ) external view returns (uint256 underlyingTokensInOrOut);\\n\\n    /// @notice An initializing function that could be called only once and only by the Pool contract.\\n    /// @param stakingOrRewardTokens Decide whether the Fortuna Dust token is staking or reward.\\n    /// @param poolParameters The scalar parameters.\\n    /// @param poolParametersArrays The vector parameters. \\n    function initialize(\\n        bool stakingOrRewardTokens,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa939f08eb4576b606b33ad8aaa8df0399349c01bb9342847d6ddbd7b87ed515e\",\"license\":\"MIT\"},\"contracts/interfaces/INativeTokenReceivable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title The interface for the Fortunna Yield Farming smart-contracts that can receive native tokens.\\n/// @author Fortunna Team\\n/// @notice The interface allows smart-contracts to use an event to document all native tokens incoms.\\ninterface INativeTokenReceivable {\\n    /// @notice An event to be fired when native tokens arrive to the fabric.\\n    /// @param amount An exact amount of the tokens arrived.\\n    event NativeTokenReceived(uint256 indexed amount);\\n}\\n\",\"keccak256\":\"0x4e36b4ed7155a888f381ce07e1e964291db1efb9d823edf6107187ed2fdc64e0\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaBitMaskLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FortunnaErrorsLib.sol\\\";\\n\\n/// @title Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.\\n/// @author Fortunna Team\\n/// @notice A lib holding bit mas manipulation functionality.\\nlibrary FortunnaBitMaskLib {\\n    /// @dev A helper function to generate bit masks from boolean array.\\n    /// @param flags A boolean array.\\n    function getMaskFromBooleans(\\n        bool[] calldata flags\\n    ) internal pure returns (bytes32 result) {\\n        if (flags.length > 256) {\\n            revert FortunnaErrorsLib.InvalidLength(\\n                flags.length,\\n                \\\"flagsLength>256\\\"\\n            );\\n        }\\n        for (uint256 i = 0; i < flags.length; i++) {\\n            if (flags[i]) {\\n                result |= bytes32(i == 0 ? 1 : 1 << i);\\n            }\\n        }\\n    }\\n\\n    /// @dev A helper function to check if some bit is up in the mask.\\n    /// @param mask A mask to be checked.\\n    /// @param index An index of the bit to be checked.\\n    function isBitUp(\\n        bytes32 mask,\\n        uint8 index\\n    ) internal pure returns (bool result) {\\n        uint256 counter = index == 0 ? 1 : 1 << index;\\n        return bytes32(counter) == mask & bytes32(counter);\\n    }\\n}\\n\",\"keccak256\":\"0x51229900d92e0c0ff03e279bfd36781868a1c3f6724031708d3b4c0885d7a30e\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Fortunna Yield Farming pools lib that contains all the errors.\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors.\\nlibrary FortunnaErrorsLib {\\n    /// @dev An error to be reverted if an `account` would be\\n    /// banned.\\n    /// @param account A banned user.\\n    error Banned(address account);\\n\\n    /// @dev An error to be reverted if an unknown prototype name would be used to deploy\\n    /// a pool or other utility smart-contract.\\n    /// @param prototypeIndex An index of prototype smart-contract.\\n    error UnknownPrototypeIndex(uint256 prototypeIndex);\\n\\n    /// @dev An error to be reverted if the pool deployer didn't payed enough for it.\\n    /// @param amount An actual amount the deployer sent.\\n    error NotEnoughtPayment(uint256 amount);\\n\\n    /// @dev An error to be reverted if some data structures `length` is not defined correctly.\\n    /// @param length An actual length of the data structure.\\n    /// @param comment Some comment as to what kind of a data structure has been addressed to.\\n    error InvalidLength(uint256 length, string comment);\\n\\n    /// @dev An error to be reverted if in some two addresses arrays the elements aren't unique.\\n    /// @param someAddress An address which is equal in both arrays.\\n    error NotUniqueAddresses(address someAddress);\\n\\n    /// @dev An error to be reverted if the contract is being deployed at a wrong chain.\\n    /// @param chainId An actual chain ID.\\n    error ForeignChainId(uint256 chainId);\\n\\n    /// @dev An error to be reverted if some Euclidean interval hasn't been defined correctly.\\n    /// @param start A start of the interval.\\n    /// @param finish An end of the interval.\\n    /// @param comment Some comment as to what kind of an interval this is.\\n    error IncorrectInterval(uint256 start, uint256 finish, string comment);\\n\\n    /// @dev An error to be reverted if some base points were defined out of their boundaries.\\n    /// @param basePoints An actual base points amount.\\n    /// @param comment Some comment as to what kind of a base points this is.\\n    error IncorrectBasePoints(uint256 basePoints, string comment);\\n\\n    /// @dev An error to be reverted if an `enity` is already exists in some address set.\\n    /// @param entity An entity address.\\n    error AddressAlreadyExists(address entity);\\n\\n    /// @dev An error to be reverted if the contract was being called before the initialization.\\n    error NotInitialized();\\n\\n    /// @dev An error to be reverted if an `entity` does not possess the `role`.\\n    /// @param role A role an entity doesn't posess.\\n    /// @param entity An entity violating authorization.\\n    error NotAuthorized(bytes32 role, address entity);\\n\\n    /// @dev An error to be reverted if some scalar property of the data structure was addressed wrongly.\\n    /// @param scalar A scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error InvalidScalar(uint256 scalar, string comment);\\n\\n    /// @dev An error to be reverted if some pair of scalars is not equal, but they should be.\\n    /// @param x A first scalar.\\n    /// @param y A second scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error AreNotEqual(uint256 x, uint256 y, string comment);\\n\\n    /// @dev An error to be reverted if some staker did not satisfy minimum limitations for the stake operation.\\n    /// @param amount An actual stake amount provided.\\n    /// @param limit A minimum limit to be satisfied.\\n    error NotEnoughStaked(uint256 amount, uint256 limit);\\n\\n    /// @dev An error to be reverted if some staker did not satisfy maximum limitations for the stake operation.\\n    /// @param amount An actual stake amount provided.\\n    /// @param limit A maximum limit to be satisfied.\\n    error TooMuchStaked(uint256 amount, uint256 limit);\\n\\n    /// @dev An error to be reverted if the pool expired.\\n    /// @param timeDifference A time how long the pool is expired.\\n    error DistributionEnded(uint256 timeDifference);\\n\\n    /// @dev An error to be reverted if the pool has not yet been started.\\n    /// @param timeDifference A time how long befire the pool is starting to work.\\n    error DistributionNotStarted(uint256 timeDifference);\\n\\n    /// @dev An error to be reverted if the pool lacks the rewards amount to distribute.\\n    error NotEnoughRewardToDistribute(uint256 provided, uint256 actual);\\n}\\n\",\"keccak256\":\"0x3fe2278065d3b4c6c6736eee09510160bab4c767a5c1c113f2bf1b420a9b06fe\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title Canonical Fortunna Yield Farming pools lib\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors, helpers functions and constants.\\nlibrary FortunnaLib {\\n    /// @dev A struct to hold some custom parameters for the pool that aren't external protocol agnostic.\\n    struct CustomPoolParameters {\\n        // An address of the Uniswap V3 NonfungiblePositionManager contract.\\n        address nonfungiblePositionManager;\\n    }\\n\\n    /// @dev A struct to hold pools scalar deploy parameters.\\n    struct PoolParameters {\\n        // An index of pool prototype in the factory list of prototypes.\\n        uint256 protoPoolIdx;\\n        // Start of the pool reward distribution period.\\n        uint256 startTimestamp;\\n        // End of the pool reward distribution period.\\n        uint256 endTimestamp;\\n        // Minimal amount for user to be able to deposit to the pool.\\n        uint256 minStakeAmount;\\n        // Maximal amount for user to be able to deposit to the pool.\\n        uint256 maxStakeAmount;\\n        // A time duration in seconds for a user to wait until they could receiver their rewards.\\n        uint256 minLockUpRewardsPeriod;\\n        // A fee amount in base points to be charged from user if they would attempt to receiver their rewards.\\n        uint256 earlyWithdrawalFeeBasePoints;\\n        // A fee amount in base points to be charged from user if they would attempt to perform deposit/withdraw.\\n        uint256 depositWithdrawFeeBasePoints;\\n        // A percent from total reward provided being distributed to stakers.\\n        uint256 totalRewardBasePointsPerDistribution;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is staking token.\\n        bytes32 stakingTokensMask;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is reward token.\\n        bytes32 rewardTokensMask;\\n        CustomPoolParameters custom;\\n    }\\n\\n    /// @dev A struct to hold pools vector deploy parameters.\\n    struct PoolParametersArrays {\\n        // An array of tokens to be used as either reward or staking tokens.\\n        address[] utilizingTokens;\\n        // Array of pairs <index of reward token, initial total reward amount>\\n        uint256[2][] initialRewardAmounts;\\n        // An array of pairs <index of staking token, deposit amount>\\n        uint256[2][] initialDepositAmounts;\\n    }\\n\\n    /// @dev A struct to hold a pay info for pool deployment.\\n    struct PaymentInfo {\\n        // A token address to be accepted as payment.\\n        address paymentToken;\\n        // A payment amount for pool deploy.\\n        uint256 cost;\\n    }\\n\\n    /// @notice A role hash to mark addresses to be held as reward tokens.\\n    bytes32 public constant ALLOWED_REWARD_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_REWARD_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as staking tokens.\\n    bytes32 public constant ALLOWED_STAKING_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_STAKING_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as external reward tokens from another protocols.\\n    bytes32 public constant ALLOWED_EXTERNAL_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_EXTERNAL_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as banned users.\\n    bytes32 public constant BANNED_ROLE = keccak256(\\\"BANNED_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as payment for pool deploy tokens.\\n    bytes32 public constant ALLOWED_PAYMENT_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_PAYMENT_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant LP_MINTER_BURNER_ROLE =\\n        keccak256(\\\"LP_MINTER_BURNER_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant POOL_REWARDS_PROVIDER =\\n        keccak256(\\\"POOL_REWARDS_PROVIDER\\\");\\n\\n    /// @notice A max of base points. (ex. Like 100 in percents)\\n    uint256 public constant BASE_POINTS_MAX = 10000;\\n\\n    /// @notice A given precision for math operations;\\n    uint256 public constant PRECISION = 1e10;\\n\\n    /// @notice A dead address for floor tokens to be minted\\n    address public constant DEAD_ADDRESS =\\n        0x000000000000000000000000000000000000dEaD;\\n}\\n\",\"keccak256\":\"0x397c16ecc55200397bc740e651295e71ccd2c79edf4baf747392233ae6047789\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061011e575f3560e01c80636e8eb2f21161009d578063acc9606f11610062578063acc9606f14610370578063ce883cdb14610384578063d547741f14610398578063e9dcf5e4146103b7578063ef251fc2146103d6575f80fd5b80636e8eb2f2146102ec578063708aaa351461030057806388cb29581461031f57806391d148541461033e578063a217fddf1461035d575f80fd5b806336568abe116100e357806336568abe1461023a5780634442674a14610259578063494afd1b1461026c5780634af1b0b51461028b5780635536cb9b146102cd575f80fd5b806301ffc9a71461015357806305ea2183146101875780631bbb12fc146101be578063248a9ca3146101dd5780632f2ff15d14610219575f80fd5b3661014f5760405134907f347c40822e6eef789530725ec7aa62355b81752377bc28795820ab63d9bc2bf9905f90a2005b5f80fd5b34801561015e575f80fd5b5061017261016d366004611659565b6103f5565b60405190151581526020015b60405180910390f35b348015610192575f80fd5b506101a66101a1366004611680565b61042b565b6040516001600160a01b03909116815260200161017e565b3480156101c9575f80fd5b506101a66101d8366004611680565b610437565b3480156101e8575f80fd5b5061020b6101f7366004611680565b5f9081526020819052604090206001015490565b60405190815260200161017e565b348015610224575f80fd5b506102386102333660046116ab565b610443565b005b348015610245575f80fd5b506102386102543660046116ab565b61046c565b6101a66102673660046116d9565b6104d2565b348015610277575f80fd5b50610238610286366004611728565b61069c565b348015610296575f80fd5b506001546002546102ae916001600160a01b03169082565b604080516001600160a01b03909316835260208301919091520161017e565b3480156102d8575f80fd5b506102ae6102e7366004611680565b610709565b3480156102f7575f80fd5b5061020b61076a565b34801561030b575f80fd5b5061023861031a366004611766565b61077a565b34801561032a575f80fd5b5061020b610339366004611781565b61078f565b348015610349575f80fd5b506101726103583660046116ab565b6107a1565b348015610368575f80fd5b5061020b5f81565b34801561037b575f80fd5b5061020b600281565b34801561038f575f80fd5b5061020b6107c9565b3480156103a3575f80fd5b506102386103b23660046116ab565b6107d4565b3480156103c2575f80fd5b506102ae6103d13660046117fd565b6107f8565b3480156103e1575f80fd5b506102386103f0366004611833565b6108af565b5f6001600160e01b03198216637965db0b60e01b148061042557506301ffc9a760e01b6001600160e01b03198316145b92915050565b5f6104256003836108c6565b5f6104256005836108c6565b5f8281526020819052604090206001015461045d816108d1565b61046783836108de565b505050565b6104967f3735310f7cbb434a4412bb30a00c71d49f056e4bfe5a28c0b8c295a228fbbbde826107a1565b156104c457604051631868ef8960e11b81526001600160a01b03821660048201526024015b60405180910390fd5b6104ce8282610961565b5050565b5f33610511816104e56020860186611849565b90506104f46040870187611849565b905061012088013561014089013561050c8980611896565b6109db565b61051a84610ca1565b6001546001600160a01b03166105545760025434101561054f57604051630336cc6d60e51b81523460048201526024016104bb565b610573565b600254600154610573916001600160a01b039091169083903090610e8e565b5f61057e8535610709565b90935090506105ad7f8e7eec3a91568ea051efb6d35e7514ef01e4807481274e632bc3d6a704427c58846108de565b6105b8600384610ef9565b6105e057604051630db36a8f60e41b81526001600160a01b03841660048201526024016104bb565b5f6105ed600587356108c6565b90506106026001600160a01b03821683610f0d565b5060405163221809ad60e11b81526001600160a01b03851690634430135a906106339086908a908a90600401611a4c565b5f604051808303815f87803b15801561064a575f80fd5b505af115801561065c573d5f803e3d5ffd5b50506040516001600160a01b03871692507f83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc91505f90a250505092915050565b5f6106a6816108d1565b6001600160a01b038416156106ce576106c96001600160a01b0385163384610fa7565b610703565b6040516001600160a01b0384169083156108fc029084905f818181858888f19350505050158015610701573d5f803e3d5ffd5b505b50505050565b5f80806107176005856108c6565b90506107236003610fd7565b60405160200161073591815260200190565b60408051601f19818403018152919052805160209091012091506107626001600160a01b03821683610fe0565b925050915091565b5f6107756005610fd7565b905090565b5f610784816108d1565b610467600583610ef9565b5f61079a8383610fec565b9392505050565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b5f6107756003610fd7565b5f828152602081905260409020600101546107ee816108d1565b61046783836110a2565b5f80838360405160200161081b929190918252151560f81b602082015260210190565b60408051601f19818403018152919052805160209091012090505f610842600560026108c6565b90505f61088d8660405160200161085b91815260200190565b60408051601f19818403018152919052805160209091012061087e60058a6108c6565b6001600160a01b031690610fe0565b90506108a36001600160a01b0383168483611106565b93505050935093915050565b5f6108b9816108d1565b8160016107038282611af3565b5f61079a8383611162565b6108db8133611188565b50565b6108e882826107a1565b6104ce575f828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561091d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b03811633146109d15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104bb565b6104ce82826110a2565b610a057f3735310f7cbb434a4412bb30a00c71d49f056e4bfe5a28c0b8c295a228fbbbde886107a1565b15610a2e57604051631868ef8960e11b81526001600160a01b03881660048201526024016104bb565b610100811115610a80576040805163023d531160e01b815260048101839052602481019190915260136044820152723aba34b634bd34b733aa37b5b2b7399f191a9b60691b60648201526084016104bb565b5f5b60ff8116821115610bdb575f83838360ff16818110610aa357610aa3611b29565b9050602002016020810190610ab89190611766565b9050610ac486836111e1565b15610b4157610af37fa13b5fd39f62a16c47923a1b238b123e180d525e88a29febb32fa41cabad5798826107a1565b610b415760405163a78e4aa560e01b81527fa13b5fd39f62a16c47923a1b238b123e180d525e88a29febb32fa41cabad579860048201526001600160a01b03821660248201526044016104bb565b610b4b85836111e1565b15610bc857610b7a7f887501d93d651d0c9fdbe85f9da87d0d1fd1b1e2fa77767b6129c0bf474923ac826107a1565b610bc85760405163a78e4aa560e01b81527f887501d93d651d0c9fdbe85f9da87d0d1fd1b1e2fa77767b6129c0bf474923ac60048201526001600160a01b03821660248201526044016104bb565b5080610bd381611b51565b915050610a82565b50858114610c3a5760405163d89baa0360e01b8152600481018790526024810182905260606044820152601860648201527f746f6b656e734c656e213d696e69745265776172644c656e0000000000000000608482015260a4016104bb565b848114610c985760405163d89baa0360e01b8152600481018690526024810182905260606044820152601960648201527f746f6b656e734c656e213d696e69744465706f7369744c656e00000000000000608482015260a4016104bb565b50505050505050565b5f610cae600583356108c6565b6001600160a01b031603610cd85760405163f765bea160e01b8152813560048201526024016104bb565b806040013581602001351115610d32578060200135816040013560405163549fcbad60e11b81526004016104bb92919091825260208201526060604082018190526004908201526374696d6560e01b608082015260a00190565b806080013581606001351115610d8c5760405163549fcbad60e11b81526060808301356004830152608083013560248301526044820152600b60648201526a1cdd185ad9505b5bdd5b9d60aa1b608482015260a4016104bb565b6127108160c001351115610de15760408051632d8589e760e11b815260c083013560048201526024810191909152600f60448201526e19585c9b1e55da5d1a191c985dd85b608a1b60648201526084016104bb565b6127108160e001351115610e365760408051632d8589e760e11b815260e083013560048201526024810191909152600f60448201526e6465706f736974576974686472617760881b60648201526084016104bb565b61271081610100013511156108db5760408051632d8589e760e11b815261010083013560048201526024810191909152601060448201526f72657761726442617365506f696e747360801b60648201526084016104bb565b6040516001600160a01b03808516602483015283166044820152606481018290526107039085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611208565b5f61079a836001600160a01b0384166112db565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760095ff590506001600160a01b0381166104255760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016104bb565b6040516001600160a01b03831660248201526044810182905261046790849063a9059cbb60e01b90606401610ec2565b5f610425825490565b5f61079a838330611106565b5f61010082111561103b576040805163023d531160e01b8152600481018490526024810191909152600f60448201526e333630b3b9a632b733ba341f191a9b60891b60648201526084016104bb565b5f5b8281101561109b5783838281811061105757611057611b29565b905060200201602081019061106c9190611b6f565b15611089578015611080576001811b611083565b60015b91909117905b8061109381611b8a565b91505061103d565b5092915050565b6110ac82826107a1565b156104ce575f828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60405160388101919091526f5af43d82803e903d91602b57fd5bf3ff60248201526014810192909252733d602d80600a3d3981f3363d3d373d3d3d363d73825260588201526037600c8201206078820152605560439091012090565b5f825f01828154811061117757611177611b29565b905f5260205f200154905092915050565b61119282826107a1565b6104ce5761119f81611327565b6111aa836020611339565b6040516020016111bb929190611bc4565b60408051601f198184030181529082905262461bcd60e51b82526104bb91600401611c38565b5f8060ff8316156111f857600160ff84161b6111fb565b60015b8481161491505092915050565b5f61125c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114cf9092919063ffffffff16565b905080515f148061127c57508080602001905181019061127c9190611c6a565b6104675760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104bb565b5f81815260018301602052604081205461132057508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610425565b505f610425565b60606104256001600160a01b03831660145b60605f611347836002611c85565b611352906002611c9c565b67ffffffffffffffff81111561136a5761136a611caf565b6040519080825280601f01601f191660200182016040528015611394576020820181803683370190505b509050600360fc1b815f815181106113ae576113ae611b29565b60200101906001600160f81b03191690815f1a905350600f60fb1b816001815181106113dc576113dc611b29565b60200101906001600160f81b03191690815f1a9053505f6113fe846002611c85565b611409906001611c9c565b90505b6001811115611480576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061143d5761143d611b29565b1a60f81b82828151811061145357611453611b29565b60200101906001600160f81b03191690815f1a90535060049490941c9361147981611cc3565b905061140c565b50831561079a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104bb565b60606114dd84845f856114e5565b949350505050565b6060824710156115465760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104bb565b5f80866001600160a01b031685876040516115619190611cd8565b5f6040518083038185875af1925050503d805f811461159b576040519150601f19603f3d011682016040523d82523d5f602084013e6115a0565b606091505b50915091506115b1878383876115bc565b979650505050505050565b6060831561162a5782515f03611623576001600160a01b0385163b6116235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104bb565b50816114dd565b6114dd838381511561163f5781518083602001fd5b8060405162461bcd60e51b81526004016104bb9190611c38565b5f60208284031215611669575f80fd5b81356001600160e01b03198116811461079a575f80fd5b5f60208284031215611690575f80fd5b5035919050565b6001600160a01b03811681146108db575f80fd5b5f80604083850312156116bc575f80fd5b8235915060208301356116ce81611697565b809150509250929050565b5f808284036101a08112156116ec575f80fd5b610180808212156116fb575f80fd5b849350830135905067ffffffffffffffff811115611717575f80fd5b8301606081860312156116ce575f80fd5b5f805f6060848603121561173a575f80fd5b833561174581611697565b9250602084013561175581611697565b929592945050506040919091013590565b5f60208284031215611776575f80fd5b813561079a81611697565b5f8060208385031215611792575f80fd5b823567ffffffffffffffff808211156117a9575f80fd5b818501915085601f8301126117bc575f80fd5b8135818111156117ca575f80fd5b8660208260051b85010111156117de575f80fd5b60209290920196919550909350505050565b80151581146108db575f80fd5b5f805f6060848603121561180f575f80fd5b83359250602084013591506040840135611828816117f0565b809150509250925092565b5f60408284031215611843575f80fd5b50919050565b5f808335601e1984360301811261185e575f80fd5b83018035915067ffffffffffffffff821115611878575f80fd5b6020019150600681901b360382131561188f575f80fd5b9250929050565b5f808335601e198436030181126118ab575f80fd5b83018035915067ffffffffffffffff8211156118c5575f80fd5b6020019150600581901b360382131561188f575f80fd5b80356118e781611697565b6001600160a01b031690915250565b5f808335601e1984360301811261190b575f80fd5b830160208101925035905067ffffffffffffffff81111561192a575f80fd5b8060061b360382131561188f575f80fd5b8183526020830192505f815f5b8481101561196757604080838837958601959190910190600101611948565b5093949350505050565b5f606083018235601e19843603018112611989575f80fd5b8301602081810191359067ffffffffffffffff8211156119a7575f80fd5b8160051b36038313156119b8575f80fd5b606087529281905290915f9190608087015b828410156119fa5784356119dd81611697565b6001600160a01b03168152938101936001939093019281016119ca565b611a06828801886118f6565b9550935087810382890152611a1c81868661193b565b945050505050611a2f60408401846118f6565b8583036040870152611a4283828461193b565b9695505050505050565b5f6101c060018060a01b038616835284356020840152602085013560408401526040850135606084015260608501356080840152608085013560a084015260a085013560c084015260c085013560e084015261010060e086013581850152610120818701358186015261014091508087013582860152506101608187013581860152611ade61018086018289016118dc565b5050806101a0840152611a4281840185611971565b8135611afe81611697565b81546001600160a01b0319166001600160a01b03919091161781556020919091013560019190910155565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f60ff821660ff8103611b6657611b66611b3d565b60010192915050565b5f60208284031215611b7f575f80fd5b813561079a816117f0565b5f60018201611b9b57611b9b611b3d565b5060010190565b5f5b83811015611bbc578181015183820152602001611ba4565b50505f910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f8351611bfb816017850160208801611ba2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611c2c816028840160208801611ba2565b01602801949350505050565b602081525f8251806020840152611c56816040850160208701611ba2565b601f01601f19169190910160400192915050565b5f60208284031215611c7a575f80fd5b815161079a816117f0565b808202811582820484141761042557610425611b3d565b8082018082111561042557610425611b3d565b634e487b7160e01b5f52604160045260245ffd5b5f81611cd157611cd1611b3d565b505f190190565b5f8251611ce9818460208701611ba2565b919091019291505056fea2646970667358221220ec1ba51698cd4b55e876bcf85f66a59c007f25bba1f6684ee80d0849ee3dee8c64736f6c63430008140033",
  "devdoc": {
    "author": "Fortunna Team",
    "errors": {
      "AddressAlreadyExists(address)": [
        {
          "details": "An error to be reverted if an `enity` is already exists in some address set.",
          "params": {
            "entity": "An entity address."
          }
        }
      ],
      "AreNotEqual(uint256,uint256,string)": [
        {
          "details": "An error to be reverted if some pair of scalars is not equal, but they should be.",
          "params": {
            "comment": "Some comment as to what kind of a data structure property this is.",
            "x": "A first scalar.",
            "y": "A second scalar."
          }
        }
      ],
      "Banned(address)": [
        {
          "details": "An error to be reverted if an `account` would be banned.",
          "params": {
            "account": "A banned user."
          }
        }
      ],
      "IncorrectBasePoints(uint256,string)": [
        {
          "details": "An error to be reverted if some base points were defined out of their boundaries.",
          "params": {
            "basePoints": "An actual base points amount.",
            "comment": "Some comment as to what kind of a base points this is."
          }
        }
      ],
      "IncorrectInterval(uint256,uint256,string)": [
        {
          "details": "An error to be reverted if some Euclidean interval hasn't been defined correctly.",
          "params": {
            "comment": "Some comment as to what kind of an interval this is.",
            "finish": "An end of the interval.",
            "start": "A start of the interval."
          }
        }
      ],
      "InvalidLength(uint256,string)": [
        {
          "details": "An error to be reverted if some data structures `length` is not defined correctly.",
          "params": {
            "comment": "Some comment as to what kind of a data structure has been addressed to.",
            "length": "An actual length of the data structure."
          }
        }
      ],
      "NotAuthorized(bytes32,address)": [
        {
          "details": "An error to be reverted if an `entity` does not possess the `role`.",
          "params": {
            "entity": "An entity violating authorization.",
            "role": "A role an entity doesn't posess."
          }
        }
      ],
      "NotEnoughtPayment(uint256)": [
        {
          "details": "An error to be reverted if the pool deployer didn't payed enough for it.",
          "params": {
            "amount": "An actual amount the deployer sent."
          }
        }
      ],
      "UnknownPrototypeIndex(uint256)": [
        {
          "details": "An error to be reverted if an unknown prototype name would be used to deploy a pool or other utility smart-contract.",
          "params": {
            "prototypeIndex": "An index of prototype smart-contract."
          }
        }
      ]
    },
    "events": {
      "NativeTokenReceived(uint256)": {
        "params": {
          "amount": "An exact amount of the tokens arrived."
        }
      },
      "PoolCreated(address)": {
        "params": {
          "pool": "An address of the newly created pool."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addPrototype(address)": {
        "params": {
          "prototype": "An address of the deployed prototype."
        }
      },
      "constructor": {
        "params": {
          "paymentTokens": "An array of tokens addresses to be allowed as payment for pool deploy tokens."
        }
      },
      "createPool((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))": {
        "params": {
          "poolParameters": "A scalar parameters for the pool.",
          "poolParametersArrays": "A vector parameters for the pool."
        }
      },
      "generateMask(bool[])": {
        "params": {
          "flags": "An array of booleans to be converted to a mask."
        }
      },
      "getPoolAt(uint256)": {
        "params": {
          "index": "An index in the pools enumerable set."
        }
      },
      "getPrototypeAt(uint256)": {
        "params": {
          "index": "An index in the pools enumerable set."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "predictFortunnaTokenAddress(uint256,uint256,bool)": {
        "params": {
          "isStakingOrReward": "Is a Fortuna Dust token would be utilized as a staking or a reward token? True - staking, False - reward.",
          "poolIdx": "A specific already deployed pool index from the factory.",
          "poolProtoIdx": "A pool prototype index to which the token would be connected to."
        },
        "returns": {
          "result": "An address of the would be deployed token.",
          "salt": "A salt bytes to deploy such a token."
        }
      },
      "predictPoolAddress(uint256)": {
        "params": {
          "poolProtoIdx": "An index of the pool prototype in the factory."
        },
        "returns": {
          "result": "A predicted address of the pool.",
          "salt": "A salt bytes to deploy the pool to the predicted address."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "sendCollectedTokens(address,address,uint256)": {
        "params": {
          "amount": "An exact amount of the tokens to be sent.",
          "token": "A token to be send to.",
          "who": "A receiver of the tokens."
        }
      },
      "setPaymentInfo((address,uint256))": {
        "params": {
          "_paymentInfo": "A struct to hold new payment info."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "paymentInfo": {
        "returns": {
          "cost": "An actual cost of the pool deploy.",
          "paymentToken": "An address of the token to be held as payment asset."
        }
      },
      "pools": {
        "details": "A set of unique deployed pools."
      },
      "prototypes": {
        "details": "A set of unique deployed prototypes."
      }
    },
    "title": "Canonical Fortunna Yield Farming pools factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NativeTokenReceived(uint256)": {
        "notice": "An event to be fired when native tokens arrive to the fabric."
      },
      "PoolCreated(address)": {
        "notice": "An event to be emitted when the pool is created."
      }
    },
    "kind": "user",
    "methods": {
      "FORTUNNA_TOKEN_PROTO_INDEX()": {
        "notice": "An index in `prototypes` of FortunnaToken. Depends on the addition process in the initialization function."
      },
      "addPrototype(address)": {
        "notice": "An admin function to create to add deployed prototype."
      },
      "constructor": {
        "notice": "A constructor."
      },
      "createPool((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))": {
        "notice": "The main public function. It is deploying the pool according to the pool parameters and it's prototype."
      },
      "generateMask(bool[])": {
        "notice": "A public helper function to make mask generation quicker."
      },
      "getPoolAt(uint256)": {
        "notice": "A public getter function to acquire a pool address at the specific index."
      },
      "getPoolsLength()": {
        "notice": "A public getter function to acquire the total amount of deployed pools."
      },
      "getPrototypeAt(uint256)": {
        "notice": "A public getter function to acquire a prototype address at the specific index."
      },
      "getPrototypesLength()": {
        "notice": "A public getter function to acquire the total amount of deployed prototypes."
      },
      "paymentInfo()": {
        "notice": "A getter function to acquire the payment info for one pool deploy."
      },
      "predictFortunnaTokenAddress(uint256,uint256,bool)": {
        "notice": "A helper function that could predict an address of the Fortuna Dust token for a specific pool."
      },
      "predictPoolAddress(uint256)": {
        "notice": "A helper function that could predict an address for the pool with a `poolProtoIdx` parameter."
      },
      "sendCollectedTokens(address,address,uint256)": {
        "notice": "An admin function to send all collected payments in any tokens to the specific receiver."
      },
      "setPaymentInfo((address,uint256))": {
        "notice": "An admin setter function to adjust payment info."
      }
    },
    "notice": "Deploys Fortunna Yield Farming pools and manages ownership and control over pool protocol fees.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4587,
        "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
        "label": "paymentInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PaymentInfo)8142_storage"
      },
      {
        "astId": 4591,
        "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)4077_storage"
      },
      {
        "astId": 4595,
        "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
        "label": "prototypes",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)4077_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4077_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4076,
            "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3762_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PaymentInfo)8142_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaLib.PaymentInfo",
        "members": [
          {
            "astId": 8139,
            "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
            "label": "paymentToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8141,
            "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
            "label": "cost",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3762_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3757,
            "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3761,
            "contract": "contracts/FortunnaFactory.sol:FortunnaFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}