{
  "address": "0x72226562778C615fB510Dbf00DB467adF76134E0",
  "abi": [],
  "transactionHash": "0xc575416b441625c8c12fd386610a95e6a6a671fa03e4849ec009c6f45b197a9e",
  "receipt": {
    "to": null,
    "from": "0x57eb63d0aab5822EFCd7A9B56775F772D3e03CfD",
    "contractAddress": "0x72226562778C615fB510Dbf00DB467adF76134E0",
    "transactionIndex": 39,
    "gasUsed": "71998",
    "logsBloom": "0x
    "blockHash": "0x4ab7fabfcdaf376f2b6a8a3ff1aa382630ad974874e50c0b218bac50f1fc0584",
    "transactionHash": "0xc575416b441625c8c12fd386610a95e6a6a671fa03e4849ec009c6f45b197a9e",
    "logs": [],
    "blockNumber": 9463053,
    "cumulativeGasUsed": "5177675",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dfc0b4bbd81236be9f16ab2d5a82ad4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Fortunna Team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A lib holding bit mas manipulation functionality.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/FortunnaBitMaskLib.sol\":\"FortunnaBitMaskLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/FortunnaBitMaskLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FortunnaErrorsLib.sol\\\";\\n\\n/// @title Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.\\n/// @author Fortunna Team\\n/// @notice A lib holding bit mas manipulation functionality.\\nlibrary FortunnaBitMaskLib {\\n    /// @dev A helper function to generate bit masks from boolean array.\\n    /// @param flags A boolean array.\\n    function getMaskFromBooleans(\\n        bool[] calldata flags\\n    ) internal pure returns (bytes32 result) {\\n        if (flags.length > 256) {\\n            revert FortunnaErrorsLib.InvalidLength(\\n                flags.length,\\n                \\\"flagsLength>256\\\"\\n            );\\n        }\\n        for (uint256 i = 0; i < flags.length; i++) {\\n            if (flags[i]) {\\n                result |= bytes32(i == 0 ? 1 : 1 << i);\\n            }\\n        }\\n    }\\n\\n    /// @dev A helper function to check if some bit is up in the mask.\\n    /// @param mask A mask to be checked.\\n    /// @param index An index of the bit to be checked.\\n    function isBitUp(\\n        bytes32 mask,\\n        uint8 index\\n    ) internal pure returns (bool result) {\\n        uint256 counter = index == 0 ? 1 : 1 << index;\\n        return bytes32(counter) == mask & bytes32(counter);\\n    }\\n}\\n\",\"keccak256\":\"0x51229900d92e0c0ff03e279bfd36781868a1c3f6724031708d3b4c0885d7a30e\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Fortunna Yield Farming pools lib that contains all the errors.\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors.\\nlibrary FortunnaErrorsLib {\\n    /// @dev An error to be reverted if an `account` would be\\n    /// banned.\\n    /// @param account A banned user.\\n    error Banned(address account);\\n\\n    /// @dev An error to be reverted if an unknown prototype name would be used to deploy\\n    /// a pool or other utility smart-contract.\\n    /// @param prototypeIndex An index of prototype smart-contract.\\n    error UnknownPrototypeIndex(uint256 prototypeIndex);\\n\\n    /// @dev An error to be reverted if the pool deployer didn't payed enough for it.\\n    /// @param amount An actual amount the deployer sent.\\n    error NotEnoughtPayment(uint256 amount);\\n\\n    /// @dev An error to be reverted if some data structures `length` is not defined correctly.\\n    /// @param length An actual length of the data structure.\\n    /// @param comment Some comment as to what kind of a data structure has been addressed to.\\n    error InvalidLength(uint256 length, string comment);\\n\\n    /// @dev An error to be reverted if in some two addresses arrays the elements aren't unique.\\n    /// @param someAddress An address which is equal in both arrays.\\n    error NotUniqueAddresses(address someAddress);\\n\\n    /// @dev An error to be reverted if the contract is being deployed at a wrong chain.\\n    /// @param chainId An actual chain ID.\\n    error ForeignChainId(uint256 chainId);\\n\\n    /// @dev An error to be reverted if some Euclidean interval hasn't been defined correctly.\\n    /// @param start A start of the interval.\\n    /// @param finish An end of the interval.\\n    /// @param comment Some comment as to what kind of an interval this is.\\n    error IncorrectInterval(uint256 start, uint256 finish, string comment);\\n\\n    /// @dev An error to be reverted if some base points were defined out of their boundaries.\\n    /// @param basePoints An actual base points amount.\\n    /// @param comment Some comment as to what kind of a base points this is.\\n    error IncorrectBasePoints(uint256 basePoints, string comment);\\n\\n    /// @dev An error to be reverted if an `enity` is already exists in some address set.\\n    /// @param entity An entity address.\\n    error AddressAlreadyExists(address entity);\\n\\n    /// @dev An error to be reverted if the contract was being called before the initialization.\\n    error NotInitialized();\\n\\n    /// @dev An error to be reverted if an `entity` does not possess the `role`.\\n    /// @param role A role an entity doesn't posess.\\n    /// @param entity An entity violating authorization.\\n    error NotAuthorized(bytes32 role, address entity);\\n\\n    /// @dev An error to be reverted if some scalar property of the data structure was addressed wrongly.\\n    /// @param scalar A scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error InvalidScalar(uint256 scalar, string comment);\\n\\n    /// @dev An error to be reverted if some pair of scalars is not equal, but they should be.\\n    /// @param x A first scalar.\\n    /// @param y A second scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error AreNotEqual(uint256 x, uint256 y, string comment);\\n\\n    /// @dev An error to be reverted if some staker did not satisfy minimum limitations for the stake operation.\\n    /// @param amount An actual stake amount provided.\\n    /// @param limit A minimum limit to be satisfied.\\n    error NotEnoughStaked(uint256 amount, uint256 limit);\\n\\n    /// @dev An error to be reverted if some staker did not satisfy maximum limitations for the stake operation.\\n    /// @param amount An actual stake amount provided.\\n    /// @param limit A maximum limit to be satisfied.\\n    error TooMuchStaked(uint256 amount, uint256 limit);\\n\\n    /// @dev An error to be reverted if the pool expired.\\n    /// @param timeDifference A time how long the pool is expired.\\n    error DistributionEnded(uint256 timeDifference);\\n\\n    /// @dev An error to be reverted if the pool has not yet been started.\\n    /// @param timeDifference A time how long befire the pool is starting to work.\\n    error DistributionNotStarted(uint256 timeDifference);\\n\\n    /// @dev An error to be reverted if the pool lacks the rewards amount to distribute.\\n    error NotEnoughRewardToDistribute(uint256 provided, uint256 actual);\\n}\\n\",\"keccak256\":\"0x3fe2278065d3b4c6c6736eee09510160bab4c767a5c1c113f2bf1b420a9b06fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122077a2e61fd2d97c1884508596bf1745ee4d910998b7a54b3ad9148a936ba4cb1e64736f6c63430008140033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122077a2e61fd2d97c1884508596bf1745ee4d910998b7a54b3ad9148a936ba4cb1e64736f6c63430008140033",
  "devdoc": {
    "author": "Fortunna Team",
    "kind": "dev",
    "methods": {},
    "title": "Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A lib holding bit mas manipulation functionality.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}