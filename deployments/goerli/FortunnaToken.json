{
  "address": "0x1f06d1A5b2D9d0ad45DBcf91CafAB6A5d9329419",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughtPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeTokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingTokenIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underlyingTokenAmountInOrOut",
          "type": "uint256"
        }
      ],
      "name": "calcFortunnaTokensInOrOutPerUnderlyingToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fortunnaTokensAmountInOrOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingTokenIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToMintOrBurn",
          "type": "uint256"
        }
      ],
      "name": "calcUnderlyingTokensInOrOutPerFortunnaToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "underlyingTokensInOrOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_stakingOrRewardTokens",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protoPoolIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLockUpRewardsPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earlyWithdrawalFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositWithdrawFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardBasePointsPerDistribution",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "stakingTokensMask",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "rewardTokensMask",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "nonfungiblePositionManager",
                  "type": "address"
                }
              ],
              "internalType": "struct FortunnaLib.CustomPoolParameters",
              "name": "custom",
              "type": "tuple"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParameters",
          "name": "poolParameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "utilizingTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialRewardAmounts",
              "type": "uint256[2][]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialDepositAmounts",
              "type": "uint256[2][]"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParametersArrays",
          "name": "poolParametersArrays",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isStakingOrRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToMint",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "underlyingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8a6bae00f24e0e3bdd72b27b168b99fc241873e80f5533d146f8c5fe819c30c1",
  "receipt": {
    "to": null,
    "from": "0x57eb63d0aab5822EFCd7A9B56775F772D3e03CfD",
    "contractAddress": "0x1f06d1A5b2D9d0ad45DBcf91CafAB6A5d9329419",
    "transactionIndex": 14,
    "gasUsed": "1875156",
    "logsBloom": "0x
    "blockHash": "0x4091d6788056fcbad6d9ca163e95db599728fa815967a5d3eafbf6439594d4e5",
    "transactionHash": "0x8a6bae00f24e0e3bdd72b27b168b99fc241873e80f5533d146f8c5fe819c30c1",
    "logs": [],
    "blockNumber": 9334371,
    "cumulativeGasUsed": "3331557",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c606527edc352ff35406216236e37da4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughtPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingTokenIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenAmountInOrOut\",\"type\":\"uint256\"}],\"name\":\"calcFortunnaTokensInOrOutPerUnderlyingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fortunnaTokensAmountInOrOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingTokenIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToMintOrBurn\",\"type\":\"uint256\"}],\"name\":\"calcUnderlyingTokensInOrOutPerFortunnaToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingTokensInOrOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakingOrRewardTokens\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protoPoolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockUpRewardsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWithdrawFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBasePointsPerDistribution\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stakingTokensMask\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rewardTokensMask\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"}],\"internalType\":\"struct FortunnaLib.CustomPoolParameters\",\"name\":\"custom\",\"type\":\"tuple\"}],\"internalType\":\"struct FortunnaLib.PoolParameters\",\"name\":\"poolParameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"utilizingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialRewardAmounts\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialDepositAmounts\",\"type\":\"uint256[2][]\"}],\"internalType\":\"struct FortunnaLib.PoolParametersArrays\",\"name\":\"poolParametersArrays\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingOrRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"NotAuthorized(bytes32,address)\":[{\"details\":\"An error to be reverted if an `entity` does not possess the `role`.\",\"params\":{\"entity\":\"An entity violating authorization.\",\"role\":\"A role an entity doesn't posess.\"}}],\"NotEnoughtPayment(uint256)\":[{\"details\":\"An error to be reverted if the pool deployer didn't payed enough for it.\",\"params\":{\"amount\":\"An actual amount the deployer sent.\"}}],\"NotInitialized()\":[{\"details\":\"An error to be reverted if the contract was being called before the initialization.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NativeTokenReceived(uint256)\":{\"params\":{\"amount\":\"An exact amount of the tokens arrived.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Could be called only by the admin.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"unpause()\":{\"details\":\"Could be called only by the admin.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NativeTokenReceived(uint256)\":{\"notice\":\"An event to be fired when native tokens arrive to the fabric.\"}},\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Triggers paused state.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FortunnaToken.sol\":\"FortunnaToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-new/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FactoryAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/security/Pausable.sol\\\";\\n\\nimport \\\"./libraries/FortunnaLib.sol\\\";\\nimport \\\"./libraries/FortunnaErrorsLib.sol\\\";\\n\\nabstract contract FactoryAuthorized is\\n    Initializable,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    address internal immutable __self = address(this);\\n    address internal _factory;\\n\\n    modifier delegatedOnly() {\\n        if (_isInitializing() || __self == address(this)) {\\n            revert FortunnaErrorsLib.NotInitialized();\\n        }\\n        _;\\n    }\\n\\n    function _onlyRoleInFactory(bytes32 role) internal view {\\n        address sender = _msgSender();\\n        if (!IAccessControl(_factory).hasRole(role, sender)) {\\n            revert FortunnaErrorsLib.NotAuthorized(role, sender);\\n        }\\n    }\\n\\n    modifier onlyAdmin() {\\n        // 0x00 == DEFAULT_ADMIN_ROLE\\n        _onlyRoleInFactory(0x00);\\n        _;\\n    }\\n\\n    modifier only(bytes32 role) {\\n        _onlyRoleInFactory(role);\\n        _;\\n    }\\n\\n    function _initialize(address __factory) internal {\\n        _factory = __factory;\\n    }\\n\\n    /// @notice Triggers paused state.\\n    /// @dev Could be called only by the admin.\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    /// @notice Returns to normal state.\\n    /// @dev Could be called only by the admin.\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x4ae3cccb63e8c31d2b0668e5984a7abf9c5fbdcec1f289c1e749cc7652b47639\",\"license\":\"MIT\"},\"contracts/FortunnaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/utils/Address.sol\\\";\\n\\nimport \\\"./libraries/FortunnaErrorsLib.sol\\\";\\nimport \\\"./libraries/FortunnaBitMaskLib.sol\\\";\\nimport \\\"./FactoryAuthorized.sol\\\";\\nimport \\\"./interfaces/IFortunnaToken.sol\\\";\\nimport \\\"./interfaces/IFortunnaPool.sol\\\";\\n\\ncontract FortunnaToken is ERC20, FactoryAuthorized, IFortunnaToken {\\n    using SafeERC20 for IERC20;\\n    using FortunnaBitMaskLib for bytes32;\\n    using Address for address payable;\\n\\n    bool public isStakingOrRewardToken;\\n    address public pool;\\n    bytes internal underlyingTokensSymbols = bytes(\\\"\\\");\\n\\n    address[] public underlyingTokens;\\n    mapping(uint256 => uint256) public getReserve;\\n\\n    constructor() ERC20(\\\"Fortunna Token\\\", \\\"FTA\\\") {}\\n\\n    function initialize(\\n        bool _stakingOrRewardTokens,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external override initializer {\\n        address sender = _msgSender();\\n        pool = sender;\\n        super._initialize(IFortunnaPool(sender).factory());\\n        isStakingOrRewardToken = _stakingOrRewardTokens;\\n        _mint(FortunnaLib.DEAD_ADDRESS, 1); // to make mint/burn functions work and not to dry out entirely the liquidity.\\n        for (\\n            uint8 i = 0;\\n            i < poolParametersArrays.utilizingTokens.length;\\n            i++\\n        ) {\\n            getReserve[i] = 1;\\n            if (\\n                _stakingOrRewardTokens\\n                    ? poolParameters.stakingTokensMask.isBitUp(i)\\n                    : poolParameters.rewardTokensMask.isBitUp(i)\\n            ) {\\n                underlyingTokens.push(poolParametersArrays.utilizingTokens[i]);\\n                if (poolParametersArrays.utilizingTokens[i] != address(0)) {\\n                    underlyingTokensSymbols = abi.encodePacked(\\n                        underlyingTokensSymbols,\\n                        IERC20Metadata(poolParametersArrays.utilizingTokens[i])\\n                            .symbol(),\\n                        \\\"x\\\"\\n                    );\\n                } else {\\n                    underlyingTokensSymbols = abi.encodePacked(\\n                        underlyingTokensSymbols,\\n                        \\\"ETHx\\\"\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ERC20\\n    function name()\\n        public\\n        view\\n        override(ERC20, IERC20Metadata)\\n        returns (string memory result)\\n    {\\n        result = string(\\n            abi.encodePacked(\\n                \\\"Fortunna LP token\\\",\\n                isStakingOrRewardToken ? \\\" for staking <\\\" : \\\" for rewards <\\\",\\n                underlyingTokensSymbols,\\n                \\\">\\\"\\n            )\\n        );\\n    }\\n\\n    /// @inheritdoc ERC20\\n    function symbol()\\n        public\\n        view\\n        override(ERC20, IERC20Metadata)\\n        returns (string memory result)\\n    {\\n        result = string(\\n            abi.encodePacked(\\n                isStakingOrRewardToken ? \\\"fts\\\" : \\\"ftr\\\",\\n                underlyingTokensSymbols\\n            )\\n        );\\n    }\\n\\n    function calcUnderlyingTokensInOrOutPerFortunnaToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 amountToMintOrBurn\\n    ) public view override returns (uint256 underlyingTokensInOrOut) {\\n        underlyingTokensInOrOut =\\n            ((amountToMintOrBurn *\\n                getReserve[underlyingTokenIdx] *\\n                FortunnaLib.PRECISION) / totalSupply()) /\\n            FortunnaLib.PRECISION;\\n    }\\n\\n    function calcFortunnaTokensInOrOutPerUnderlyingToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 underlyingTokenAmountInOrOut\\n    ) public view override returns (uint256 fortunnaTokensAmountInOrOut) {\\n        fortunnaTokensAmountInOrOut =\\n            ((underlyingTokenAmountInOrOut *\\n                totalSupply() *\\n                FortunnaLib.PRECISION) / getReserve[underlyingTokenIdx]) /\\n            FortunnaLib.PRECISION;\\n    }\\n\\n    function mint(\\n        address user,\\n        uint256 amountToMint\\n    ) external payable override delegatedOnly {\\n        if (!isStakingOrRewardToken) {\\n            _onlyRoleInFactory(FortunnaLib.LP_MINTER_BURNER_ROLE);\\n        }\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\n            uint256 amountIn = calcUnderlyingTokensInOrOutPerFortunnaToken(\\n                i,\\n                amountToMint\\n            );\\n            if (underlyingTokens[i] != address(0)) {\\n                IERC20(underlyingTokens[i]).safeTransferFrom(\\n                    user,\\n                    address(this),\\n                    amountIn\\n                );\\n            } else {\\n                if (amountIn > msg.value) {\\n                    revert FortunnaErrorsLib.NotEnoughtPayment(amountIn);\\n                }\\n            }\\n            getReserve[i] += amountIn;\\n        }\\n        _mint(user, amountToMint);\\n    }\\n\\n    function burn(\\n        address payable user,\\n        uint256 amount\\n    ) external override delegatedOnly {\\n        if (!isStakingOrRewardToken) {\\n            _onlyRoleInFactory(FortunnaLib.LP_MINTER_BURNER_ROLE);\\n        }\\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\\n            uint256 amountOut = calcUnderlyingTokensInOrOutPerFortunnaToken(\\n                i,\\n                amount\\n            );\\n            if (underlyingTokens[i] != address(0)) {\\n                IERC20(underlyingTokens[i]).safeTransferFrom(\\n                    address(this),\\n                    user,\\n                    amountOut\\n                );\\n            } else {\\n                user.sendValue(amountOut);\\n            }\\n            getReserve[i] -= amountOut;\\n        }\\n        _burn(user, amount);\\n    }\\n\\n    function _getInitialAmountOfUnderlyingToken(\\n        uint256[2][] calldata pairs,\\n        uint8 idx\\n    ) internal pure returns (uint256 result) {\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            if (pairs[i][0] == idx) {\\n                result = pairs[i][1];\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal override {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (spender == pool) {\\n            currentAllowance = type(uint256).max;\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"FortunnaToken: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev Every income in native tokens should be recorded as the behaviour\\n    /// of the contract would be a funds hub like.\\n    receive() external payable {\\n        emit NativeTokenReceived(msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x25c826f52c347779769faf01d2eaa0164830ccb132dca5b093409d69476eed72\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\n\\ninterface IFortunnaPool {\\n    event PartDistributed(uint256 partOfTotalRewards);\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event EmergencyWithdraw(address indexed user, uint256 reward);\\n\\n    function factory() external view returns (address);\\n\\n    function initialize(\\n        address poolOwner,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0x23baad8a2de0ebc38a0274621493d3281d5ae1d1fe165e6421a184ad8a0cdbb8\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\nimport \\\"./INativeTokenReceivable.sol\\\";\\n\\ninterface IFortunnaToken is IERC20, IERC20Metadata, INativeTokenReceivable {\\n    function mint(address user, uint256 amount) external payable;\\n\\n    function burn(address payable user, uint256 amount) external;\\n\\n    function calcFortunnaTokensInOrOutPerUnderlyingToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 underlyingTokenAmountInOrOut\\n    ) external view returns (uint256 fortunnaTokensAmountInOrOut);\\n\\n    function calcUnderlyingTokensInOrOutPerFortunnaToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 amountToMintOrBurn\\n    ) external view returns (uint256 underlyingTokensInOrOut);\\n\\n    function initialize(\\n        bool stakingOrRewardTokens,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0x98a720cbf0922279f7374a979294c3f80be4d8fda4c9fa77f3fe052b2a6a6d54\",\"license\":\"MIT\"},\"contracts/interfaces/INativeTokenReceivable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title The interface for the Fortunna Yield Farming smart-contracts that can receive native tokens.\\n/// @author Fortunna Team\\n/// @notice The interface allows smart-contracts to use an event to document all native tokens incoms.\\ninterface INativeTokenReceivable {\\n    /// @notice An event to be fired when native tokens arrive to the fabric.\\n    /// @param amount An exact amount of the tokens arrived.\\n    event NativeTokenReceived(uint256 indexed amount);\\n}\\n\",\"keccak256\":\"0x4e36b4ed7155a888f381ce07e1e964291db1efb9d823edf6107187ed2fdc64e0\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaBitMaskLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FortunnaErrorsLib.sol\\\";\\n\\n/// @title Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.\\n/// @author Fortunna Team\\n/// @notice A lib holding bit mas manipulation functionality.\\nlibrary FortunnaBitMaskLib {\\n    /// @dev A helper function to generate bit masks from boolean array.\\n    /// @param flags A boolean array.\\n    function getMaskFromBooleans(\\n        bool[] calldata flags\\n    ) internal pure returns (bytes32 result) {\\n        if (flags.length > 256) {\\n            revert FortunnaErrorsLib.InvalidLength(\\n                flags.length,\\n                \\\"flagsLength>256\\\"\\n            );\\n        }\\n        for (uint256 i = 0; i < flags.length; i++) {\\n            if (flags[i]) {\\n                result |= bytes32(i == 0 ? 1 : 1 << i);\\n            }\\n        }\\n    }\\n\\n    /// @dev A helper function to check if some bit is up in the mask.\\n    /// @param mask A mask to be checked.\\n    /// @param index An index of the bit to be checked.\\n    function isBitUp(\\n        bytes32 mask,\\n        uint8 index\\n    ) internal pure returns (bool result) {\\n        uint256 counter = index == 0 ? 1 : 1 << index;\\n        return bytes32(counter) == mask & bytes32(counter);\\n    }\\n}\\n\",\"keccak256\":\"0x51229900d92e0c0ff03e279bfd36781868a1c3f6724031708d3b4c0885d7a30e\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Fortunna Yield Farming pools lib that contains all the errors.\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors.\\nlibrary FortunnaErrorsLib {\\n    /// @dev An error to be reverted if an `account` would be\\n    /// banned.\\n    /// @param account A banned user.\\n    error Banned(address account);\\n\\n    /// @dev An error to be reverted if an unknown prototype name would be used to deploy\\n    /// a pool or other utility smart-contract.\\n    /// @param prototypeIndex An index of prototype smart-contract.\\n    error UnknownPrototypeIndex(uint256 prototypeIndex);\\n\\n    /// @dev An error to be reverted if the pool deployer didn't payed enough for it.\\n    /// @param amount An actual amount the deployer sent.\\n    error NotEnoughtPayment(uint256 amount);\\n\\n    /// @dev An error to be reverted if some data structures `length` is not defined correctly.\\n    /// @param length An actual length of the data structure.\\n    /// @param comment Some comment as to what kind of a data structure has been addressed to.\\n    error InvalidLength(uint256 length, string comment);\\n\\n    /// @dev An error to be reverted if in some two addresses arrays the elements aren't unique.\\n    /// @param someAddress An address which is equal in both arrays.\\n    error NotUniqueAddresses(address someAddress);\\n\\n    /// @dev An error to be reverted if the contract is being deployed at a wrong chain.\\n    /// @param chainId An actual chain ID.\\n    error ForeignChainId(uint256 chainId);\\n\\n    /// @dev An error to be reverted if some Euclidean interval hasn't been defined correctly.\\n    /// @param start A start of the interval.\\n    /// @param finish An end of the interval.\\n    /// @param comment Some comment as to what kind of an interval this is.\\n    error IncorrectInterval(uint256 start, uint256 finish, string comment);\\n\\n    /// @dev An error to be reverted if some base points were defined out of their boundaries.\\n    /// @param basePoints An actual base points amount.\\n    /// @param comment Some comment as to what kind of a base points this is.\\n    error IncorrectBasePoints(uint256 basePoints, string comment);\\n\\n    /// @dev An error to be reverted if an `enity` is already exists in some address set.\\n    /// @param entity An entity address.\\n    error AddressAlreadyExists(address entity);\\n\\n    /// @dev An error to be reverted if the contract was being called before the initialization.\\n    error NotInitialized();\\n\\n    /// @dev An error to be reverted if an `entity` does not possess the `role`.\\n    /// @param role A role an entity doesn't posess.\\n    /// @param entity An entity violating authorization.\\n    error NotAuthorized(bytes32 role, address entity);\\n\\n    /// @dev An error to be reverted if some scalar property of the data structure was addressed wrongly.\\n    /// @param scalar A scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error InvalidScalar(uint256 scalar, string comment);\\n\\n    /// @dev An error to be reverted if some pair of scalars is not equal, but they should be.\\n    /// @param x A first scalar.\\n    /// @param y A second scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error AreNotEqual(uint256 x, uint256 y, string comment);\\n\\n    error NotEnoughStaked(uint256 amount, uint256 limit);\\n\\n    error TooMuchStaked(uint256 amount, uint256 limit);\\n\\n    error DistributionEnded(uint256 timeDifference);\\n\\n    error DistributionNotStarted(uint256 timeDifference);\\n\\n    error InvalidWeightedInput(uint256[] amounts);\\n\\n    error NotEnoughRewardToDistribute(uint256 provided, uint256 actual);\\n\\n    error NotImplemented();\\n}\\n\",\"keccak256\":\"0x596563731924ab1fbf0706875e1d779b50ad814df109173141b4fdb192eafb58\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title Canonical Fortunna Yield Farming pools lib\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors, helpers functions and constants.\\nlibrary FortunnaLib {\\n    struct CustomPoolParameters {\\n        address nonfungiblePositionManager;\\n    }\\n\\n    /// @dev A struct to hold pools scalar deploy parameters.\\n    struct PoolParameters {\\n        // An index of pool prototype in the factory list of prototypes.\\n        uint256 protoPoolIdx;\\n        // Start of the pool reward distribution period.\\n        uint256 startTimestamp;\\n        // End of the pool reward distribution period.\\n        uint256 endTimestamp;\\n        // Minimal amount for user to be able to deposit to the pool.\\n        uint256 minStakeAmount;\\n        // Maximal amount for user to be able to deposit to the pool.\\n        uint256 maxStakeAmount;\\n        // A time duration in seconds for a user to wait until they could receiver their rewards.\\n        uint256 minLockUpRewardsPeriod;\\n        // A fee amount in base points to be charged from user if they would attempt to receiver their rewards.\\n        uint256 earlyWithdrawalFeeBasePoints;\\n        // A fee amount in base points to be charged from user if they would attempt to perform deposit/withdraw.\\n        uint256 depositWithdrawFeeBasePoints;\\n        // A percent from total reward provided being distributed to stakers.\\n        uint256 totalRewardBasePointsPerDistribution;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is staking token.\\n        bytes32 stakingTokensMask;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is reward token.\\n        bytes32 rewardTokensMask;\\n        CustomPoolParameters custom;\\n    }\\n\\n    /// @dev A struct to hold pools vector deploy parameters.\\n    struct PoolParametersArrays {\\n        // An array of tokens to be used as either reward or staking tokens.\\n        address[] utilizingTokens;\\n        // Array of pairs <index of reward token, initial total reward amount>\\n        uint256[2][] initialRewardAmounts;\\n        // An array of pairs <index of staking token, deposit amount>\\n        uint256[2][] initialDepositAmounts;\\n    }\\n\\n    /// @dev A struct to hold a pay info for pool deployment.\\n    struct PaymentInfo {\\n        // A token address to be accepted as payment.\\n        address paymentToken;\\n        // A payment amount for pool deploy.\\n        uint256 cost;\\n    }\\n\\n    /// @notice A role hash to mark addresses to be held as reward tokens.\\n    bytes32 public constant ALLOWED_REWARD_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_REWARD_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as staking tokens.\\n    bytes32 public constant ALLOWED_STAKING_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_STAKING_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as external reward tokens from another protocols.\\n    bytes32 public constant ALLOWED_EXTERNAL_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_EXTERNAL_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as banned users.\\n    bytes32 public constant BANNED_ROLE = keccak256(\\\"BANNED_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as payment for pool deploy tokens.\\n    bytes32 public constant ALLOWED_PAYMENT_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_PAYMENT_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant LP_MINTER_BURNER_ROLE =\\n        keccak256(\\\"LP_MINTER_BURNER_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant POOL_REWARDS_PROVIDER =\\n        keccak256(\\\"POOL_REWARDS_PROVIDER\\\");\\n\\n    /// @notice A max of base points. (ex. Like 100 in percents)\\n    uint256 public constant BASE_POINTS_MAX = 10000;\\n\\n    /// @notice A given precision for math operations;\\n    uint256 public constant PRECISION = 1e10;\\n\\n    /// @notice A dead address for floor tokens to be minted\\n    address public constant DEAD_ADDRESS =\\n        0x000000000000000000000000000000000000dEaD;\\n}\\n\",\"keccak256\":\"0xe34fa79ce27c6c8ea345c75f491543c8748672a30e5cddd3ab28e31b6db47327\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x3060805260c06040525f60a0908152600a906200001d908262000146565b503480156200002a575f80fd5b506040518060400160405280600e81526020016d2337b93a3ab73730902a37b5b2b760911b8152506040518060400160405280600381526020016246544160e81b81525081600490816200007f919062000146565b5060056200008e828262000146565b50506006805460ff191690555060016007556200020e565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680620000cf57607f821691505b602082108103620000ee57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000141575f81815260208120601f850160051c810160208610156200011c5750805b601f850160051c820191505b818110156200013d5782815560010162000128565b5050505b505050565b81516001600160401b03811115620001625762000162620000a6565b6200017a81620001738454620000ba565b84620000f4565b602080601f831160018114620001b0575f8415620001985750858301515b5f19600386901b1c1916600185901b1785556200013d565b5f85815260208120601f198616915b82811015620001e057888601518255948401946001909101908401620001bf565b5085821015620001fe57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b608051611f7a6200022e5f395f81816105ec01526107ef0152611f7a5ff3fe60806040526004361061013f575f3560e01c80635c975abb116100b35780639dc29fac1161006d5780639dc29fac146103a4578063a3bf224b146103c3578063a457c2d7146103e2578063a9059cbb14610401578063dd62ed3e14610420578063f436f0931461043f575f80fd5b80635c975abb146102e657806370a08231146102fd57806377778db3146103315780637c27a3c61461035c5780638456cb591461037c57806395d89b4114610390575f80fd5b806323b872dd1161010457806323b872dd146102455780632f9d937f14610264578063313ce56714610283578063395093511461029e5780633f4ba83a146102bd57806340c10f19146102d3575f80fd5b806306fdde0314610174578063095ea7b31461019e5780630f1954fe146101cd57806316f0115b146101fa57806318160ddd14610231575f80fd5b366101705760405134907f347c40822e6eef789530725ec7aa62355b81752377bc28795820ab63d9bc2bf9905f90a2005b5f80fd5b34801561017f575f80fd5b5061018861045e565b6040516101959190611912565b60405180910390f35b3480156101a9575f80fd5b506101bd6101b836600461195b565b6104ed565b6040519015158152602001610195565b3480156101d8575f80fd5b506101ec6101e7366004611985565b610506565b604051908152602001610195565b348015610205575f80fd5b50600954610219906001600160a01b031681565b6040516001600160a01b039091168152602001610195565b34801561023c575f80fd5b506003546101ec565b348015610250575f80fd5b506101bd61025f3660046119a5565b61055a565b34801561026f575f80fd5b506101ec61027e366004611985565b61057d565b34801561028e575f80fd5b5060405160128152602001610195565b3480156102a9575f80fd5b506101bd6102b836600461195b565b6105a6565b3480156102c8575f80fd5b506102d16105c7565b005b6102d16102e136600461195b565b6105da565b3480156102f1575f80fd5b5060065460ff166101bd565b348015610308575f80fd5b506101ec6103173660046119e3565b6001600160a01b03165f9081526001602052604090205490565b34801561033c575f80fd5b506101ec61034b3660046119fe565b600c6020525f908152604090205481565b348015610367575f80fd5b506008546101bd90600160a01b900460ff1681565b348015610387575f80fd5b506102d1610767565b34801561039b575f80fd5b50610188610778565b3480156103af575f80fd5b506102d16103be36600461195b565b6107dd565b3480156103ce575f80fd5b506102196103dd3660046119fe565b610934565b3480156103ed575f80fd5b506101bd6103fc36600461195b565b61095c565b34801561040c575f80fd5b506101bd61041b36600461195b565b6109d6565b34801561042b575f80fd5b506101ec61043a366004611a15565b6109e3565b34801561044a575f80fd5b506102d1610459366004611a59565b610a0d565b600854606090600160a01b900460ff1661049e576040518060400160405280600e81526020016d08199bdc881c995dd85c991cc80f60921b8152506104c6565b6040518060400160405280600e81526020016d08199bdc881cdd185ada5b99c80f60921b8152505b600a6040516020016104d9929190611b70565b604051602081830303815290604052905090565b5f336104fa818585610ddc565b60019150505b92915050565b5f6402540be40061051660035490565b5f858152600c60205260409020546402540be400906105359086611bd1565b61053f9190611bd1565b6105499190611be8565b6105539190611be8565b9392505050565b5f33610567858285610eff565b610572858585610f9a565b506001949350505050565b5f828152600c60205260408120546402540be400908161059c60035490565b6105359086611bd1565b5f336104fa8185856105b883836109e3565b6105c29190611c07565b610ddc565b6105d05f611143565b6105d86111e9565b565b5f54610100900460ff168061061757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630145b15610635576040516321c4e35760e21b815260040160405180910390fd5b600854600160a01b900460ff1661066f5761066f7f8e7eec3a91568ea051efb6d35e7514ef01e4807481274e632bc3d6a704427c58611143565b5f5b600b54811015610758575f6106868284610506565b90505f6001600160a01b0316600b83815481106106a5576106a5611c1a565b5f918252602090912001546001600160a01b0316146106f8576106f3843083600b86815481106106d7576106d7611c1a565b5f918252602090912001546001600160a01b031692919061123b565b610721565b3481111561072157604051630336cc6d60e51b8152600481018290526024015b60405180910390fd5b5f828152600c60205260408120805483929061073e908490611c07565b90915550829150610750905081611c2e565b915050610671565b506107638282611295565b5050565b6107705f611143565b6105d8611354565b600854606090600160a01b900460ff166107ad5760405180604001604052806003815260200162333a3960e91b8152506107ca565b6040518060400160405280600381526020016266747360e81b8152505b600a6040516020016104d9929190611c46565b5f54610100900460ff168061081a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630145b15610838576040516321c4e35760e21b815260040160405180910390fd5b600854600160a01b900460ff16610872576108727f8e7eec3a91568ea051efb6d35e7514ef01e4807481274e632bc3d6a704427c58611143565b5f5b600b54811015610929575f6108898284610506565b90505f6001600160a01b0316600b83815481106108a8576108a8611c1a565b5f918252602090912001546001600160a01b0316146108df576108da308583600b86815481106106d7576106d7611c1a565b6108f2565b6108f26001600160a01b03851682611391565b5f828152600c60205260408120805483929061090f908490611c6c565b90915550829150610921905081611c2e565b915050610874565b5061076382826114ab565b600b8181548110610943575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f338161096982866109e3565b9050838110156109c95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610718565b6105728286868403610ddc565b5f336104fa818585610f9a565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f54610100900460ff1615808015610a2b57505f54600160ff909116105b80610a445750303b158015610a4457505f5460ff166001145b610aa75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610718565b5f805460ff191660011790558015610ac8575f805461ff0019166101001790555b600980546001600160a01b031916339081179091556040805163c45a015560e01b81529051610b6291839163c45a0155916004808201926020929091908290030181865afa158015610b1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b409190611c7f565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008805460ff60a01b1916600160a01b87151502179055610b8661dead6001611295565b5f5b610b928480611c9a565b90508160ff161015610d8f5760ff81165f908152600c602052604090206001905585610bcc57610bc7610140860135826115dd565b610bdb565b610bdb610120860135826115dd565b15610d7d57600b610bec8580611c9a565b8360ff16818110610bff57610bff611c1a565b9050602002016020810190610c1491906119e3565b81546001810183555f928352602083200180546001600160a01b0319166001600160a01b0392909216919091179055610c4d8580611c9a565b8360ff16818110610c6057610c60611c1a565b9050602002016020810190610c7591906119e3565b6001600160a01b031614610d4c57600a610c8f8580611c9a565b8360ff16818110610ca257610ca2611c1a565b9050602002016020810190610cb791906119e3565b6001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610cf1573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d189190810190611cfb565b604051602001610d29929190611d98565b604051602081830303815290604052600a9081610d469190611e15565b50610d7d565b600a604051602001610d5e9190611ed1565b604051602081830303815290604052600a9081610d7b9190611e15565b505b80610d8781611ef0565b915050610b88565b50508015610dd6575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b038316610e3e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610718565b6001600160a01b038216610e9f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610718565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f610f0a84846109e3565b6009549091506001600160a01b0390811690841603610f2757505f195b5f198114610dd65781811015610f8d5760405162461bcd60e51b815260206004820152602560248201527f466f7274756e6e61546f6b656e3a20696e73756666696369656e7420616c6c6f60448201526477616e636560d81b6064820152608401610718565b610dd68484848403610ddc565b6001600160a01b038316610ffe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610718565b6001600160a01b0382166110605760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610718565b6001600160a01b0383165f90815260016020526040902054818110156110d75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610718565b6001600160a01b038085165f8181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111369086815260200190565b60405180910390a3610dd6565b5f33600854604051632474521560e21b8152600481018590526001600160a01b0380841660248301529293509116906391d1485490604401602060405180830381865afa158015611196573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111ba9190611f0e565b6107635760405163a78e4aa560e01b8152600481018390526001600160a01b0382166024820152604401610718565b6111f1611604565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610dd690859061164d565b6001600160a01b0382166112eb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610718565b8060035f8282546112fc9190611c07565b90915550506001600160a01b0382165f818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b61135c611720565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861121e3390565b804710156113e15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610718565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461142a576040519150601f19603f3d011682016040523d82523d5f602084013e61142f565b606091505b50509050806114a65760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610718565b505050565b6001600160a01b03821661150b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610718565b6001600160a01b0382165f908152600160205260409020548181101561157e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610718565b6001600160a01b0383165f8181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b5f8060ff8316156115f457600160ff84161b6115f7565b60015b8481161491505092915050565b60065460ff166105d85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610718565b5f6116a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117669092919063ffffffff16565b905080515f14806116c15750808060200190518101906116c19190611f0e565b6114a65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610718565b60065460ff16156105d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610718565b606061177484845f8561177c565b949350505050565b6060824710156117dd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610718565b5f80866001600160a01b031685876040516117f89190611f29565b5f6040518083038185875af1925050503d805f8114611832576040519150601f19603f3d011682016040523d82523d5f602084013e611837565b606091505b509150915061184887838387611853565b979650505050505050565b606083156118c15782515f036118ba576001600160a01b0385163b6118ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610718565b5081611774565b61177483838151156118d65781518083602001fd5b8060405162461bcd60e51b81526004016107189190611912565b5f5b8381101561190a5781810151838201526020016118f2565b50505f910152565b602081525f82518060208401526119308160408501602087016118f0565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611958575f80fd5b50565b5f806040838503121561196c575f80fd5b823561197781611944565b946020939093013593505050565b5f8060408385031215611996575f80fd5b50508035926020909101359150565b5f805f606084860312156119b7575f80fd5b83356119c281611944565b925060208401356119d281611944565b929592945050506040919091013590565b5f602082840312156119f3575f80fd5b813561055381611944565b5f60208284031215611a0e575f80fd5b5035919050565b5f8060408385031215611a26575f80fd5b8235611a3181611944565b91506020830135611a4181611944565b809150509250929050565b8015158114611958575f80fd5b5f805f8385036101c0811215611a6d575f80fd5b8435611a7881611a4c565b9350610180601f1982011215611a8c575f80fd5b506020840191506101a084013567ffffffffffffffff811115611aad575f80fd5b840160608187031215611abe575f80fd5b809150509250925092565b600181811c90821680611add57607f821691505b602082108103611afb57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f8154611b0d81611ac9565b60018281168015611b255760018114611b3a57611b66565b60ff1984168752821515830287019450611b66565b855f526020805f205f5b85811015611b5d5781548a820152908401908201611b44565b50505082870194505b5050505092915050565b702337b93a3ab73730902628103a37b5b2b760791b81525f8351611b9b8160118501602088016118f0565b611baa60118285010185611b01565b601f60f91b815260010195945050505050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761050057610500611bbd565b5f82611c0257634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561050057610500611bbd565b634e487b7160e01b5f52603260045260245ffd5b5f60018201611c3f57611c3f611bbd565b5060010190565b5f8351611c578184602088016118f0565b611c6381840185611b01565b95945050505050565b8181038181111561050057610500611bbd565b5f60208284031215611c8f575f80fd5b815161055381611944565b5f808335601e19843603018112611caf575f80fd5b83018035915067ffffffffffffffff821115611cc9575f80fd5b6020019150600581901b3603821315611ce0575f80fd5b9250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215611d0b575f80fd5b815167ffffffffffffffff80821115611d22575f80fd5b818401915084601f830112611d35575f80fd5b815181811115611d4757611d47611ce7565b604051601f8201601f19908116603f01168101908382118183101715611d6f57611d6f611ce7565b81604052828152876020848701011115611d87575f80fd5b6118488360208301602088016118f0565b5f611da38285611b01565b8351611db38183602088016118f0565b600f60fb1b9101908152600101949350505050565b601f8211156114a6575f81815260208120601f850160051c81016020861015611dee5750805b601f850160051c820191505b81811015611e0d57828155600101611dfa565b505050505050565b815167ffffffffffffffff811115611e2f57611e2f611ce7565b611e4381611e3d8454611ac9565b84611dc8565b602080601f831160018114611e76575f8415611e5f5750858301515b5f19600386901b1c1916600185901b178555611e0d565b5f85815260208120601f198616915b82811015611ea457888601518255948401946001909101908401611e85565b5085821015611ec157878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f611edc8284611b01565b6308aa890f60e31b81526004019392505050565b5f60ff821660ff8103611f0557611f05611bbd565b60010192915050565b5f60208284031215611f1e575f80fd5b815161055381611a4c565b5f8251611f3a8184602087016118f0565b919091019291505056fea26469706673582212202f8ac3348f22400fefcb0c3403e6c6ed0a6a5e7b6ead303de6ec3abf9b6dd52064736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061013f575f3560e01c80635c975abb116100b35780639dc29fac1161006d5780639dc29fac146103a4578063a3bf224b146103c3578063a457c2d7146103e2578063a9059cbb14610401578063dd62ed3e14610420578063f436f0931461043f575f80fd5b80635c975abb146102e657806370a08231146102fd57806377778db3146103315780637c27a3c61461035c5780638456cb591461037c57806395d89b4114610390575f80fd5b806323b872dd1161010457806323b872dd146102455780632f9d937f14610264578063313ce56714610283578063395093511461029e5780633f4ba83a146102bd57806340c10f19146102d3575f80fd5b806306fdde0314610174578063095ea7b31461019e5780630f1954fe146101cd57806316f0115b146101fa57806318160ddd14610231575f80fd5b366101705760405134907f347c40822e6eef789530725ec7aa62355b81752377bc28795820ab63d9bc2bf9905f90a2005b5f80fd5b34801561017f575f80fd5b5061018861045e565b6040516101959190611912565b60405180910390f35b3480156101a9575f80fd5b506101bd6101b836600461195b565b6104ed565b6040519015158152602001610195565b3480156101d8575f80fd5b506101ec6101e7366004611985565b610506565b604051908152602001610195565b348015610205575f80fd5b50600954610219906001600160a01b031681565b6040516001600160a01b039091168152602001610195565b34801561023c575f80fd5b506003546101ec565b348015610250575f80fd5b506101bd61025f3660046119a5565b61055a565b34801561026f575f80fd5b506101ec61027e366004611985565b61057d565b34801561028e575f80fd5b5060405160128152602001610195565b3480156102a9575f80fd5b506101bd6102b836600461195b565b6105a6565b3480156102c8575f80fd5b506102d16105c7565b005b6102d16102e136600461195b565b6105da565b3480156102f1575f80fd5b5060065460ff166101bd565b348015610308575f80fd5b506101ec6103173660046119e3565b6001600160a01b03165f9081526001602052604090205490565b34801561033c575f80fd5b506101ec61034b3660046119fe565b600c6020525f908152604090205481565b348015610367575f80fd5b506008546101bd90600160a01b900460ff1681565b348015610387575f80fd5b506102d1610767565b34801561039b575f80fd5b50610188610778565b3480156103af575f80fd5b506102d16103be36600461195b565b6107dd565b3480156103ce575f80fd5b506102196103dd3660046119fe565b610934565b3480156103ed575f80fd5b506101bd6103fc36600461195b565b61095c565b34801561040c575f80fd5b506101bd61041b36600461195b565b6109d6565b34801561042b575f80fd5b506101ec61043a366004611a15565b6109e3565b34801561044a575f80fd5b506102d1610459366004611a59565b610a0d565b600854606090600160a01b900460ff1661049e576040518060400160405280600e81526020016d08199bdc881c995dd85c991cc80f60921b8152506104c6565b6040518060400160405280600e81526020016d08199bdc881cdd185ada5b99c80f60921b8152505b600a6040516020016104d9929190611b70565b604051602081830303815290604052905090565b5f336104fa818585610ddc565b60019150505b92915050565b5f6402540be40061051660035490565b5f858152600c60205260409020546402540be400906105359086611bd1565b61053f9190611bd1565b6105499190611be8565b6105539190611be8565b9392505050565b5f33610567858285610eff565b610572858585610f9a565b506001949350505050565b5f828152600c60205260408120546402540be400908161059c60035490565b6105359086611bd1565b5f336104fa8185856105b883836109e3565b6105c29190611c07565b610ddc565b6105d05f611143565b6105d86111e9565b565b5f54610100900460ff168061061757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630145b15610635576040516321c4e35760e21b815260040160405180910390fd5b600854600160a01b900460ff1661066f5761066f7f8e7eec3a91568ea051efb6d35e7514ef01e4807481274e632bc3d6a704427c58611143565b5f5b600b54811015610758575f6106868284610506565b90505f6001600160a01b0316600b83815481106106a5576106a5611c1a565b5f918252602090912001546001600160a01b0316146106f8576106f3843083600b86815481106106d7576106d7611c1a565b5f918252602090912001546001600160a01b031692919061123b565b610721565b3481111561072157604051630336cc6d60e51b8152600481018290526024015b60405180910390fd5b5f828152600c60205260408120805483929061073e908490611c07565b90915550829150610750905081611c2e565b915050610671565b506107638282611295565b5050565b6107705f611143565b6105d8611354565b600854606090600160a01b900460ff166107ad5760405180604001604052806003815260200162333a3960e91b8152506107ca565b6040518060400160405280600381526020016266747360e81b8152505b600a6040516020016104d9929190611c46565b5f54610100900460ff168061081a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630145b15610838576040516321c4e35760e21b815260040160405180910390fd5b600854600160a01b900460ff16610872576108727f8e7eec3a91568ea051efb6d35e7514ef01e4807481274e632bc3d6a704427c58611143565b5f5b600b54811015610929575f6108898284610506565b90505f6001600160a01b0316600b83815481106108a8576108a8611c1a565b5f918252602090912001546001600160a01b0316146108df576108da308583600b86815481106106d7576106d7611c1a565b6108f2565b6108f26001600160a01b03851682611391565b5f828152600c60205260408120805483929061090f908490611c6c565b90915550829150610921905081611c2e565b915050610874565b5061076382826114ab565b600b8181548110610943575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f338161096982866109e3565b9050838110156109c95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610718565b6105728286868403610ddc565b5f336104fa818585610f9a565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205490565b5f54610100900460ff1615808015610a2b57505f54600160ff909116105b80610a445750303b158015610a4457505f5460ff166001145b610aa75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610718565b5f805460ff191660011790558015610ac8575f805461ff0019166101001790555b600980546001600160a01b031916339081179091556040805163c45a015560e01b81529051610b6291839163c45a0155916004808201926020929091908290030181865afa158015610b1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b409190611c7f565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008805460ff60a01b1916600160a01b87151502179055610b8661dead6001611295565b5f5b610b928480611c9a565b90508160ff161015610d8f5760ff81165f908152600c602052604090206001905585610bcc57610bc7610140860135826115dd565b610bdb565b610bdb610120860135826115dd565b15610d7d57600b610bec8580611c9a565b8360ff16818110610bff57610bff611c1a565b9050602002016020810190610c1491906119e3565b81546001810183555f928352602083200180546001600160a01b0319166001600160a01b0392909216919091179055610c4d8580611c9a565b8360ff16818110610c6057610c60611c1a565b9050602002016020810190610c7591906119e3565b6001600160a01b031614610d4c57600a610c8f8580611c9a565b8360ff16818110610ca257610ca2611c1a565b9050602002016020810190610cb791906119e3565b6001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610cf1573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d189190810190611cfb565b604051602001610d29929190611d98565b604051602081830303815290604052600a9081610d469190611e15565b50610d7d565b600a604051602001610d5e9190611ed1565b604051602081830303815290604052600a9081610d7b9190611e15565b505b80610d8781611ef0565b915050610b88565b50508015610dd6575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b038316610e3e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610718565b6001600160a01b038216610e9f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610718565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f610f0a84846109e3565b6009549091506001600160a01b0390811690841603610f2757505f195b5f198114610dd65781811015610f8d5760405162461bcd60e51b815260206004820152602560248201527f466f7274756e6e61546f6b656e3a20696e73756666696369656e7420616c6c6f60448201526477616e636560d81b6064820152608401610718565b610dd68484848403610ddc565b6001600160a01b038316610ffe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610718565b6001600160a01b0382166110605760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610718565b6001600160a01b0383165f90815260016020526040902054818110156110d75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610718565b6001600160a01b038085165f8181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111369086815260200190565b60405180910390a3610dd6565b5f33600854604051632474521560e21b8152600481018590526001600160a01b0380841660248301529293509116906391d1485490604401602060405180830381865afa158015611196573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111ba9190611f0e565b6107635760405163a78e4aa560e01b8152600481018390526001600160a01b0382166024820152604401610718565b6111f1611604565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610dd690859061164d565b6001600160a01b0382166112eb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610718565b8060035f8282546112fc9190611c07565b90915550506001600160a01b0382165f818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b61135c611720565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861121e3390565b804710156113e15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610718565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461142a576040519150601f19603f3d011682016040523d82523d5f602084013e61142f565b606091505b50509050806114a65760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610718565b505050565b6001600160a01b03821661150b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610718565b6001600160a01b0382165f908152600160205260409020548181101561157e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610718565b6001600160a01b0383165f8181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b5f8060ff8316156115f457600160ff84161b6115f7565b60015b8481161491505092915050565b60065460ff166105d85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610718565b5f6116a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117669092919063ffffffff16565b905080515f14806116c15750808060200190518101906116c19190611f0e565b6114a65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610718565b60065460ff16156105d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610718565b606061177484845f8561177c565b949350505050565b6060824710156117dd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610718565b5f80866001600160a01b031685876040516117f89190611f29565b5f6040518083038185875af1925050503d805f8114611832576040519150601f19603f3d011682016040523d82523d5f602084013e611837565b606091505b509150915061184887838387611853565b979650505050505050565b606083156118c15782515f036118ba576001600160a01b0385163b6118ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610718565b5081611774565b61177483838151156118d65781518083602001fd5b8060405162461bcd60e51b81526004016107189190611912565b5f5b8381101561190a5781810151838201526020016118f2565b50505f910152565b602081525f82518060208401526119308160408501602087016118f0565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611958575f80fd5b50565b5f806040838503121561196c575f80fd5b823561197781611944565b946020939093013593505050565b5f8060408385031215611996575f80fd5b50508035926020909101359150565b5f805f606084860312156119b7575f80fd5b83356119c281611944565b925060208401356119d281611944565b929592945050506040919091013590565b5f602082840312156119f3575f80fd5b813561055381611944565b5f60208284031215611a0e575f80fd5b5035919050565b5f8060408385031215611a26575f80fd5b8235611a3181611944565b91506020830135611a4181611944565b809150509250929050565b8015158114611958575f80fd5b5f805f8385036101c0811215611a6d575f80fd5b8435611a7881611a4c565b9350610180601f1982011215611a8c575f80fd5b506020840191506101a084013567ffffffffffffffff811115611aad575f80fd5b840160608187031215611abe575f80fd5b809150509250925092565b600181811c90821680611add57607f821691505b602082108103611afb57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f8154611b0d81611ac9565b60018281168015611b255760018114611b3a57611b66565b60ff1984168752821515830287019450611b66565b855f526020805f205f5b85811015611b5d5781548a820152908401908201611b44565b50505082870194505b5050505092915050565b702337b93a3ab73730902628103a37b5b2b760791b81525f8351611b9b8160118501602088016118f0565b611baa60118285010185611b01565b601f60f91b815260010195945050505050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761050057610500611bbd565b5f82611c0257634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561050057610500611bbd565b634e487b7160e01b5f52603260045260245ffd5b5f60018201611c3f57611c3f611bbd565b5060010190565b5f8351611c578184602088016118f0565b611c6381840185611b01565b95945050505050565b8181038181111561050057610500611bbd565b5f60208284031215611c8f575f80fd5b815161055381611944565b5f808335601e19843603018112611caf575f80fd5b83018035915067ffffffffffffffff821115611cc9575f80fd5b6020019150600581901b3603821315611ce0575f80fd5b9250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215611d0b575f80fd5b815167ffffffffffffffff80821115611d22575f80fd5b818401915084601f830112611d35575f80fd5b815181811115611d4757611d47611ce7565b604051601f8201601f19908116603f01168101908382118183101715611d6f57611d6f611ce7565b81604052828152876020848701011115611d87575f80fd5b6118488360208301602088016118f0565b5f611da38285611b01565b8351611db38183602088016118f0565b600f60fb1b9101908152600101949350505050565b601f8211156114a6575f81815260208120601f850160051c81016020861015611dee5750805b601f850160051c820191505b81811015611e0d57828155600101611dfa565b505050505050565b815167ffffffffffffffff811115611e2f57611e2f611ce7565b611e4381611e3d8454611ac9565b84611dc8565b602080601f831160018114611e76575f8415611e5f5750858301515b5f19600386901b1c1916600185901b178555611e0d565b5f85815260208120601f198616915b82811015611ea457888601518255948401946001909101908401611e85565b5085821015611ec157878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f611edc8284611b01565b6308aa890f60e31b81526004019392505050565b5f60ff821660ff8103611f0557611f05611bbd565b60010192915050565b5f60208284031215611f1e575f80fd5b815161055381611a4c565b5f8251611f3a8184602087016118f0565b919091019291505056fea26469706673582212202f8ac3348f22400fefcb0c3403e6c6ed0a6a5e7b6ead303de6ec3abf9b6dd52064736f6c63430008140033",
  "libraries": {
    "FortunnaLib": "0x2475181E30FcFFA7A636eDc469BE56d9080F4A8c",
    "FortunnaErrorsLib": "0xC96e03cdB3CF495f1Bc063A1D161507Db5791542",
    "FortunnaBitMaskLib": "0x31F92547ABA932e60bC424116f2BB33a8e3EE429"
  },
  "devdoc": {
    "errors": {
      "NotAuthorized(bytes32,address)": [
        {
          "details": "An error to be reverted if an `entity` does not possess the `role`.",
          "params": {
            "entity": "An entity violating authorization.",
            "role": "A role an entity doesn't posess."
          }
        }
      ],
      "NotEnoughtPayment(uint256)": [
        {
          "details": "An error to be reverted if the pool deployer didn't payed enough for it.",
          "params": {
            "amount": "An actual amount the deployer sent."
          }
        }
      ],
      "NotInitialized()": [
        {
          "details": "An error to be reverted if the contract was being called before the initialization."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NativeTokenReceived(uint256)": {
        "params": {
          "amount": "An exact amount of the tokens arrived."
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Could be called only by the admin."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "unpause()": {
        "details": "Could be called only by the admin."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NativeTokenReceived(uint256)": {
        "notice": "An event to be fired when native tokens arrive to the fabric."
      }
    },
    "kind": "user",
    "methods": {
      "pause()": {
        "notice": "Triggers paused state."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 588,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 591,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 939,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 945,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 947,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 949,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 951,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 768,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 869,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4447,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "_factory",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6452,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "isStakingOrRewardToken",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 6454,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "pool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6460,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "underlyingTokensSymbols",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6463,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "underlyingTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6467,
        "contract": "contracts/FortunnaToken.sol:FortunnaToken",
        "label": "getReserve",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}