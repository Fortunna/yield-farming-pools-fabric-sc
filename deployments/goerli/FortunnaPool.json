{
  "address": "0x9D0aE0DF7372B5eeD94e0d32ca0BAf41001f7E41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeDifference",
          "type": "uint256"
        }
      ],
      "name": "DistributionEnded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeDifference",
          "type": "uint256"
        }
      ],
      "name": "DistributionNotStarted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "scalar",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "InvalidScalar",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughRewardToDistribute",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughStaked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "TooMuchStaked",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partOfTotalRewards",
          "type": "uint256"
        }
      ],
      "name": "PartDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accRewardTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addExpectedRewardTokensBalanceToDistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2][]",
          "name": "initialDepositAmounts",
          "type": "uint256[2][]"
        },
        {
          "internalType": "address",
          "name": "fortunnaTokenAddress",
          "type": "address"
        }
      ],
      "name": "calculateFortunnaTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionCycleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expectedRewardTokensBalanceToDistribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FortunnaPool.Fee",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "getAccumulatedFeesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protoPoolIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLockUpRewardsPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earlyWithdrawalFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositWithdrawFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardBasePointsPerDistribution",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "stakingTokensMask",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "rewardTokensMask",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "nonfungiblePositionManager",
                  "type": "address"
                }
              ],
              "internalType": "struct FortunnaLib.CustomPoolParameters",
              "name": "custom",
              "type": "tuple"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParameters",
          "name": "poolParameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "utilizingTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialRewardAmounts",
              "type": "uint256[2][]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialDepositAmounts",
              "type": "uint256[2][]"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParametersArrays",
          "name": "poolParametersArrays",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providePartOfTotalRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providedRewardTokensBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestedRewardTokensToDistribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IFortunnaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokensPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scalarParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protoPoolIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLockUpRewardsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earlyWithdrawalFeeBasePoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositWithdrawFeeBasePoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardBasePointsPerDistribution",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "stakingTokensMask",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "rewardTokensMask",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "nonfungiblePositionManager",
              "type": "address"
            }
          ],
          "internalType": "struct FortunnaLib.CustomPoolParameters",
          "name": "custom",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IFortunnaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTokensBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawAllFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "enum FortunnaPool.Fee",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7983613d696a2b00fa2acfbe928d6b431076c20fee18b4dba72605a29c25ff04",
  "receipt": {
    "to": null,
    "from": "0x57eb63d0aab5822EFCd7A9B56775F772D3e03CfD",
    "contractAddress": "0x9D0aE0DF7372B5eeD94e0d32ca0BAf41001f7E41",
    "transactionIndex": 45,
    "gasUsed": "2100775",
    "logsBloom": "0x
    "blockHash": "0xcd719b0f2065d32fe6f0dc8d1b9d38fbcd0a8d8bd12a2effa85b1a659d3f7550",
    "transactionHash": "0x7983613d696a2b00fa2acfbe928d6b431076c20fee18b4dba72605a29c25ff04",
    "logs": [],
    "blockNumber": 9334369,
    "cumulativeGasUsed": "9424163",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c606527edc352ff35406216236e37da4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"}],\"name\":\"DistributionEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"}],\"name\":\"DistributionNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"InvalidScalar\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"NotEnoughRewardToDistribute\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"NotEnoughStaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"TooMuchStaked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partOfTotalRewards\",\"type\":\"uint256\"}],\"name\":\"PartDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addExpectedRewardTokensBalanceToDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"initialDepositAmounts\",\"type\":\"uint256[2][]\"},{\"internalType\":\"address\",\"name\":\"fortunnaTokenAddress\",\"type\":\"address\"}],\"name\":\"calculateFortunnaTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionCycleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedRewardTokensBalanceToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FortunnaPool.Fee\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"getAccumulatedFeesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protoPoolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockUpRewardsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWithdrawFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBasePointsPerDistribution\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stakingTokensMask\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rewardTokensMask\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"}],\"internalType\":\"struct FortunnaLib.CustomPoolParameters\",\"name\":\"custom\",\"type\":\"tuple\"}],\"internalType\":\"struct FortunnaLib.PoolParameters\",\"name\":\"poolParameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"utilizingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialRewardAmounts\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialDepositAmounts\",\"type\":\"uint256[2][]\"}],\"internalType\":\"struct FortunnaLib.PoolParametersArrays\",\"name\":\"poolParametersArrays\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providePartOfTotalRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providedRewardTokensBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestedRewardTokensToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IFortunnaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scalarParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protoPoolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockUpRewardsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWithdrawFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBasePointsPerDistribution\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stakingTokensMask\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rewardTokensMask\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"}],\"internalType\":\"struct FortunnaLib.CustomPoolParameters\",\"name\":\"custom\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IFortunnaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokensBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"enum FortunnaPool.Fee\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidScalar(uint256,string)\":[{\"details\":\"An error to be reverted if some scalar property of the data structure was addressed wrongly.\",\"params\":{\"comment\":\"Some comment as to what kind of a data structure property this is.\",\"scalar\":\"A scalar.\"}}],\"NotAuthorized(bytes32,address)\":[{\"details\":\"An error to be reverted if an `entity` does not possess the `role`.\",\"params\":{\"entity\":\"An entity violating authorization.\",\"role\":\"A role an entity doesn't posess.\"}}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"pause()\":{\"details\":\"Could be called only by the admin.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"unpause()\":{\"details\":\"Could be called only by the admin.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Triggers paused state.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FortunnaPool.sol\":\"FortunnaPool\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-new/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FactoryAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/security/Pausable.sol\\\";\\n\\nimport \\\"./libraries/FortunnaLib.sol\\\";\\nimport \\\"./libraries/FortunnaErrorsLib.sol\\\";\\n\\nabstract contract FactoryAuthorized is\\n    Initializable,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    address internal immutable __self = address(this);\\n    address internal _factory;\\n\\n    modifier delegatedOnly() {\\n        if (_isInitializing() || __self == address(this)) {\\n            revert FortunnaErrorsLib.NotInitialized();\\n        }\\n        _;\\n    }\\n\\n    function _onlyRoleInFactory(bytes32 role) internal view {\\n        address sender = _msgSender();\\n        if (!IAccessControl(_factory).hasRole(role, sender)) {\\n            revert FortunnaErrorsLib.NotAuthorized(role, sender);\\n        }\\n    }\\n\\n    modifier onlyAdmin() {\\n        // 0x00 == DEFAULT_ADMIN_ROLE\\n        _onlyRoleInFactory(0x00);\\n        _;\\n    }\\n\\n    modifier only(bytes32 role) {\\n        _onlyRoleInFactory(role);\\n        _;\\n    }\\n\\n    function _initialize(address __factory) internal {\\n        _factory = __factory;\\n    }\\n\\n    /// @notice Triggers paused state.\\n    /// @dev Could be called only by the admin.\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    /// @notice Returns to normal state.\\n    /// @dev Could be called only by the admin.\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x4ae3cccb63e8c31d2b0668e5984a7abf9c5fbdcec1f289c1e749cc7652b47639\",\"license\":\"MIT\"},\"contracts/FortunnaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IFortunnaFactory.sol\\\";\\nimport \\\"./interfaces/IFortunnaPool.sol\\\";\\nimport \\\"./interfaces/IFortunnaToken.sol\\\";\\nimport \\\"./FactoryAuthorized.sol\\\";\\n\\ncontract FortunnaPool is IFortunnaPool, FactoryAuthorized {\\n    using Clones for address;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IFortunnaToken;\\n    using FortunnaLib for bytes32;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    enum Fee {\\n        GET_REWARD,\\n        STAKE,\\n        WITHDRAW\\n    }\\n\\n    FortunnaLib.PoolParameters public scalarParams;\\n\\n    IFortunnaToken public stakingToken;\\n    IFortunnaToken public rewardToken;\\n\\n    uint256 public lastRewardTimestamp;\\n    uint256 public accRewardTokenPerShare;\\n    uint256 public distributionCycleDuration;\\n\\n    uint256 public rewardTokensPerSec;\\n\\n    uint256 public totalStakedTokensBalance;\\n\\n    uint256 public expectedRewardTokensBalanceToDistribute;\\n    uint256 public requestedRewardTokensToDistribute;\\n    uint256 public providedRewardTokensBalance;\\n\\n    mapping(address => UserInfo) public usersInfo;\\n\\n    uint256[] internal _accumulatedFees;\\n    FortunnaLib.PoolParametersArrays internal vectorParams;\\n\\n    function initialize(\\n        address poolOwner,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external override initializer {\\n        address sender = _msgSender();\\n        IFortunnaFactory __factory = IFortunnaFactory(sender);\\n        scalarParams = poolParameters;\\n        vectorParams = poolParametersArrays;\\n        super._initialize(address(__factory));\\n\\n        uint256 poolIdx = __factory.getPoolsLength() - 1;\\n        address fortunnaTokenPrototype = __factory.getPrototypeAt(\\n            __factory.FORTUNNA_TOKEN_PROTO_INDEX()\\n        );\\n        bytes32 stakingTokenDeploySalt = keccak256(abi.encodePacked(poolIdx, true));\\n        bytes32 rewardTokenDeploySalt = keccak256(abi.encodePacked(poolIdx, false));\\n\\n        stakingToken = IFortunnaToken(\\n            fortunnaTokenPrototype.cloneDeterministic(stakingTokenDeploySalt)\\n        );\\n        rewardToken = IFortunnaToken(\\n            fortunnaTokenPrototype.cloneDeterministic(rewardTokenDeploySalt)\\n        );\\n        stakingToken.initialize(true, poolParameters, poolParametersArrays);\\n        rewardToken.initialize(false, poolParameters, poolParametersArrays);\\n\\n        uint256 amountToMint = calculateFortunnaTokens(\\n            poolParametersArrays.initialDepositAmounts,\\n            address(stakingToken)\\n        );\\n        if (amountToMint > 0) {\\n            stakingToken.mint(poolOwner, amountToMint);\\n            amountToMint = 0;\\n        }\\n\\n        amountToMint = calculateFortunnaTokens(\\n            poolParametersArrays.initialRewardAmounts,\\n            address(rewardToken)\\n        );\\n        if (amountToMint > 0) {\\n            rewardToken.mint(poolOwner, amountToMint);\\n        }\\n    }\\n\\n    function calculateFortunnaTokens(\\n        uint256[2][] memory initialDepositAmounts,\\n        address fortunnaTokenAddress\\n    ) public view returns (uint256 amountToMint) {\\n        for (uint256 i = 0; i < initialDepositAmounts.length; i++) {\\n            uint256[2] memory pair = initialDepositAmounts[i];\\n            if (pair[1] == 0) continue;\\n            amountToMint += IFortunnaToken(fortunnaTokenAddress)\\n                .calcFortunnaTokensInOrOutPerUnderlyingToken(i, pair[1]);\\n        }\\n    }\\n\\n    function pendingRewards(address user) external view returns (uint256) {\\n        UserInfo storage userInfo = usersInfo[user];\\n        uint256 _accRewardTokenPerShare = accRewardTokenPerShare;\\n        uint256 _stakingTokenBalance = totalStakedTokensBalance;\\n        if (block.timestamp > lastRewardTimestamp && _stakingTokenBalance > 0) {\\n            uint256 reward = (block.timestamp - lastRewardTimestamp) *\\n                rewardTokensPerSec;\\n            _accRewardTokenPerShare +=\\n                (reward * FortunnaLib.PRECISION) /\\n                _stakingTokenBalance;\\n        }\\n        return\\n            (userInfo.amount * _accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION -\\n            userInfo.rewardDebt;\\n    }\\n\\n    function _provideRewardTokens(uint256 amount) internal {\\n        requestedRewardTokensToDistribute += amount;\\n        if (requestedRewardTokensToDistribute > providedRewardTokensBalance) {\\n            revert FortunnaErrorsLib.NotEnoughRewardToDistribute(\\n                providedRewardTokensBalance,\\n                requestedRewardTokensToDistribute\\n            );\\n        }\\n    }\\n\\n    function updatePool() public {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n        if (totalStakedTokensBalance == 0) {\\n            lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 reward = (block.timestamp - lastRewardTimestamp) *\\n            rewardTokensPerSec;\\n        _provideRewardTokens(reward);\\n        accRewardTokenPerShare +=\\n            (rewardTokensPerSec * FortunnaLib.PRECISION) /\\n            totalStakedTokensBalance;\\n        lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    function _checkTimeIntervals() internal view {\\n        if (block.timestamp < scalarParams.startTimestamp) {\\n            revert FortunnaErrorsLib.DistributionNotStarted(\\n                scalarParams.startTimestamp - block.timestamp\\n            );\\n        }\\n        if (block.timestamp > scalarParams.endTimestamp) {\\n            revert FortunnaErrorsLib.DistributionEnded(\\n                block.timestamp - scalarParams.endTimestamp\\n            );\\n        }\\n    }\\n\\n    function stake(uint256 amount) external nonReentrant {\\n        if (amount > scalarParams.maxStakeAmount) {\\n            revert FortunnaErrorsLib.TooMuchStaked(\\n                amount,\\n                scalarParams.maxStakeAmount\\n            );\\n        }\\n        if (amount < scalarParams.minStakeAmount) {\\n            revert FortunnaErrorsLib.NotEnoughStaked(\\n                amount,\\n                scalarParams.minStakeAmount\\n            );\\n        }\\n        _checkTimeIntervals();\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        _getReward();\\n        stakingToken.safeTransferFrom(sender, address(this), amount);\\n        if (scalarParams.depositWithdrawFeeBasePoints > 0) {\\n            uint256 fee = (amount * scalarParams.depositWithdrawFeeBasePoints) /\\n                FortunnaLib.BASE_POINTS_MAX;\\n            _accumulatedFees[uint256(Fee.STAKE)] += fee;\\n            amount -= fee;\\n        }\\n        totalStakedTokensBalance += amount;\\n        userInfo.amount += amount;\\n        userInfo.rewardDebt =\\n            (userInfo.amount * accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION;\\n        emit Staked(sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external nonReentrant {\\n        _checkTimeIntervals();\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        if (userInfo.amount < amount) {\\n            revert FortunnaErrorsLib.InvalidScalar(\\n                amount,\\n                \\\"cannotWithdrawThisMuch\\\"\\n            );\\n        }\\n        _getReward();\\n        userInfo.amount -= amount;\\n        userInfo.rewardDebt =\\n            (userInfo.amount * accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION;\\n        totalStakedTokensBalance -= amount;\\n        if (scalarParams.depositWithdrawFeeBasePoints > 0) {\\n            uint256 fee = (amount * scalarParams.depositWithdrawFeeBasePoints) /\\n                FortunnaLib.BASE_POINTS_MAX;\\n            _accumulatedFees[uint256(Fee.WITHDRAW)] += fee;\\n            amount -= fee;\\n        }\\n        stakingToken.safeTransfer(sender, amount);\\n        emit Withdrawn(sender, amount);\\n    }\\n\\n    function _getReward() internal {\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        updatePool();\\n        uint256 pending = (userInfo.amount * accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION -\\n            userInfo.rewardDebt;\\n        uint256 startTimestamp = scalarParams.startTimestamp;\\n\\n        uint256 fee = 0;\\n        if (\\n            pending > 0 &&\\n            block.timestamp > startTimestamp &&\\n            block.timestamp <\\n            startTimestamp + scalarParams.minLockUpRewardsPeriod &&\\n            scalarParams.earlyWithdrawalFeeBasePoints > 0\\n        ) {\\n            fee =\\n                (pending * scalarParams.earlyWithdrawalFeeBasePoints) /\\n                FortunnaLib.BASE_POINTS_MAX;\\n            _accumulatedFees[uint256(Fee.GET_REWARD)] += fee;\\n            pending -= fee;\\n        }\\n\\n        _safeRewardTransfer(sender, pending);\\n        emit RewardPaid(sender, pending);\\n        uint256 pendingAndFee = pending + fee;\\n        requestedRewardTokensToDistribute -= pendingAndFee;\\n        providedRewardTokensBalance -= pendingAndFee;\\n        _recalcTokensPerSec();\\n    }\\n\\n    function getReward() external nonReentrant {\\n        _checkTimeIntervals();\\n        _getReward();\\n    }\\n\\n    function emergencyWithdraw() external {\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        stakingToken.safeTransfer(sender, userInfo.amount);\\n        emit EmergencyWithdraw(sender, userInfo.amount);\\n        totalStakedTokensBalance -= userInfo.amount;\\n        userInfo.amount = 0;\\n        userInfo.rewardDebt = 0;\\n    }\\n\\n    function factory() external view override returns (address) {\\n        return _factory;\\n    }\\n\\n    function getAccumulatedFeesAmount(Fee fee) external view returns (uint256) {\\n        return _accumulatedFees[uint256(fee)];\\n    }\\n\\n    function withdrawFee(address receiver, Fee fee) public onlyAdmin {\\n        if (fee == Fee.GET_REWARD) {\\n            _safeRewardTransfer(receiver, _accumulatedFees[uint256(fee)]);\\n        }\\n        if (fee == Fee.STAKE || fee == Fee.WITHDRAW) {\\n            stakingToken.safeTransfer(receiver, _accumulatedFees[uint256(fee)]);\\n        }\\n    }\\n\\n    function withdrawAllFees(address receiver) external onlyAdmin {\\n        for (uint256 i = 0; i < _accumulatedFees.length; i++) {\\n            withdrawFee(receiver, Fee(i));\\n        }\\n    }\\n\\n    function addExpectedRewardTokensBalanceToDistribute() \\n        external \\n        only(FortunnaLib.POOL_REWARDS_PROVIDER)\\n    {\\n        uint256 amount = rewardToken.balanceOf(_msgSender()); \\n        expectedRewardTokensBalanceToDistribute += amount;\\n        emit RewardAdded(amount);\\n    }\\n\\n    function providePartOfTotalRewards()\\n        external\\n        only(FortunnaLib.POOL_REWARDS_PROVIDER)\\n    {\\n        uint256 amount = (expectedRewardTokensBalanceToDistribute *\\n            scalarParams.totalRewardBasePointsPerDistribution) /\\n            FortunnaLib.BASE_POINTS_MAX;\\n        rewardToken.safeTransferFrom(_msgSender(), address(this), amount);\\n        providedRewardTokensBalance += amount;\\n        _recalcTokensPerSec();\\n        emit PartDistributed(amount);\\n    }\\n\\n    function _recalcTokensPerSec() internal {\\n        rewardTokensPerSec = providedRewardTokensBalance / (scalarParams.endTimestamp - scalarParams.startTimestamp);\\n    }\\n\\n    function _safeRewardTransfer(address to, uint256 amount) internal {\\n        if (amount == 0) return;\\n        if (amount > requestedRewardTokensToDistribute) {\\n            IERC20(rewardToken).safeTransfer(\\n                to,\\n                requestedRewardTokensToDistribute\\n            );\\n        } else {\\n            IERC20(rewardToken).safeTransfer(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcfecd5da4b2231a0d4cf0ded0e86a7e926c006d773b4eebe06da8d037b392cba\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"../libraries/FortunnaErrorsLib.sol\\\";\\nimport \\\"../libraries/FortunnaBitMaskLib.sol\\\";\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\nimport \\\"./INativeTokenReceivable.sol\\\";\\n\\n/// @title The interface for the Fortunna Yield Farming pools factory.\\n/// @author Fortunna Team\\n/// @notice The Fortunna Yield Faming pools factory facilitates creation of Fortunna pools and control over the protocol fees.\\ninterface IFortunnaFactory is INativeTokenReceivable {\\n    event PoolCreated(address indexed pool);\\n\\n    /// @notice A getter function to acquire the payment info for one pool deploy.\\n    /// @return token An address of the token to be held as payment asset.\\n    /// @return cost An actual cost of the pool deploy.\\n    function paymentInfo() external view returns (address token, uint256 cost);\\n\\n    /// @notice An admin setter function to adjust payment info.\\n    /// @param _paymentInfo A struct to hold new payment info.\\n    function setPaymentInfo(\\n        FortunnaLib.PaymentInfo calldata _paymentInfo\\n    ) external;\\n\\n    /// @notice An admin function to create to add deployed prototype.\\n    /// @param prototype An address of the deployed prototype.\\n    function addPrototype(address prototype) external;\\n\\n    /// @notice A public helper function to make mask generation quicker.\\n    /// @param flags An array of booleans to be converted to a mask.\\n    function generateMask(\\n        bool[] calldata flags\\n    ) external pure returns (bytes32);\\n\\n    /// @notice An admin function to send all collected payments in any tokens to the specific receiver.\\n    /// @param token A token to be send to.\\n    /// @param who A receiver of the tokens.\\n    /// @param amount An exact amount of the tokens to be sent.\\n    function sendCollectedTokens(\\n        address token,\\n        address payable who,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice The main public function. It is deploying the pool according to the pool parameters and it's prototype.\\n    /// @param poolParameters A scalar parameters for the pool.\\n    /// @param poolParametersArrays A vector parameters for the pool.\\n    function createPool(\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external payable returns (address poolAddress);\\n\\n    /// @notice A public getter function to acquire a pool address at the specific index.\\n    /// @param index An index in the pools enumerable set.\\n    function getPoolAt(uint256 index) external view returns (address);\\n\\n    /// @notice A public getter function to acquire the total amount of deployed pools.\\n    function getPoolsLength() external view returns (uint256);\\n\\n    /// @notice A public getter function to acquire a prototype address at the specific index.\\n    /// @param index An index in the pools enumerable set.\\n    function getPrototypeAt(uint256 index) external view returns (address);\\n\\n    /// @notice A public getter function to acquire the total amount of deployed prototypes.\\n    function getPrototypesLength() external view returns (uint256);\\n\\n    function predictPoolAddress(\\n        uint256 poolProtoIdx\\n    ) external view returns (address result, bytes32 salt);\\n\\n    function predictFortunnaTokenAddress(\\n        uint256 poolProtoIdx,\\n        uint256 poolIdx,\\n        bool isStakingOrReward\\n    ) external view returns (address result, bytes32 salt);\\n\\n    function FORTUNNA_TOKEN_PROTO_INDEX() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60b0b1a7b95a7de664b5879e6daef7f38ffaa89684a7ec6121ee9d9bef771736\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\n\\ninterface IFortunnaPool {\\n    event PartDistributed(uint256 partOfTotalRewards);\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event EmergencyWithdraw(address indexed user, uint256 reward);\\n\\n    function factory() external view returns (address);\\n\\n    function initialize(\\n        address poolOwner,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0x23baad8a2de0ebc38a0274621493d3281d5ae1d1fe165e6421a184ad8a0cdbb8\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\nimport \\\"./INativeTokenReceivable.sol\\\";\\n\\ninterface IFortunnaToken is IERC20, IERC20Metadata, INativeTokenReceivable {\\n    function mint(address user, uint256 amount) external payable;\\n\\n    function burn(address payable user, uint256 amount) external;\\n\\n    function calcFortunnaTokensInOrOutPerUnderlyingToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 underlyingTokenAmountInOrOut\\n    ) external view returns (uint256 fortunnaTokensAmountInOrOut);\\n\\n    function calcUnderlyingTokensInOrOutPerFortunnaToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 amountToMintOrBurn\\n    ) external view returns (uint256 underlyingTokensInOrOut);\\n\\n    function initialize(\\n        bool stakingOrRewardTokens,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0x98a720cbf0922279f7374a979294c3f80be4d8fda4c9fa77f3fe052b2a6a6d54\",\"license\":\"MIT\"},\"contracts/interfaces/INativeTokenReceivable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title The interface for the Fortunna Yield Farming smart-contracts that can receive native tokens.\\n/// @author Fortunna Team\\n/// @notice The interface allows smart-contracts to use an event to document all native tokens incoms.\\ninterface INativeTokenReceivable {\\n    /// @notice An event to be fired when native tokens arrive to the fabric.\\n    /// @param amount An exact amount of the tokens arrived.\\n    event NativeTokenReceived(uint256 indexed amount);\\n}\\n\",\"keccak256\":\"0x4e36b4ed7155a888f381ce07e1e964291db1efb9d823edf6107187ed2fdc64e0\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaBitMaskLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FortunnaErrorsLib.sol\\\";\\n\\n/// @title Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.\\n/// @author Fortunna Team\\n/// @notice A lib holding bit mas manipulation functionality.\\nlibrary FortunnaBitMaskLib {\\n    /// @dev A helper function to generate bit masks from boolean array.\\n    /// @param flags A boolean array.\\n    function getMaskFromBooleans(\\n        bool[] calldata flags\\n    ) internal pure returns (bytes32 result) {\\n        if (flags.length > 256) {\\n            revert FortunnaErrorsLib.InvalidLength(\\n                flags.length,\\n                \\\"flagsLength>256\\\"\\n            );\\n        }\\n        for (uint256 i = 0; i < flags.length; i++) {\\n            if (flags[i]) {\\n                result |= bytes32(i == 0 ? 1 : 1 << i);\\n            }\\n        }\\n    }\\n\\n    /// @dev A helper function to check if some bit is up in the mask.\\n    /// @param mask A mask to be checked.\\n    /// @param index An index of the bit to be checked.\\n    function isBitUp(\\n        bytes32 mask,\\n        uint8 index\\n    ) internal pure returns (bool result) {\\n        uint256 counter = index == 0 ? 1 : 1 << index;\\n        return bytes32(counter) == mask & bytes32(counter);\\n    }\\n}\\n\",\"keccak256\":\"0x51229900d92e0c0ff03e279bfd36781868a1c3f6724031708d3b4c0885d7a30e\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Fortunna Yield Farming pools lib that contains all the errors.\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors.\\nlibrary FortunnaErrorsLib {\\n    /// @dev An error to be reverted if an `account` would be\\n    /// banned.\\n    /// @param account A banned user.\\n    error Banned(address account);\\n\\n    /// @dev An error to be reverted if an unknown prototype name would be used to deploy\\n    /// a pool or other utility smart-contract.\\n    /// @param prototypeIndex An index of prototype smart-contract.\\n    error UnknownPrototypeIndex(uint256 prototypeIndex);\\n\\n    /// @dev An error to be reverted if the pool deployer didn't payed enough for it.\\n    /// @param amount An actual amount the deployer sent.\\n    error NotEnoughtPayment(uint256 amount);\\n\\n    /// @dev An error to be reverted if some data structures `length` is not defined correctly.\\n    /// @param length An actual length of the data structure.\\n    /// @param comment Some comment as to what kind of a data structure has been addressed to.\\n    error InvalidLength(uint256 length, string comment);\\n\\n    /// @dev An error to be reverted if in some two addresses arrays the elements aren't unique.\\n    /// @param someAddress An address which is equal in both arrays.\\n    error NotUniqueAddresses(address someAddress);\\n\\n    /// @dev An error to be reverted if the contract is being deployed at a wrong chain.\\n    /// @param chainId An actual chain ID.\\n    error ForeignChainId(uint256 chainId);\\n\\n    /// @dev An error to be reverted if some Euclidean interval hasn't been defined correctly.\\n    /// @param start A start of the interval.\\n    /// @param finish An end of the interval.\\n    /// @param comment Some comment as to what kind of an interval this is.\\n    error IncorrectInterval(uint256 start, uint256 finish, string comment);\\n\\n    /// @dev An error to be reverted if some base points were defined out of their boundaries.\\n    /// @param basePoints An actual base points amount.\\n    /// @param comment Some comment as to what kind of a base points this is.\\n    error IncorrectBasePoints(uint256 basePoints, string comment);\\n\\n    /// @dev An error to be reverted if an `enity` is already exists in some address set.\\n    /// @param entity An entity address.\\n    error AddressAlreadyExists(address entity);\\n\\n    /// @dev An error to be reverted if the contract was being called before the initialization.\\n    error NotInitialized();\\n\\n    /// @dev An error to be reverted if an `entity` does not possess the `role`.\\n    /// @param role A role an entity doesn't posess.\\n    /// @param entity An entity violating authorization.\\n    error NotAuthorized(bytes32 role, address entity);\\n\\n    /// @dev An error to be reverted if some scalar property of the data structure was addressed wrongly.\\n    /// @param scalar A scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error InvalidScalar(uint256 scalar, string comment);\\n\\n    /// @dev An error to be reverted if some pair of scalars is not equal, but they should be.\\n    /// @param x A first scalar.\\n    /// @param y A second scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error AreNotEqual(uint256 x, uint256 y, string comment);\\n\\n    error NotEnoughStaked(uint256 amount, uint256 limit);\\n\\n    error TooMuchStaked(uint256 amount, uint256 limit);\\n\\n    error DistributionEnded(uint256 timeDifference);\\n\\n    error DistributionNotStarted(uint256 timeDifference);\\n\\n    error InvalidWeightedInput(uint256[] amounts);\\n\\n    error NotEnoughRewardToDistribute(uint256 provided, uint256 actual);\\n\\n    error NotImplemented();\\n}\\n\",\"keccak256\":\"0x596563731924ab1fbf0706875e1d779b50ad814df109173141b4fdb192eafb58\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title Canonical Fortunna Yield Farming pools lib\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors, helpers functions and constants.\\nlibrary FortunnaLib {\\n    struct CustomPoolParameters {\\n        address nonfungiblePositionManager;\\n    }\\n\\n    /// @dev A struct to hold pools scalar deploy parameters.\\n    struct PoolParameters {\\n        // An index of pool prototype in the factory list of prototypes.\\n        uint256 protoPoolIdx;\\n        // Start of the pool reward distribution period.\\n        uint256 startTimestamp;\\n        // End of the pool reward distribution period.\\n        uint256 endTimestamp;\\n        // Minimal amount for user to be able to deposit to the pool.\\n        uint256 minStakeAmount;\\n        // Maximal amount for user to be able to deposit to the pool.\\n        uint256 maxStakeAmount;\\n        // A time duration in seconds for a user to wait until they could receiver their rewards.\\n        uint256 minLockUpRewardsPeriod;\\n        // A fee amount in base points to be charged from user if they would attempt to receiver their rewards.\\n        uint256 earlyWithdrawalFeeBasePoints;\\n        // A fee amount in base points to be charged from user if they would attempt to perform deposit/withdraw.\\n        uint256 depositWithdrawFeeBasePoints;\\n        // A percent from total reward provided being distributed to stakers.\\n        uint256 totalRewardBasePointsPerDistribution;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is staking token.\\n        bytes32 stakingTokensMask;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is reward token.\\n        bytes32 rewardTokensMask;\\n        CustomPoolParameters custom;\\n    }\\n\\n    /// @dev A struct to hold pools vector deploy parameters.\\n    struct PoolParametersArrays {\\n        // An array of tokens to be used as either reward or staking tokens.\\n        address[] utilizingTokens;\\n        // Array of pairs <index of reward token, initial total reward amount>\\n        uint256[2][] initialRewardAmounts;\\n        // An array of pairs <index of staking token, deposit amount>\\n        uint256[2][] initialDepositAmounts;\\n    }\\n\\n    /// @dev A struct to hold a pay info for pool deployment.\\n    struct PaymentInfo {\\n        // A token address to be accepted as payment.\\n        address paymentToken;\\n        // A payment amount for pool deploy.\\n        uint256 cost;\\n    }\\n\\n    /// @notice A role hash to mark addresses to be held as reward tokens.\\n    bytes32 public constant ALLOWED_REWARD_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_REWARD_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as staking tokens.\\n    bytes32 public constant ALLOWED_STAKING_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_STAKING_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as external reward tokens from another protocols.\\n    bytes32 public constant ALLOWED_EXTERNAL_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_EXTERNAL_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as banned users.\\n    bytes32 public constant BANNED_ROLE = keccak256(\\\"BANNED_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as payment for pool deploy tokens.\\n    bytes32 public constant ALLOWED_PAYMENT_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_PAYMENT_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant LP_MINTER_BURNER_ROLE =\\n        keccak256(\\\"LP_MINTER_BURNER_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant POOL_REWARDS_PROVIDER =\\n        keccak256(\\\"POOL_REWARDS_PROVIDER\\\");\\n\\n    /// @notice A max of base points. (ex. Like 100 in percents)\\n    uint256 public constant BASE_POINTS_MAX = 10000;\\n\\n    /// @notice A given precision for math operations;\\n    uint256 public constant PRECISION = 1e10;\\n\\n    /// @notice A dead address for floor tokens to be minted\\n    address public constant DEAD_ADDRESS =\\n        0x000000000000000000000000000000000000dEaD;\\n}\\n\",\"keccak256\":\"0xe34fa79ce27c6c8ea345c75f491543c8748672a30e5cddd3ab28e31b6db47327\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405230608052348015610013575f80fd5b505f805462ff0000191690556001805560805161248b6100385f395f505061248b5ff3fe608060405234801561000f575f80fd5b50600436106101c6575f3560e01c80635d0eaaaf116100fe578063a694fc3a1161009e578063dec8a7471161006e578063dec8a7471461041e578063e3161ddd14610427578063f7c618c11461042f578063f8077fae14610442575f80fd5b8063a694fc3a146103e9578063c45a0155146103fc578063db2e21bc1461040d578063dd69f04f14610415575f80fd5b80638456cb59116100d95780638456cb59146103bd5780638e997622146103c5578063902c736f146103d857806390aeb57d146103e1575f80fd5b80635d0eaaaf1461034457806372f702f31461037f57806373328ce9146103aa575f80fd5b80633813f875116101695780634430135a116101445780634430135a146102fa578063457b15751461030d5780634c179042146103165780635c975abb14610329575f80fd5b80633813f875146102e15780633d18b912146102ea5780633f4ba83a146102f2575f80fd5b80632e1a7d4d116101a45780632e1a7d4d1461029f5780632fbbb3e5146102b25780633027a704146102c557806331d7a262146102ce575f80fd5b80630910638a146101ca5780630bbdd007146101e65780631481f800146101f0575b5f80fd5b6101d360185481565b6040519081526020015b60405180910390f35b6101ee61044b565b005b600354600454600554600654600754600854600954600a54600b54600c54600d546040805160208101909152600e546001600160a01b0316815261023c9b9a999897969594939291908c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e0860152610100850152610120840152610140830152516001600160a01b0316610160820152610180016101dd565b6101ee6102ad366004611b83565b61053f565b6101d36102c0366004611c2c565b6106e4565b6101d360165481565b6101d36102dc366004611d25565b6107cc565b6101d360145481565b6101ee61087a565b6101ee61089d565b6101ee610308366004611d47565b6108ae565b6101d360135481565b6101ee610324366004611d25565b610e7a565b5f5462010000900460ff1660405190151581526020016101dd565b61036a610352366004611d25565b60196020525f90815260409020805460019091015482565b604080519283526020830191909152016101dd565b600f54610392906001600160a01b031681565b6040516001600160a01b0390911681526020016101dd565b6101ee6103b8366004611dc5565b610ebb565b6101ee610f8e565b6101d36103d3366004611df8565b610f9f565b6101d360155481565b6101ee610fd4565b6101ee6103f7366004611b83565b611088565b6002546001600160a01b0316610392565b6101ee61121b565b6101d360125481565b6101d360175481565b6101ee6112aa565b601054610392906001600160a01b031681565b6101d360115481565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df361047581611327565b6010545f906001600160a01b03166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156104cb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104ef9190611e11565b90508060165f8282546105029190611e3c565b90915550506040518181527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b6105476113cd565b61054f611426565b335f81815260196020526040902080548311156105ba57826040516333bf2e9f60e01b81526004016105b1918152604060208201819052601690820152750c6c2dcdcdee8aed2e8d0c8e4c2eea8d0d2e69aeac6d60531b606082015260800190565b60405180910390fd5b6105c261148d565b82815f015f8282546105d49190611e4f565b909155505060125481546402540be400916105ee91611e62565b6105f89190611e79565b81600101819055508260155f8282546106119190611e4f565b9091555050600a541561067c57600a545f90612710906106319086611e62565b61063b9190611e79565b905080601a60028154811061065257610652611eac565b905f5260205f20015f8282546106689190611e3c565b9091555061067890508185611e4f565b9350505b600f54610693906001600160a01b03168385611605565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5846040516106ce91815260200190565b60405180910390a250506106e160018055565b50565b5f805b83518110156107c5575f84828151811061070357610703611eac565b602002602001015190508060016002811061072057610720611eac565b60200201515f0361073157506107b3565b6020810151604051632f9d937f60e01b81526004810184905260248101919091526001600160a01b03851690632f9d937f90604401602060405180830381865afa158015610781573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107a59190611e11565b6107af9084611e3c565b9250505b806107bd81611ec0565b9150506106e7565b5092915050565b6001600160a01b0381165f908152601960205260408120601254601554601154421180156107f957505f81115b15610844575f601454601154426108109190611e4f565b61081a9190611e62565b90508161082c6402540be40083611e62565b6108369190611e79565b6108409084611e3c565b9250505b600183015483546402540be4009061085d908590611e62565b6108679190611e79565b6108719190611e4f565b95945050505050565b6108826113cd565b61088a611426565b61089261148d565b61089b60018055565b565b6108a65f611327565b61089b61166d565b5f54610100900460ff16158080156108cc57505f54600160ff909116105b806108e55750303b1580156108e557505f5460ff166001145b6109485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105b1565b5f805460ff191660011790558015610969575f805461ff0019166101001790555b33808460036109788282611f01565b50849050601b61098882826120b7565b5050600280546001600160a01b0319166001600160a01b0383161790555f6001826001600160a01b031663ce883cdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a089190611e11565b610a129190611e4f565b90505f826001600160a01b0316631bbb12fc846001600160a01b031663acc9606f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a849190611e11565b6040518263ffffffff1660e01b8152600401610aa291815260200190565b602060405180830381865afa158015610abd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ae1919061219b565b604080516020808201869052600160f81b8284015282516021818403018152604183018452805190820120606183018790525f6081840152835160628185030181526082909301909352815191012091925090610b476001600160a01b038416836116c0565b600f80546001600160a01b0319166001600160a01b03928316179055610b6f908416826116c0565b601080546001600160a01b0319166001600160a01b03928316179055600f5460405163f436f09360e01b815291169063f436f09390610bb7906001908d908d90600401612326565b5f604051808303815f87803b158015610bce575f80fd5b505af1158015610be0573d5f803e3d5ffd5b505060105460405163f436f09360e01b81526001600160a01b03909116925063f436f0939150610c18905f908d908d90600401612326565b5f604051808303815f87803b158015610c2f575f80fd5b505af1158015610c41573d5f803e3d5ffd5b505050505f610ccd898060400190610c599190611f91565b808060200260200160405190810160405280939291908181526020015f905b82821015610cb5576040805180820182529080840287019060029083908390808284375f9201919091525050508152600190910190602001610c78565b5050600f546001600160a01b031692506106e4915050565b90508015610d3a57600f546040516340c10f1960e01b81526001600160a01b038d8116600483015260248201849052909116906340c10f19906044015f604051808303815f87803b158015610d20575f80fd5b505af1158015610d32573d5f803e3d5ffd5b505050505f90505b610dbe610d4a60208b018b611f91565b808060200260200160405190810160405280939291908181526020015f905b82821015610da6576040805180820182529080840287019060029083908390808284375f9201919091525050508152600190910190602001610d69565b50506010546001600160a01b031692506106e4915050565b90508015610e28576010546040516340c10f1960e01b81526001600160a01b038d8116600483015260248201849052909116906340c10f19906044015f604051808303815f87803b158015610e11575f80fd5b505af1158015610e23573d5f803e3d5ffd5b505050505b505050505050508015610e74575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610e835f611327565b5f5b601a54811015610eb757610ea5828260028111156103b8576103b8611e98565b80610eaf81611ec0565b915050610e85565b5050565b610ec45f611327565b5f816002811115610ed757610ed7611e98565b03610f1257610f1282601a836002811115610ef457610ef4611e98565b81548110610f0457610f04611eac565b905f5260205f200154611760565b6001816002811115610f2657610f26611e98565b1480610f4357506002816002811115610f4157610f41611e98565b145b15610eb757610eb782601a836002811115610f6057610f60611e98565b81548110610f7057610f70611eac565b5f91825260209091200154600f546001600160a01b03169190611605565b610f975f611327565b61089b6117a9565b5f601a826002811115610fb457610fb4611e98565b81548110610fc457610fc4611eac565b905f5260205f2001549050919050565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df3610ffe81611327565b5f6127106003600801546016546110159190611e62565b61101f9190611e79565b9050611039336010546001600160a01b03169030846117e9565b8060185f82825461104a9190611e3c565b909155506110589050611821565b6040518181527fd2904f4877df3057e76c2da3130bd597114a6d0ff8b9952f7c99915a429e737090602001610533565b6110906113cd565b6007548111156110c1576007546040516363038b1d60e11b81526105b1918391600401918252602082015260400190565b6006548110156110f25760065460405163b8d4634360e01b81526105b1918391600401918252602082015260400190565b6110fa611426565b335f81815260196020526040902061111061148d565b600f54611128906001600160a01b03168330866117e9565b600a541561118e57600a545f90612710906111439086611e62565b61114d9190611e79565b905080601a60018154811061116457611164611eac565b905f5260205f20015f82825461117a9190611e3c565b9091555061118a90508185611e4f565b9350505b8260155f82825461119f9190611e3c565b90915550508054839082905f906111b7908490611e3c565b909155505060125481546402540be400916111d191611e62565b6111db9190611e79565b60018201556040518381526001600160a01b038316907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016106ce565b335f8181526019602052604090208054600f54611245916001600160a01b03909116908490611605565b80546040519081526001600160a01b038316907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a28054601580545f90611298908490611e4f565b90915550505f80825560019091015550565b60115442116112b557565b6015545f036112c45742601155565b5f601454601154426112d69190611e4f565b6112e09190611e62565b90506112eb81611843565b6015546402540be4006014546113019190611e62565b61130b9190611e79565b60125f82825461131b9190611e3c565b90915550504260115550565b5f33600254604051632474521560e21b8152600481018590526001600160a01b0380841660248301529293509116906391d1485490604401602060405180830381865afa15801561137a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061139e91906123c7565b610eb75760405163a78e4aa560e01b8152600481018390526001600160a01b03821660248201526044016105b1565b60026001540361141f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105b1565b6002600155565b60045442101561145a5760045461143e904290611e4f565b60405163147fdec360e01b81526004016105b191815260200190565b60055442111561089b576005546114719042611e4f565b604051633652a8cb60e21b81526004016105b191815260200190565b335f8181526019602052604090206114a36112aa565b5f81600101546402540be400601254845f01546114c09190611e62565b6114ca9190611e79565b6114d49190611e4f565b6004549091505f82158015906114e957508142115b801561150057506008546114fd9083611e3c565b42105b801561150d575060095415155b1561156c57600954612710906115239085611e62565b61152d9190611e79565b905080601a5f8154811061154357611543611eac565b905f5260205f20015f8282546115599190611e3c565b9091555061156990508184611e4f565b92505b6115768584611760565b846001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040516115b191815260200190565b60405180910390a25f6115c48285611e3c565b90508060175f8282546115d79190611e4f565b925050819055508060185f8282546115ef9190611e4f565b909155506115fd9050611821565b505050505050565b6040516001600160a01b03831660248201526044810182905261166890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261188d565b505050565b611675611960565b5f805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760095ff590506001600160a01b03811661175a5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016105b1565b92915050565b805f0361176b575050565b60175481111561179257601754601054610eb7916001600160a01b03909116908490611605565b601054610eb7906001600160a01b03168383611605565b6117b16119ae565b5f805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116a33390565b6040516001600160a01b0380851660248301528316604482015260648101829052610e749085906323b872dd60e01b90608401611631565b6004546005546118319190611e4f565b60185461183e9190611e79565b601455565b8060175f8282546118549190611e3c565b909155505060185460175411156106e15760185460175460405163c006882b60e01b8152600481019290925260248201526044016105b1565b5f6118e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119f99092919063ffffffff16565b905080515f148061190157508080602001905181019061190191906123c7565b6116685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105b1565b5f5462010000900460ff1661089b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105b1565b5f5462010000900460ff161561089b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105b1565b6060611a0784845f85611a0f565b949350505050565b606082471015611a705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105b1565b5f80866001600160a01b03168587604051611a8b9190612408565b5f6040518083038185875af1925050503d805f8114611ac5576040519150601f19603f3d011682016040523d82523d5f602084013e611aca565b606091505b5091509150611adb87838387611ae6565b979650505050505050565b60608315611b545782515f03611b4d576001600160a01b0385163b611b4d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105b1565b5081611a07565b611a078383815115611b695781518083602001fd5b8060405162461bcd60e51b81526004016105b19190612423565b5f60208284031215611b93575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715611bd157611bd1611b9a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c0057611c00611b9a565b604052919050565b6001600160a01b03811681146106e1575f80fd5b8035611c2781611c08565b919050565b5f806040808486031215611c3e575f80fd5b833567ffffffffffffffff80821115611c55575f80fd5b8186019150601f8781840112611c69575f80fd5b8235602083821115611c7d57611c7d611b9a565b611c8b818360051b01611bd7565b828152818101945060069290921b85018101918a831115611caa575f80fd5b948101945b82861015611d09578a84870112611cc5575f8081fd5b611ccd611bae565b808888018d811115611cde575f8081fd5b885b81811015611cf75780358452928501928501611ce0565b50508652509486019493810193611caf565b9750611d16898201611c1c565b96505050505050509250929050565b5f60208284031215611d35575f80fd5b8135611d4081611c08565b9392505050565b5f805f8385036101c0811215611d5b575f80fd5b8435611d6681611c08565b9350610180601f1982011215611d7a575f80fd5b506020840191506101a084013567ffffffffffffffff811115611d9b575f80fd5b840160608187031215611dac575f80fd5b809150509250925092565b803560038110611c27575f80fd5b5f8060408385031215611dd6575f80fd5b8235611de181611c08565b9150611def60208401611db7565b90509250929050565b5f60208284031215611e08575f80fd5b611d4082611db7565b5f60208284031215611e21575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561175a5761175a611e28565b8181038181111561175a5761175a611e28565b808202811582820484141761175a5761175a611e28565b5f82611e9357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60018201611ed157611ed1611e28565b5060010190565b8135611ee381611c08565b81546001600160a01b0319166001600160a01b039190911617905550565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610eb76101608301600b8301611ed8565b5b81811015610eb7575f8155600101611f7e565b5f808335601e19843603018112611fa6575f80fd5b83018035915067ffffffffffffffff821115611fc0575f80fd5b6020019150600681901b3603821315611fd7575f80fd5b9250929050565b815f5b6002811015610e7457813583820155602090910190600101611fe1565b600160401b83111561201257612012611b9a565b805483825580841015612083576001600160ff1b03818116821461203857612038611e28565b808516851461204957612049611e28565b50815f5260205f208160011b81018560011b820191505b80821015612080576120756002830183611f7d565b600282019150612060565b50505b505f8181526020812083915b858110156115fd576120a18383611fde565b604092909201916002919091019060010161208f565b8135601e198336030181126120ca575f80fd5b8201803567ffffffffffffffff8111156120e2575f80fd5b602080830192508160051b36038313156120fa575f80fd5b600160401b82111561210e5761210e611b9a565b83548285558083101561213157845f52815f2061212f828201858301611f7d565b505b50835f52805f205f5b8381101561215d57843561214d81611c08565b828201559382019360010161213a565b505061216b81860186611f91565b935091505061217e828260018601611ffe565b505061218d6040830183611f91565b610e74818360028601611ffe565b5f602082840312156121ab575f80fd5b8151611d4081611c08565b80356121c181611c08565b6001600160a01b031690915250565b5f808335601e198436030181126121e5575f80fd5b830160208101925035905067ffffffffffffffff811115612204575f80fd5b8060061b3603821315611fd7575f80fd5b8183526020830192505f815f5b8481101561224157604080838837958601959190910190600101612222565b5093949350505050565b5f606083018235601e19843603018112612263575f80fd5b8301602081810191359067ffffffffffffffff821115612281575f80fd5b8160051b3603831315612292575f80fd5b606087529281905290915f9190608087015b828410156122d45784356122b781611c08565b6001600160a01b03168152938101936001939093019281016122a4565b6122e0828801886121d0565b95509350878103828901526122f6818686612215565b94505050505061230960408401846121d0565b858303604087015261231c838284612215565b9695505050505050565b5f6101c0851515835284356020840152602085013560408401526040850135606084015260608501356080840152608085013560a084015260a085013560c084015260c085013560e084015261010060e0860135818501526101208187013581860152610140915080870135828601525061016081870135818601526123b261018086018289016121b6565b5050806101a084015261231c8184018561224b565b5f602082840312156123d7575f80fd5b81518015158114611d40575f80fd5b5f5b838110156124005781810151838201526020016123e8565b50505f910152565b5f82516124198184602087016123e6565b9190910192915050565b602081525f82518060208401526124418160408501602087016123e6565b601f01601f1916919091016040019291505056fea26469706673582212203c167c4b897e4c2a3632c90fca7cc4732cb199c6bcd85694ab54975bc4b7a16c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106101c6575f3560e01c80635d0eaaaf116100fe578063a694fc3a1161009e578063dec8a7471161006e578063dec8a7471461041e578063e3161ddd14610427578063f7c618c11461042f578063f8077fae14610442575f80fd5b8063a694fc3a146103e9578063c45a0155146103fc578063db2e21bc1461040d578063dd69f04f14610415575f80fd5b80638456cb59116100d95780638456cb59146103bd5780638e997622146103c5578063902c736f146103d857806390aeb57d146103e1575f80fd5b80635d0eaaaf1461034457806372f702f31461037f57806373328ce9146103aa575f80fd5b80633813f875116101695780634430135a116101445780634430135a146102fa578063457b15751461030d5780634c179042146103165780635c975abb14610329575f80fd5b80633813f875146102e15780633d18b912146102ea5780633f4ba83a146102f2575f80fd5b80632e1a7d4d116101a45780632e1a7d4d1461029f5780632fbbb3e5146102b25780633027a704146102c557806331d7a262146102ce575f80fd5b80630910638a146101ca5780630bbdd007146101e65780631481f800146101f0575b5f80fd5b6101d360185481565b6040519081526020015b60405180910390f35b6101ee61044b565b005b600354600454600554600654600754600854600954600a54600b54600c54600d546040805160208101909152600e546001600160a01b0316815261023c9b9a999897969594939291908c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e0860152610100850152610120840152610140830152516001600160a01b0316610160820152610180016101dd565b6101ee6102ad366004611b83565b61053f565b6101d36102c0366004611c2c565b6106e4565b6101d360165481565b6101d36102dc366004611d25565b6107cc565b6101d360145481565b6101ee61087a565b6101ee61089d565b6101ee610308366004611d47565b6108ae565b6101d360135481565b6101ee610324366004611d25565b610e7a565b5f5462010000900460ff1660405190151581526020016101dd565b61036a610352366004611d25565b60196020525f90815260409020805460019091015482565b604080519283526020830191909152016101dd565b600f54610392906001600160a01b031681565b6040516001600160a01b0390911681526020016101dd565b6101ee6103b8366004611dc5565b610ebb565b6101ee610f8e565b6101d36103d3366004611df8565b610f9f565b6101d360155481565b6101ee610fd4565b6101ee6103f7366004611b83565b611088565b6002546001600160a01b0316610392565b6101ee61121b565b6101d360125481565b6101d360175481565b6101ee6112aa565b601054610392906001600160a01b031681565b6101d360115481565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df361047581611327565b6010545f906001600160a01b03166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156104cb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104ef9190611e11565b90508060165f8282546105029190611e3c565b90915550506040518181527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b6105476113cd565b61054f611426565b335f81815260196020526040902080548311156105ba57826040516333bf2e9f60e01b81526004016105b1918152604060208201819052601690820152750c6c2dcdcdee8aed2e8d0c8e4c2eea8d0d2e69aeac6d60531b606082015260800190565b60405180910390fd5b6105c261148d565b82815f015f8282546105d49190611e4f565b909155505060125481546402540be400916105ee91611e62565b6105f89190611e79565b81600101819055508260155f8282546106119190611e4f565b9091555050600a541561067c57600a545f90612710906106319086611e62565b61063b9190611e79565b905080601a60028154811061065257610652611eac565b905f5260205f20015f8282546106689190611e3c565b9091555061067890508185611e4f565b9350505b600f54610693906001600160a01b03168385611605565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5846040516106ce91815260200190565b60405180910390a250506106e160018055565b50565b5f805b83518110156107c5575f84828151811061070357610703611eac565b602002602001015190508060016002811061072057610720611eac565b60200201515f0361073157506107b3565b6020810151604051632f9d937f60e01b81526004810184905260248101919091526001600160a01b03851690632f9d937f90604401602060405180830381865afa158015610781573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107a59190611e11565b6107af9084611e3c565b9250505b806107bd81611ec0565b9150506106e7565b5092915050565b6001600160a01b0381165f908152601960205260408120601254601554601154421180156107f957505f81115b15610844575f601454601154426108109190611e4f565b61081a9190611e62565b90508161082c6402540be40083611e62565b6108369190611e79565b6108409084611e3c565b9250505b600183015483546402540be4009061085d908590611e62565b6108679190611e79565b6108719190611e4f565b95945050505050565b6108826113cd565b61088a611426565b61089261148d565b61089b60018055565b565b6108a65f611327565b61089b61166d565b5f54610100900460ff16158080156108cc57505f54600160ff909116105b806108e55750303b1580156108e557505f5460ff166001145b6109485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105b1565b5f805460ff191660011790558015610969575f805461ff0019166101001790555b33808460036109788282611f01565b50849050601b61098882826120b7565b5050600280546001600160a01b0319166001600160a01b0383161790555f6001826001600160a01b031663ce883cdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a089190611e11565b610a129190611e4f565b90505f826001600160a01b0316631bbb12fc846001600160a01b031663acc9606f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a849190611e11565b6040518263ffffffff1660e01b8152600401610aa291815260200190565b602060405180830381865afa158015610abd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ae1919061219b565b604080516020808201869052600160f81b8284015282516021818403018152604183018452805190820120606183018790525f6081840152835160628185030181526082909301909352815191012091925090610b476001600160a01b038416836116c0565b600f80546001600160a01b0319166001600160a01b03928316179055610b6f908416826116c0565b601080546001600160a01b0319166001600160a01b03928316179055600f5460405163f436f09360e01b815291169063f436f09390610bb7906001908d908d90600401612326565b5f604051808303815f87803b158015610bce575f80fd5b505af1158015610be0573d5f803e3d5ffd5b505060105460405163f436f09360e01b81526001600160a01b03909116925063f436f0939150610c18905f908d908d90600401612326565b5f604051808303815f87803b158015610c2f575f80fd5b505af1158015610c41573d5f803e3d5ffd5b505050505f610ccd898060400190610c599190611f91565b808060200260200160405190810160405280939291908181526020015f905b82821015610cb5576040805180820182529080840287019060029083908390808284375f9201919091525050508152600190910190602001610c78565b5050600f546001600160a01b031692506106e4915050565b90508015610d3a57600f546040516340c10f1960e01b81526001600160a01b038d8116600483015260248201849052909116906340c10f19906044015f604051808303815f87803b158015610d20575f80fd5b505af1158015610d32573d5f803e3d5ffd5b505050505f90505b610dbe610d4a60208b018b611f91565b808060200260200160405190810160405280939291908181526020015f905b82821015610da6576040805180820182529080840287019060029083908390808284375f9201919091525050508152600190910190602001610d69565b50506010546001600160a01b031692506106e4915050565b90508015610e28576010546040516340c10f1960e01b81526001600160a01b038d8116600483015260248201849052909116906340c10f19906044015f604051808303815f87803b158015610e11575f80fd5b505af1158015610e23573d5f803e3d5ffd5b505050505b505050505050508015610e74575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610e835f611327565b5f5b601a54811015610eb757610ea5828260028111156103b8576103b8611e98565b80610eaf81611ec0565b915050610e85565b5050565b610ec45f611327565b5f816002811115610ed757610ed7611e98565b03610f1257610f1282601a836002811115610ef457610ef4611e98565b81548110610f0457610f04611eac565b905f5260205f200154611760565b6001816002811115610f2657610f26611e98565b1480610f4357506002816002811115610f4157610f41611e98565b145b15610eb757610eb782601a836002811115610f6057610f60611e98565b81548110610f7057610f70611eac565b5f91825260209091200154600f546001600160a01b03169190611605565b610f975f611327565b61089b6117a9565b5f601a826002811115610fb457610fb4611e98565b81548110610fc457610fc4611eac565b905f5260205f2001549050919050565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df3610ffe81611327565b5f6127106003600801546016546110159190611e62565b61101f9190611e79565b9050611039336010546001600160a01b03169030846117e9565b8060185f82825461104a9190611e3c565b909155506110589050611821565b6040518181527fd2904f4877df3057e76c2da3130bd597114a6d0ff8b9952f7c99915a429e737090602001610533565b6110906113cd565b6007548111156110c1576007546040516363038b1d60e11b81526105b1918391600401918252602082015260400190565b6006548110156110f25760065460405163b8d4634360e01b81526105b1918391600401918252602082015260400190565b6110fa611426565b335f81815260196020526040902061111061148d565b600f54611128906001600160a01b03168330866117e9565b600a541561118e57600a545f90612710906111439086611e62565b61114d9190611e79565b905080601a60018154811061116457611164611eac565b905f5260205f20015f82825461117a9190611e3c565b9091555061118a90508185611e4f565b9350505b8260155f82825461119f9190611e3c565b90915550508054839082905f906111b7908490611e3c565b909155505060125481546402540be400916111d191611e62565b6111db9190611e79565b60018201556040518381526001600160a01b038316907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016106ce565b335f8181526019602052604090208054600f54611245916001600160a01b03909116908490611605565b80546040519081526001600160a01b038316907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a28054601580545f90611298908490611e4f565b90915550505f80825560019091015550565b60115442116112b557565b6015545f036112c45742601155565b5f601454601154426112d69190611e4f565b6112e09190611e62565b90506112eb81611843565b6015546402540be4006014546113019190611e62565b61130b9190611e79565b60125f82825461131b9190611e3c565b90915550504260115550565b5f33600254604051632474521560e21b8152600481018590526001600160a01b0380841660248301529293509116906391d1485490604401602060405180830381865afa15801561137a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061139e91906123c7565b610eb75760405163a78e4aa560e01b8152600481018390526001600160a01b03821660248201526044016105b1565b60026001540361141f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105b1565b6002600155565b60045442101561145a5760045461143e904290611e4f565b60405163147fdec360e01b81526004016105b191815260200190565b60055442111561089b576005546114719042611e4f565b604051633652a8cb60e21b81526004016105b191815260200190565b335f8181526019602052604090206114a36112aa565b5f81600101546402540be400601254845f01546114c09190611e62565b6114ca9190611e79565b6114d49190611e4f565b6004549091505f82158015906114e957508142115b801561150057506008546114fd9083611e3c565b42105b801561150d575060095415155b1561156c57600954612710906115239085611e62565b61152d9190611e79565b905080601a5f8154811061154357611543611eac565b905f5260205f20015f8282546115599190611e3c565b9091555061156990508184611e4f565b92505b6115768584611760565b846001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040516115b191815260200190565b60405180910390a25f6115c48285611e3c565b90508060175f8282546115d79190611e4f565b925050819055508060185f8282546115ef9190611e4f565b909155506115fd9050611821565b505050505050565b6040516001600160a01b03831660248201526044810182905261166890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261188d565b505050565b611675611960565b5f805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760095ff590506001600160a01b03811661175a5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016105b1565b92915050565b805f0361176b575050565b60175481111561179257601754601054610eb7916001600160a01b03909116908490611605565b601054610eb7906001600160a01b03168383611605565b6117b16119ae565b5f805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116a33390565b6040516001600160a01b0380851660248301528316604482015260648101829052610e749085906323b872dd60e01b90608401611631565b6004546005546118319190611e4f565b60185461183e9190611e79565b601455565b8060175f8282546118549190611e3c565b909155505060185460175411156106e15760185460175460405163c006882b60e01b8152600481019290925260248201526044016105b1565b5f6118e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119f99092919063ffffffff16565b905080515f148061190157508080602001905181019061190191906123c7565b6116685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105b1565b5f5462010000900460ff1661089b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105b1565b5f5462010000900460ff161561089b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105b1565b6060611a0784845f85611a0f565b949350505050565b606082471015611a705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105b1565b5f80866001600160a01b03168587604051611a8b9190612408565b5f6040518083038185875af1925050503d805f8114611ac5576040519150601f19603f3d011682016040523d82523d5f602084013e611aca565b606091505b5091509150611adb87838387611ae6565b979650505050505050565b60608315611b545782515f03611b4d576001600160a01b0385163b611b4d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105b1565b5081611a07565b611a078383815115611b695781518083602001fd5b8060405162461bcd60e51b81526004016105b19190612423565b5f60208284031215611b93575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715611bd157611bd1611b9a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c0057611c00611b9a565b604052919050565b6001600160a01b03811681146106e1575f80fd5b8035611c2781611c08565b919050565b5f806040808486031215611c3e575f80fd5b833567ffffffffffffffff80821115611c55575f80fd5b8186019150601f8781840112611c69575f80fd5b8235602083821115611c7d57611c7d611b9a565b611c8b818360051b01611bd7565b828152818101945060069290921b85018101918a831115611caa575f80fd5b948101945b82861015611d09578a84870112611cc5575f8081fd5b611ccd611bae565b808888018d811115611cde575f8081fd5b885b81811015611cf75780358452928501928501611ce0565b50508652509486019493810193611caf565b9750611d16898201611c1c565b96505050505050509250929050565b5f60208284031215611d35575f80fd5b8135611d4081611c08565b9392505050565b5f805f8385036101c0811215611d5b575f80fd5b8435611d6681611c08565b9350610180601f1982011215611d7a575f80fd5b506020840191506101a084013567ffffffffffffffff811115611d9b575f80fd5b840160608187031215611dac575f80fd5b809150509250925092565b803560038110611c27575f80fd5b5f8060408385031215611dd6575f80fd5b8235611de181611c08565b9150611def60208401611db7565b90509250929050565b5f60208284031215611e08575f80fd5b611d4082611db7565b5f60208284031215611e21575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561175a5761175a611e28565b8181038181111561175a5761175a611e28565b808202811582820484141761175a5761175a611e28565b5f82611e9357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60018201611ed157611ed1611e28565b5060010190565b8135611ee381611c08565b81546001600160a01b0319166001600160a01b039190911617905550565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610eb76101608301600b8301611ed8565b5b81811015610eb7575f8155600101611f7e565b5f808335601e19843603018112611fa6575f80fd5b83018035915067ffffffffffffffff821115611fc0575f80fd5b6020019150600681901b3603821315611fd7575f80fd5b9250929050565b815f5b6002811015610e7457813583820155602090910190600101611fe1565b600160401b83111561201257612012611b9a565b805483825580841015612083576001600160ff1b03818116821461203857612038611e28565b808516851461204957612049611e28565b50815f5260205f208160011b81018560011b820191505b80821015612080576120756002830183611f7d565b600282019150612060565b50505b505f8181526020812083915b858110156115fd576120a18383611fde565b604092909201916002919091019060010161208f565b8135601e198336030181126120ca575f80fd5b8201803567ffffffffffffffff8111156120e2575f80fd5b602080830192508160051b36038313156120fa575f80fd5b600160401b82111561210e5761210e611b9a565b83548285558083101561213157845f52815f2061212f828201858301611f7d565b505b50835f52805f205f5b8381101561215d57843561214d81611c08565b828201559382019360010161213a565b505061216b81860186611f91565b935091505061217e828260018601611ffe565b505061218d6040830183611f91565b610e74818360028601611ffe565b5f602082840312156121ab575f80fd5b8151611d4081611c08565b80356121c181611c08565b6001600160a01b031690915250565b5f808335601e198436030181126121e5575f80fd5b830160208101925035905067ffffffffffffffff811115612204575f80fd5b8060061b3603821315611fd7575f80fd5b8183526020830192505f815f5b8481101561224157604080838837958601959190910190600101612222565b5093949350505050565b5f606083018235601e19843603018112612263575f80fd5b8301602081810191359067ffffffffffffffff821115612281575f80fd5b8160051b3603831315612292575f80fd5b606087529281905290915f9190608087015b828410156122d45784356122b781611c08565b6001600160a01b03168152938101936001939093019281016122a4565b6122e0828801886121d0565b95509350878103828901526122f6818686612215565b94505050505061230960408401846121d0565b858303604087015261231c838284612215565b9695505050505050565b5f6101c0851515835284356020840152602085013560408401526040850135606084015260608501356080840152608085013560a084015260a085013560c084015260c085013560e084015261010060e0860135818501526101208187013581860152610140915080870135828601525061016081870135818601526123b261018086018289016121b6565b5050806101a084015261231c8184018561224b565b5f602082840312156123d7575f80fd5b81518015158114611d40575f80fd5b5f5b838110156124005781810151838201526020016123e8565b50505f910152565b5f82516124198184602087016123e6565b9190910192915050565b602081525f82518060208401526124418160408501602087016123e6565b601f01601f1916919091016040019291505056fea26469706673582212203c167c4b897e4c2a3632c90fca7cc4732cb199c6bcd85694ab54975bc4b7a16c64736f6c63430008140033",
  "libraries": {
    "FortunnaLib": "0x2475181E30FcFFA7A636eDc469BE56d9080F4A8c",
    "FortunnaErrorsLib": "0xC96e03cdB3CF495f1Bc063A1D161507Db5791542",
    "FortunnaBitMaskLib": "0x31F92547ABA932e60bC424116f2BB33a8e3EE429"
  },
  "devdoc": {
    "errors": {
      "InvalidScalar(uint256,string)": [
        {
          "details": "An error to be reverted if some scalar property of the data structure was addressed wrongly.",
          "params": {
            "comment": "Some comment as to what kind of a data structure property this is.",
            "scalar": "A scalar."
          }
        }
      ],
      "NotAuthorized(bytes32,address)": [
        {
          "details": "An error to be reverted if an `entity` does not possess the `role`.",
          "params": {
            "entity": "An entity violating authorization.",
            "role": "A role an entity doesn't posess."
          }
        }
      ]
    },
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "pause()": {
        "details": "Could be called only by the admin."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "unpause()": {
        "details": "Could be called only by the admin."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pause()": {
        "notice": "Triggers paused state."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 588,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 591,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 768,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_paused",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 869,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4447,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5366,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "scalarParams",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolParameters)7881_storage"
      },
      {
        "astId": 5369,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "stakingToken",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IFortunnaToken)7545"
      },
      {
        "astId": 5372,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IFortunnaToken)7545"
      },
      {
        "astId": 5374,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5376,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "accRewardTokenPerShare",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5378,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "distributionCycleDuration",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5380,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "rewardTokensPerSec",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5382,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "totalStakedTokensBalance",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 5384,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "expectedRewardTokensBalanceToDistribute",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 5386,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "requestedRewardTokensToDistribute",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 5388,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "providedRewardTokensBalance",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 5393,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "usersInfo",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_struct(UserInfo)5359_storage)"
      },
      {
        "astId": 5396,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_accumulatedFees",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5399,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "vectorParams",
        "offset": 0,
        "slot": "27",
        "type": "t_struct(PoolParametersArrays)7896_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)2_storage)dyn_storage": {
        "base": "t_array(t_uint256)2_storage",
        "encoding": "dynamic_array",
        "label": "uint256[2][]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFortunnaToken)7545": {
        "encoding": "inplace",
        "label": "contract IFortunnaToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)5359_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FortunnaPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)5359_storage"
      },
      "t_struct(CustomPoolParameters)7854_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaLib.CustomPoolParameters",
        "members": [
          {
            "astId": 7853,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "nonfungiblePositionManager",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolParameters)7881_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaLib.PoolParameters",
        "members": [
          {
            "astId": 7857,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "protoPoolIdx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7859,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7861,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7863,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "minStakeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7865,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "maxStakeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7867,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "minLockUpRewardsPeriod",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7869,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "earlyWithdrawalFeeBasePoints",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7871,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "depositWithdrawFeeBasePoints",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7873,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "totalRewardBasePointsPerDistribution",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7875,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "stakingTokensMask",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          },
          {
            "astId": 7877,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "rewardTokensMask",
            "offset": 0,
            "slot": "10",
            "type": "t_bytes32"
          },
          {
            "astId": 7880,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "custom",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(CustomPoolParameters)7854_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PoolParametersArrays)7896_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaLib.PoolParametersArrays",
        "members": [
          {
            "astId": 7885,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "utilizingTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7890,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "initialRewardAmounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_array(t_uint256)2_storage)dyn_storage"
          },
          {
            "astId": 7895,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "initialDepositAmounts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)2_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)5359_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaPool.UserInfo",
        "members": [
          {
            "astId": 5356,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5358,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}