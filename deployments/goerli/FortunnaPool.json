{
  "address": "0x73eA2CB15EE9515371f1135C0512e2F6B71Eb505",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeDifference",
          "type": "uint256"
        }
      ],
      "name": "DistributionEnded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeDifference",
          "type": "uint256"
        }
      ],
      "name": "DistributionNotStarted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "scalar",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "InvalidScalar",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughRewardToDistribute",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughStaked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "TooMuchStaked",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partOfTotalRewards",
          "type": "uint256"
        }
      ],
      "name": "PartDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accRewardTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addExpectedRewardTokensBalanceToDistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2][]",
          "name": "initialAmounts",
          "type": "uint256[2][]"
        },
        {
          "internalType": "address",
          "name": "fortunnaTokenAddress",
          "type": "address"
        }
      ],
      "name": "calculateFortunnaTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expectedRewardTokensBalanceToDistribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FortunnaPool.Fee",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "getAccumulatedFeesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protoPoolIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLockUpRewardsPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earlyWithdrawalFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositWithdrawFeeBasePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardBasePointsPerDistribution",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "stakingTokensMask",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "rewardTokensMask",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "nonfungiblePositionManager",
                  "type": "address"
                }
              ],
              "internalType": "struct FortunnaLib.CustomPoolParameters",
              "name": "custom",
              "type": "tuple"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParameters",
          "name": "poolParameters",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "utilizingTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialRewardAmounts",
              "type": "uint256[2][]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "initialDepositAmounts",
              "type": "uint256[2][]"
            }
          ],
          "internalType": "struct FortunnaLib.PoolParametersArrays",
          "name": "poolParametersArrays",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providePartOfTotalRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providedRewardTokensBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestedRewardTokensToDistribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IFortunnaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokensPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scalarParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protoPoolIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLockUpRewardsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earlyWithdrawalFeeBasePoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositWithdrawFeeBasePoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardBasePointsPerDistribution",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "stakingTokensMask",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "rewardTokensMask",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "nonfungiblePositionManager",
              "type": "address"
            }
          ],
          "internalType": "struct FortunnaLib.CustomPoolParameters",
          "name": "custom",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IFortunnaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTokensBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawAllFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "enum FortunnaPool.Fee",
          "name": "fee",
          "type": "uint8"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e7f6f2f67d08439e88054066425cf19c20cf01017643786388b2329094467a5",
  "receipt": {
    "to": null,
    "from": "0x57eb63d0aab5822EFCd7A9B56775F772D3e03CfD",
    "contractAddress": "0x73eA2CB15EE9515371f1135C0512e2F6B71Eb505",
    "transactionIndex": 30,
    "gasUsed": "2145566",
    "logsBloom": "0x
    "blockHash": "0x8626fcd553d560792d7bdc7675e42149beb986334da98a4006cf7f378dbdb0f0",
    "transactionHash": "0x5e7f6f2f67d08439e88054066425cf19c20cf01017643786388b2329094467a5",
    "logs": [],
    "blockNumber": 9494556,
    "cumulativeGasUsed": "6017267",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dfc0b4bbd81236be9f16ab2d5a82ad4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"}],\"name\":\"DistributionEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"}],\"name\":\"DistributionNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"InvalidScalar\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"NotEnoughRewardToDistribute\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"NotEnoughStaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"TooMuchStaked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partOfTotalRewards\",\"type\":\"uint256\"}],\"name\":\"PartDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addExpectedRewardTokensBalanceToDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"initialAmounts\",\"type\":\"uint256[2][]\"},{\"internalType\":\"address\",\"name\":\"fortunnaTokenAddress\",\"type\":\"address\"}],\"name\":\"calculateFortunnaTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedRewardTokensBalanceToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FortunnaPool.Fee\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"getAccumulatedFeesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protoPoolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockUpRewardsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWithdrawFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBasePointsPerDistribution\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stakingTokensMask\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rewardTokensMask\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"}],\"internalType\":\"struct FortunnaLib.CustomPoolParameters\",\"name\":\"custom\",\"type\":\"tuple\"}],\"internalType\":\"struct FortunnaLib.PoolParameters\",\"name\":\"poolParameters\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"utilizingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialRewardAmounts\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"initialDepositAmounts\",\"type\":\"uint256[2][]\"}],\"internalType\":\"struct FortunnaLib.PoolParametersArrays\",\"name\":\"poolParametersArrays\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providePartOfTotalRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providedRewardTokensBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestedRewardTokensToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IFortunnaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scalarParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protoPoolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockUpRewardsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWithdrawFeeBasePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBasePointsPerDistribution\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stakingTokensMask\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rewardTokensMask\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"}],\"internalType\":\"struct FortunnaLib.CustomPoolParameters\",\"name\":\"custom\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IFortunnaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokensBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"enum FortunnaPool.Fee\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Fortunna Team\",\"errors\":{\"DistributionEnded(uint256)\":[{\"details\":\"An error to be reverted if the pool expired.\",\"params\":{\"timeDifference\":\"A time how long the pool is expired.\"}}],\"DistributionNotStarted(uint256)\":[{\"details\":\"An error to be reverted if the pool has not yet been started.\",\"params\":{\"timeDifference\":\"A time how long befire the pool is starting to work.\"}}],\"InvalidScalar(uint256,string)\":[{\"details\":\"An error to be reverted if some scalar property of the data structure was addressed wrongly.\",\"params\":{\"comment\":\"Some comment as to what kind of a data structure property this is.\",\"scalar\":\"A scalar.\"}}],\"NotAuthorized(bytes32,address)\":[{\"details\":\"An error to be reverted if an `entity` does not possess the `role`.\",\"params\":{\"entity\":\"An entity violating authorization.\",\"role\":\"A role an entity doesn't posess.\"}}],\"NotEnoughRewardToDistribute(uint256,uint256)\":[{\"details\":\"An error to be reverted if the pool lacks the rewards amount to distribute.\"}],\"NotEnoughStaked(uint256,uint256)\":[{\"details\":\"An error to be reverted if some staker did not satisfy minimum limitations for the stake operation.\",\"params\":{\"amount\":\"An actual stake amount provided.\",\"limit\":\"A minimum limit to be satisfied.\"}}],\"TooMuchStaked(uint256,uint256)\":[{\"details\":\"An error to be reverted if some staker did not satisfy maximum limitations for the stake operation.\",\"params\":{\"amount\":\"An actual stake amount provided.\",\"limit\":\"A maximum limit to be satisfied.\"}}]},\"events\":{\"EmergencyWithdraw(address,uint256)\":{\"params\":{\"amount\":\"An amount of Fortuna Dust to be withdrawn.\",\"user\":\"A user (staker) address.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"PartDistributed(uint256)\":{\"params\":{\"partOfTotalRewards\":\"An exact amount of the part.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RewardAdded(uint256)\":{\"params\":{\"reward\":\"An exact amount of the total rewards.\"}},\"RewardPaid(address,uint256)\":{\"params\":{\"reward\":\"A reward Fortuna Dust paid to the user.\",\"user\":\"A user (staker) address.\"}},\"Staked(address,uint256)\":{\"params\":{\"amount\":\"Amount of the Fortuna Dust staked.\",\"user\":\"A user (staker) address.\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Withdrawn(address,uint256)\":{\"params\":{\"amount\":\"An amount of the Fortuna Dust to be withdrawn.\",\"user\":\"A user (staker) address.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateFortunnaTokens(uint256[2][],address)\":{\"params\":{\"fortunnaTokenAddress\":\"A corresponding Fortuna Dust contract.\",\"initialAmounts\":\"A set of pairs of <index of the underlying token, an amount of this token>. \"},\"returns\":{\"amountToMint\":\"An amount of the Fortuna Dust minted.\"}},\"getAccumulatedFeesAmount(uint8)\":{\"params\":{\"fee\":\"A type of the fees.\"},\"returns\":{\"_0\":\"An amount claimable for the admin.\"}},\"initialize(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))\":{\"params\":{\"poolOwner\":\"An owner of the pool address.\",\"poolParameters\":\"A scalar parameters of the pool.\",\"poolParametersArrays\":\"A vector parameters of the pool.\"}},\"pause()\":{\"details\":\"Could be called only by the admin.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingRewards(address)\":{\"params\":{\"user\":\"A user (staker) address.\"},\"returns\":{\"_0\":\"An amount of rewards that belongs to the `user`.\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"An amount of the Fortuna Dust to be staked.\"}},\"unpause()\":{\"details\":\"Could be called only by the admin.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"An amount of Fortuna Dust to be withdrawn.\"}},\"withdrawAllFees(address)\":{\"params\":{\"receiver\":\"A receiver of the claimed fees.\"}},\"withdrawFee(address,uint8)\":{\"params\":{\"fee\":\"A type of the fees.\",\"receiver\":\"A receiver of the claimed fees.\"}}},\"stateVariables\":{\"_FEE_LENGTH\":{\"details\":\"A constant that equals to the `type(Fee).max`.\"},\"_accumulatedFees\":{\"details\":\"An internal list of an accumulated fees amounts.\"},\"vectorParams\":{\"details\":\"An internal container of vector parameters of the pool.\"}},\"title\":\"Classic Fortunna Yield Farming pool\",\"version\":1},\"userdoc\":{\"events\":{\"EmergencyWithdraw(address,uint256)\":{\"notice\":\"An event to be emitted when a user performs an emergency withdraw of their staked Fortuna Dust.\"},\"PartDistributed(uint256)\":{\"notice\":\"An event to be emitted when the part of the total reward is set to be distributed.\"},\"RewardAdded(uint256)\":{\"notice\":\"An event to be emitted when the total reward is set up.\"},\"RewardPaid(address,uint256)\":{\"notice\":\"An event to be emitted when a user receives a reward Fortuna Dust.\"},\"Staked(address,uint256)\":{\"notice\":\"An event to be emitted when a user performs the stake.\"},\"Withdrawn(address,uint256)\":{\"notice\":\"An event to be emitted when a user withdraws their staked Fortuna Dust.\"}},\"kind\":\"user\",\"methods\":{\"accRewardTokenPerShare()\":{\"notice\":\"A getter function for the accrued rewards amount per share (deposit).\"},\"addExpectedRewardTokensBalanceToDistribute()\":{\"notice\":\"A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It sets an expected total amount of reward Fortuna Dust to be distributed.\"},\"calculateFortunnaTokens(uint256[2][],address)\":{\"notice\":\"A helper function is to calculate the Fortuna Dust that would be minted when an initial amounts provided.\"},\"emergencyWithdraw()\":{\"notice\":\"One of the main functions - only called when necessary by the staker, it withdraws senders (stakers) funds without getting the reward, so the funds would be returned safely.\"},\"expectedRewardTokensBalanceToDistribute()\":{\"notice\":\"A getter for the variable that stores the total expected amount of Fortuna Dust to be distributed.\"},\"factory()\":{\"notice\":\"A getter function that returns a FortunnaFactory instance address.\"},\"getAccumulatedFeesAmount(uint8)\":{\"notice\":\"An information function for the admin and the public to acquire an accumulated fees.\"},\"getReward()\":{\"notice\":\"One of the main functions - so that the staker could acquire the rewards without having to withdraw his funds.\"},\"initialize(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))\":{\"notice\":\"A function that is to be called when the pool is created by the factory.\"},\"lastRewardTimestamp()\":{\"notice\":\"A getter function for the timestamp when the pool was updated last.\"},\"pause()\":{\"notice\":\"Triggers paused state.\"},\"pendingRewards(address)\":{\"notice\":\"A view function that could get a reward amount belongs to the user.\"},\"providePartOfTotalRewards()\":{\"notice\":\"A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It provides an actual part of the expected total reward Fortuna Dust to the pool and starts distributing.\"},\"providedRewardTokensBalance()\":{\"notice\":\"A getter for the variable that stores the total provided Fortuna Dust tokens provided by the admin.\"},\"requestedRewardTokensToDistribute()\":{\"notice\":\"A getter for the variable that stores the total requested amount of Fortuna Dust to be distrubted.\"},\"rewardToken()\":{\"notice\":\"A getter function for reward Fortuna Dust token address.\"},\"rewardTokensPerSec()\":{\"notice\":\"A getter for the amount of reward Fortuna Dust per second.\"},\"scalarParams()\":{\"notice\":\"A scalar params of the pool;\"},\"stake(uint256)\":{\"notice\":\"One of the main functions - so the sender could stake the Fortuna Dust.\"},\"stakingToken()\":{\"notice\":\"A getter function for staking Fortuna Dust token address.\"},\"totalStakedTokensBalance()\":{\"notice\":\"A getter for the total staked Fortuna Dust amount.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"},\"updatePool()\":{\"notice\":\"A function that updates the pool info. Rewards per seconds, accumulative variables.\"},\"usersInfo(address)\":{\"notice\":\"A getter for the users info struct. (Parameter: A user (staker) address.)\"},\"withdraw(uint256)\":{\"notice\":\"One of the main functions - so the staker could withdraw his staked amounts.\"},\"withdrawAllFees(address)\":{\"notice\":\"An analogical function like `withdrawFee`. But it claims all types of the fees.\"},\"withdrawFee(address,uint8)\":{\"notice\":\"A function that callable only by the admin. It claims an accumulated fees.\"}},\"notice\":\"Deploys Classic Fortunna Yield Farming pool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FortunnaPool.sol\":\"FortunnaPool\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-new/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-new/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FactoryAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/security/Pausable.sol\\\";\\n\\nimport \\\"./libraries/FortunnaLib.sol\\\";\\nimport \\\"./libraries/FortunnaErrorsLib.sol\\\";\\n\\n/// @title A contract that helps to manage the state of the Fortunna contracts.\\n/// @author Fortunna Team\\n/// @notice The contract contains protection from the direct calls and roles management.\\nabstract contract FactoryAuthorized is\\n    Initializable,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\n    address internal immutable __self = address(this);\\n\\n    /// @dev An address of the FortunnaFactory contract.\\n    address internal _factory;\\n\\n    /// @dev A protection from the direct call modifier.\\n    modifier delegatedOnly() {\\n        if (_isInitializing() || __self == address(this)) {\\n            revert FortunnaErrorsLib.NotInitialized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev An internal function that checks if a certain `role` is granted to the sender.\\n    /// @param role A role hash.\\n    function _onlyRoleInFactory(bytes32 role) internal view {\\n        address sender = _msgSender();\\n        if (!IAccessControl(_factory).hasRole(role, sender)) {\\n            revert FortunnaErrorsLib.NotAuthorized(role, sender);\\n        }\\n    }\\n\\n    /// @dev A modifier that allows only the admin sender to proceed.\\n    modifier onlyAdmin() {\\n        // 0x00 == DEFAULT_ADMIN_ROLE\\n        _onlyRoleInFactory(0x00);\\n        _;\\n    }\\n\\n    /// @dev A modifier that allows only a certain `role` bearer to proceed.\\n    /// @param role A role hash.\\n    modifier only(bytes32 role) {\\n        _onlyRoleInFactory(role);\\n        _;\\n    }\\n\\n    /// @dev An internal initializer which stores an address pointer to the FortunnaFactory instance.\\n    /// @param __factory The factory address.\\n    function _initialize(address __factory) internal {\\n        _factory = __factory;\\n    }\\n\\n    /// @notice Triggers paused state.\\n    /// @dev Could be called only by the admin.\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    /// @notice Returns to normal state.\\n    /// @dev Could be called only by the admin.\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x7f4bf73fb66be29507b394e71d3746f22a75ce7181391eff19e5ed166391db4c\",\"license\":\"MIT\"},\"contracts/FortunnaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IFortunnaFactory.sol\\\";\\nimport \\\"./interfaces/IFortunnaPool.sol\\\";\\nimport \\\"./interfaces/IFortunnaToken.sol\\\";\\nimport \\\"./FactoryAuthorized.sol\\\";\\n\\n/// @title Classic Fortunna Yield Farming pool\\n/// @author Fortunna Team\\n/// @notice Deploys Classic Fortunna Yield Farming pool.\\ncontract FortunnaPool is IFortunnaPool, FactoryAuthorized {\\n    using Clones for address;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IFortunnaToken;\\n    using FortunnaLib for bytes32;\\n\\n    /// @dev A struct to hold an info about a user.\\n    struct UserInfo {\\n        // An amount of staking Fortuna Dust. \\n        uint256 amount;\\n        // An amount of reward Fortuna Dust claimable.\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @dev An enumeration that holds the types of fees that are collected from the pool operations.\\n    enum Fee {\\n        GET_REWARD,\\n        STAKE,\\n        WITHDRAW\\n    }\\n    /// @dev A constant that equals to the `type(Fee).max`.\\n    uint256 private constant _FEE_LENGTH = 3;\\n\\n    /// @notice A scalar params of the pool;\\n    FortunnaLib.PoolParameters public scalarParams;\\n\\n    /// @notice A getter function for staking Fortuna Dust token address.\\n    IFortunnaToken public stakingToken;\\n    /// @notice A getter function for reward Fortuna Dust token address.\\n    IFortunnaToken public rewardToken;\\n\\n    /// @notice A getter function for the timestamp when the pool was updated last.\\n    uint256 public lastRewardTimestamp;\\n    /// @notice A getter function for the accrued rewards amount per share (deposit).\\n    uint256 public accRewardTokenPerShare;\\n\\n    /// @notice A getter for the amount of reward Fortuna Dust per second.\\n    uint256 public rewardTokensPerSec;\\n\\n    /// @notice A getter for the total staked Fortuna Dust amount.\\n    uint256 public totalStakedTokensBalance;\\n\\n    /// @notice A getter for the variable that stores the total expected amount of Fortuna Dust to be distributed.\\n    uint256 public expectedRewardTokensBalanceToDistribute;\\n    /// @notice A getter for the variable that stores the total requested amount of Fortuna Dust to be distrubted.\\n    uint256 public requestedRewardTokensToDistribute;\\n    /// @notice A getter for the variable that stores the total provided Fortuna Dust tokens provided by the admin.\\n    uint256 public providedRewardTokensBalance;\\n\\n    /// @notice A getter for the users info struct. (Parameter: A user (staker) address.)\\n    mapping(address => UserInfo) public usersInfo;\\n\\n    /// @dev An internal list of an accumulated fees amounts.\\n    uint256[_FEE_LENGTH] internal _accumulatedFees;\\n\\n    /// @dev An internal container of vector parameters of the pool.\\n    FortunnaLib.PoolParametersArrays internal vectorParams;\\n\\n    /// @inheritdoc IFortunnaPool\\n    function initialize(\\n        address poolOwner,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external override initializer {\\n        address sender = _msgSender();\\n        IFortunnaFactory __factory = IFortunnaFactory(sender);\\n        scalarParams = poolParameters;\\n        vectorParams = poolParametersArrays;\\n        super._initialize(address(__factory));\\n\\n        uint256 poolIdx = __factory.getPoolsLength() - 1;\\n        address fortunnaTokenPrototype = __factory.getPrototypeAt(\\n            __factory.FORTUNNA_TOKEN_PROTO_INDEX()\\n        );\\n        bytes32 stakingTokenDeploySalt = keccak256(abi.encodePacked(poolIdx, true));\\n        bytes32 rewardTokenDeploySalt = keccak256(abi.encodePacked(poolIdx, false));\\n\\n        stakingToken = IFortunnaToken(\\n            fortunnaTokenPrototype.cloneDeterministic(stakingTokenDeploySalt)\\n        );\\n        rewardToken = IFortunnaToken(\\n            fortunnaTokenPrototype.cloneDeterministic(rewardTokenDeploySalt)\\n        );\\n        stakingToken.initialize(true, poolParameters, poolParametersArrays);\\n        rewardToken.initialize(false, poolParameters, poolParametersArrays);\\n\\n        uint256[] memory amounts = new uint256[](poolParametersArrays.utilizingTokens.length);\\n        for (uint256 i = 0; i < poolParametersArrays.initialDepositAmounts.length; i++) {\\n            amounts[poolParametersArrays.initialDepositAmounts[i][0]] = poolParametersArrays.initialDepositAmounts[i][1];\\n        }\\n        stakingToken.mint(poolOwner, amounts);\\n\\n        for (uint256 i = 0; i < poolParametersArrays.initialRewardAmounts.length; i++) {\\n            amounts[poolParametersArrays.initialRewardAmounts[i][0]] = poolParametersArrays.initialRewardAmounts[i][1];\\n        }\\n        rewardToken.mint(poolOwner, amounts);\\n        \\n        // uint256 amountToMint = calculateFortunnaTokens(\\n        //     poolParametersArrays.initialDepositAmounts,\\n        //     address(stakingToken)\\n        // );\\n        // if (amountToMint > 0) {\\n        //     stakingToken.mint(poolOwner, amountToMint);\\n        //     amountToMint = 0;\\n        // }\\n\\n        // amountToMint = calculateFortunnaTokens(\\n        //     poolParametersArrays.initialRewardAmounts,\\n        //     address(rewardToken)\\n        // );\\n        // if (amountToMint > 0) {\\n        //     rewardToken.mint(poolOwner, amountToMint);\\n        // }\\n    }\\n\\n    /// @notice A helper function is to calculate the Fortuna Dust that would be minted when an initial amounts provided.\\n    /// @param initialAmounts A set of pairs of <index of the underlying token, an amount of this token>. \\n    /// @param fortunnaTokenAddress A corresponding Fortuna Dust contract.\\n    /// @return amountToMint An amount of the Fortuna Dust minted.\\n    function calculateFortunnaTokens(\\n        uint256[2][] memory initialAmounts,\\n        address fortunnaTokenAddress\\n    ) public view returns (uint256 amountToMint) {\\n        for (uint256 i = 0; i < initialAmounts.length; i++) {\\n            uint256[2] memory pair = initialAmounts[i];\\n            if (pair[1] == 0) continue;\\n            amountToMint += IFortunnaToken(fortunnaTokenAddress)\\n                .calcFortunnaTokensInOrOutPerUnderlyingToken(i, pair[1]);\\n        }\\n    }\\n\\n    /// @notice A view function that could get a reward amount belongs to the user.\\n    /// @param user A user (staker) address.\\n    /// @return An amount of rewards that belongs to the `user`.\\n    function pendingRewards(address user) external view returns (uint256) {\\n        UserInfo storage userInfo = usersInfo[user];\\n        uint256 _accRewardTokenPerShare = accRewardTokenPerShare;\\n        uint256 _stakingTokenBalance = totalStakedTokensBalance;\\n        if (block.timestamp > lastRewardTimestamp && _stakingTokenBalance > 0) {\\n            uint256 reward = (block.timestamp - lastRewardTimestamp) *\\n                rewardTokensPerSec;\\n            _accRewardTokenPerShare +=\\n                (reward * FortunnaLib.PRECISION) /\\n                _stakingTokenBalance;\\n        }\\n        return\\n            (userInfo.amount * _accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION -\\n            userInfo.rewardDebt;\\n    }\\n\\n    /// @dev An internal function that requests from the provided rewards a part to distribute.\\n    /// @param amount An amount of Fortuna Dust to distribute.\\n    function _provideRewardTokens(uint256 amount) internal {\\n        requestedRewardTokensToDistribute += amount;\\n        if (requestedRewardTokensToDistribute > providedRewardTokensBalance) {\\n            revert FortunnaErrorsLib.NotEnoughRewardToDistribute(\\n                providedRewardTokensBalance,\\n                requestedRewardTokensToDistribute\\n            );\\n        }\\n    }\\n\\n    /// @notice A function that updates the pool info. Rewards per seconds, accumulative variables.\\n    function updatePool() public {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n        if (totalStakedTokensBalance == 0) {\\n            lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 reward = (block.timestamp - lastRewardTimestamp) *\\n            rewardTokensPerSec;\\n        _provideRewardTokens(reward);\\n        accRewardTokenPerShare +=\\n            (rewardTokensPerSec * FortunnaLib.PRECISION) /\\n            totalStakedTokensBalance;\\n        lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    /// @dev A validation internal function that checks if the pool is still functioning.\\n    function _checkTimeIntervals() internal view {\\n        if (block.timestamp < scalarParams.startTimestamp) {\\n            revert FortunnaErrorsLib.DistributionNotStarted(\\n                scalarParams.startTimestamp - block.timestamp\\n            );\\n        }\\n        if (block.timestamp > scalarParams.endTimestamp) {\\n            revert FortunnaErrorsLib.DistributionEnded(\\n                block.timestamp - scalarParams.endTimestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice One of the main functions - so the sender could stake the Fortuna Dust.\\n    /// @param amount An amount of the Fortuna Dust to be staked.\\n    function stake(uint256 amount) external nonReentrant {\\n        if (amount > scalarParams.maxStakeAmount) {\\n            revert FortunnaErrorsLib.TooMuchStaked(\\n                amount,\\n                scalarParams.maxStakeAmount\\n            );\\n        }\\n        if (amount < scalarParams.minStakeAmount) {\\n            revert FortunnaErrorsLib.NotEnoughStaked(\\n                amount,\\n                scalarParams.minStakeAmount\\n            );\\n        }\\n        _checkTimeIntervals();\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        _getReward();\\n        stakingToken.safeTransferFrom(sender, address(this), amount);\\n        if (scalarParams.depositWithdrawFeeBasePoints > 0) {\\n            uint256 fee = (amount * scalarParams.depositWithdrawFeeBasePoints) /\\n                FortunnaLib.BASE_POINTS_MAX;\\n            _accumulatedFees[uint256(Fee.STAKE)] += fee;\\n            amount -= fee;\\n        }\\n        totalStakedTokensBalance += amount;\\n        userInfo.amount += amount;\\n        userInfo.rewardDebt =\\n            (userInfo.amount * accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION;\\n        emit Staked(sender, amount);\\n    }\\n\\n    /// @notice One of the main functions - so the staker could withdraw his staked amounts.\\n    /// @param amount An amount of Fortuna Dust to be withdrawn.\\n    function withdraw(uint256 amount) external nonReentrant {\\n        _checkTimeIntervals();\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        if (userInfo.amount < amount) {\\n            revert FortunnaErrorsLib.InvalidScalar(\\n                amount,\\n                \\\"cannotWithdrawThisMuch\\\"\\n            );\\n        }\\n        _getReward();\\n        userInfo.amount -= amount;\\n        userInfo.rewardDebt =\\n            (userInfo.amount * accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION;\\n        totalStakedTokensBalance -= amount;\\n        if (scalarParams.depositWithdrawFeeBasePoints > 0) {\\n            uint256 fee = (amount * scalarParams.depositWithdrawFeeBasePoints) /\\n                FortunnaLib.BASE_POINTS_MAX;\\n            _accumulatedFees[uint256(Fee.WITHDRAW)] += fee;\\n            amount -= fee;\\n        }\\n        stakingToken.safeTransfer(sender, amount);\\n        emit Withdrawn(sender, amount);\\n    }\\n\\n    /// @dev An internal helper function that recalculates an amount of rewards that belongs to a sender.\\n    function _getReward() internal {\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        updatePool();\\n        uint256 pending = (userInfo.amount * accRewardTokenPerShare) /\\n            FortunnaLib.PRECISION -\\n            userInfo.rewardDebt;\\n        uint256 startTimestamp = scalarParams.startTimestamp;\\n\\n        uint256 fee = 0;\\n        if (\\n            pending > 0 &&\\n            block.timestamp > startTimestamp &&\\n            block.timestamp <\\n            startTimestamp + scalarParams.minLockUpRewardsPeriod &&\\n            scalarParams.earlyWithdrawalFeeBasePoints > 0\\n        ) {\\n            fee =\\n                (pending * scalarParams.earlyWithdrawalFeeBasePoints) /\\n                FortunnaLib.BASE_POINTS_MAX;\\n            _accumulatedFees[uint256(Fee.GET_REWARD)] += fee;\\n            pending -= fee;\\n        }\\n\\n        _safeRewardTransfer(sender, pending);\\n        emit RewardPaid(sender, pending);\\n        uint256 pendingAndFee = pending + fee;\\n        requestedRewardTokensToDistribute -= pendingAndFee;\\n        providedRewardTokensBalance -= pendingAndFee;\\n        _recalcTokensPerSec();\\n    }\\n\\n    /// @notice One of the main functions - so that the staker could acquire the rewards without having to withdraw his funds.\\n    function getReward() external nonReentrant {\\n        _checkTimeIntervals();\\n        _getReward();\\n    }\\n\\n    /// @notice One of the main functions - only called when necessary by the staker, it withdraws senders (stakers) funds without getting the reward, so the funds would be returned safely.\\n    function emergencyWithdraw() external {\\n        address sender = _msgSender();\\n        UserInfo storage userInfo = usersInfo[sender];\\n        stakingToken.safeTransfer(sender, userInfo.amount);\\n        emit EmergencyWithdraw(sender, userInfo.amount);\\n        totalStakedTokensBalance -= userInfo.amount;\\n        userInfo.amount = 0;\\n        userInfo.rewardDebt = 0;\\n    }\\n\\n    /// @inheritdoc IFortunnaPool\\n    function factory() external view override returns (address) {\\n        return _factory;\\n    }\\n\\n    /// @notice An information function for the admin and the public to acquire an accumulated fees.\\n    /// @param fee A type of the fees.\\n    /// @return An amount claimable for the admin.\\n    function getAccumulatedFeesAmount(Fee fee) external view returns (uint256) {\\n        return _accumulatedFees[uint256(fee)];\\n    }\\n\\n    /// @notice A function that callable only by the admin. It claims an accumulated fees.\\n    /// @param receiver A receiver of the claimed fees.\\n    /// @param fee A type of the fees.\\n    function withdrawFee(address receiver, Fee fee) public onlyAdmin {\\n        if (fee == Fee.GET_REWARD) {\\n            _safeRewardTransfer(receiver, _accumulatedFees[uint256(fee)]);\\n        }\\n        if (fee == Fee.STAKE || fee == Fee.WITHDRAW) {\\n            stakingToken.safeTransfer(receiver, _accumulatedFees[uint256(fee)]);\\n        }\\n    }\\n\\n    /// @notice An analogical function like `withdrawFee`. But it claims all types of the fees.\\n    /// @param receiver A receiver of the claimed fees.\\n    function withdrawAllFees(address receiver) external onlyAdmin {\\n        for (uint256 i = 0; i < _accumulatedFees.length; i++) {\\n            withdrawFee(receiver, Fee(i));\\n        }\\n    }\\n\\n    /// @notice A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It sets an expected total amount of reward Fortuna Dust to be distributed.\\n    function addExpectedRewardTokensBalanceToDistribute() \\n        external \\n        only(FortunnaLib.POOL_REWARDS_PROVIDER)\\n    {\\n        uint256 amount = rewardToken.balanceOf(_msgSender()); \\n        expectedRewardTokensBalanceToDistribute += amount;\\n        emit RewardAdded(amount);\\n    }\\n\\n    /// @notice A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It provides an actual part of the expected total reward Fortuna Dust to the pool and starts distributing.\\n    function providePartOfTotalRewards()\\n        external\\n        only(FortunnaLib.POOL_REWARDS_PROVIDER)\\n    {\\n        uint256 amount = (expectedRewardTokensBalanceToDistribute *\\n            scalarParams.totalRewardBasePointsPerDistribution) /\\n            FortunnaLib.BASE_POINTS_MAX;\\n        rewardToken.safeTransferFrom(_msgSender(), address(this), amount);\\n        providedRewardTokensBalance += amount;\\n        _recalcTokensPerSec();\\n        emit PartDistributed(amount);\\n    }\\n\\n    /// @dev An internal function that recalculates total reward Fortuna Dust per second.\\n    function _recalcTokensPerSec() internal {\\n        rewardTokensPerSec = providedRewardTokensBalance / (scalarParams.endTimestamp - scalarParams.startTimestamp);\\n    }\\n\\n    /// @dev An internal function that makes transfers of the reward Fortuna Dust safely and more gas efficient.\\n    function _safeRewardTransfer(address to, uint256 amount) internal {\\n        if (amount == 0) return;\\n        if (amount > requestedRewardTokensToDistribute) {\\n            IERC20(rewardToken).safeTransfer(\\n                to,\\n                requestedRewardTokensToDistribute\\n            );\\n        } else {\\n            IERC20(rewardToken).safeTransfer(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6393c476d7bbe245d19fe1cc1846713c8aaa4dd1befb8035631594e087b667f\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"../libraries/FortunnaErrorsLib.sol\\\";\\nimport \\\"../libraries/FortunnaBitMaskLib.sol\\\";\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\nimport \\\"./INativeTokenReceivable.sol\\\";\\n\\n/// @title The interface for the Fortunna Yield Farming pools factory.\\n/// @author Fortunna Team\\n/// @notice The Fortunna Yield Faming pools factory facilitates creation of Fortunna pools and control over the protocol fees.\\ninterface IFortunnaFactory is INativeTokenReceivable {\\n    /// @notice An event to be emitted when the pool is created.\\n    /// @param pool An address of the newly created pool.\\n    event PoolCreated(address indexed pool);\\n\\n    /// @notice A getter function to acquire the payment info for one pool deploy.\\n    /// @return token An address of the token to be held as payment asset.\\n    /// @return cost An actual cost of the pool deploy.\\n    function paymentInfo() external view returns (address token, uint256 cost);\\n\\n    /// @notice An admin setter function to adjust payment info.\\n    /// @param _paymentInfo A struct to hold new payment info.\\n    function setPaymentInfo(\\n        FortunnaLib.PaymentInfo calldata _paymentInfo\\n    ) external;\\n\\n    /// @notice An admin function to create to add deployed prototype.\\n    /// @param prototype An address of the deployed prototype.\\n    function addPrototype(address prototype) external;\\n\\n    /// @notice A public helper function to make mask generation quicker.\\n    /// @param flags An array of booleans to be converted to a mask.\\n    function generateMask(\\n        bool[] calldata flags\\n    ) external pure returns (bytes32);\\n\\n    /// @notice An admin function to send all collected payments in any tokens to the specific receiver.\\n    /// @param token A token to be send to.\\n    /// @param who A receiver of the tokens.\\n    /// @param amount An exact amount of the tokens to be sent.\\n    function sendCollectedTokens(\\n        address token,\\n        address payable who,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice The main public function. It is deploying the pool according to the pool parameters and it's prototype.\\n    /// @param poolParameters A scalar parameters for the pool.\\n    /// @param poolParametersArrays A vector parameters for the pool.\\n    function createPool(\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external payable returns (address poolAddress);\\n\\n    /// @notice A public getter function to acquire a pool address at the specific index.\\n    /// @param index An index in the pools enumerable set.\\n    function getPoolAt(uint256 index) external view returns (address);\\n\\n    /// @notice A public getter function to acquire the total amount of deployed pools.\\n    function getPoolsLength() external view returns (uint256);\\n\\n    /// @notice A public getter function to acquire a prototype address at the specific index.\\n    /// @param index An index in the pools enumerable set.\\n    function getPrototypeAt(uint256 index) external view returns (address);\\n\\n    /// @notice A public getter function to acquire the total amount of deployed prototypes.\\n    function getPrototypesLength() external view returns (uint256);\\n\\n    /// @notice A helper function that could predict an address for the pool with a `poolProtoIdx` parameter.\\n    /// @param poolProtoIdx An index of the pool prototype in the factory.\\n    /// @return result A predicted address of the pool.\\n    /// @return salt A salt bytes to deploy the pool to the predicted address.\\n    function predictPoolAddress(\\n        uint256 poolProtoIdx\\n    ) external view returns (address result, bytes32 salt);\\n\\n    /// @notice A helper function that could predict an address of the Fortuna Dust token for a specific pool.\\n    /// @param poolProtoIdx A pool prototype index to which the token would be connected to.\\n    /// @param poolIdx A specific already deployed pool index from the factory.\\n    /// @param isStakingOrReward Is a Fortuna Dust token would be utilized as a staking or a reward token? True - staking, False - reward.\\n    /// @return result An address of the would be deployed token.\\n    /// @return salt A salt bytes to deploy such a token.\\n    function predictFortunnaTokenAddress(\\n        uint256 poolProtoIdx,\\n        uint256 poolIdx,\\n        bool isStakingOrReward\\n    ) external view returns (address result, bytes32 salt);\\n\\n    /// @notice A constant that indicates under which index in the factory there is a Fortuna Dust token prototype.\\n    function FORTUNNA_TOKEN_PROTO_INDEX() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcc188d7d7059564169bc05d0ee9dec9d15c996605f9b3c7488432f26bd4467c5\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\n\\n/// @title An interface to implement by the contract of the Fortuna Pool.\\n/// @author Fortunna Team\\n/// @notice The interface contains events and initializing function of the pool.\\ninterface IFortunnaPool {\\n    /// @notice An event to be emitted when the part of the total reward is set to be distributed.\\n    /// @param partOfTotalRewards An exact amount of the part.\\n    event PartDistributed(uint256 partOfTotalRewards);\\n\\n    /// @notice An event to be emitted when the total reward is set up.\\n    /// @param reward An exact amount of the total rewards.\\n    event RewardAdded(uint256 reward);\\n\\n    /// @notice An event to be emitted when a user performs the stake.\\n    /// @param user A user (staker) address.\\n    /// @param amount Amount of the Fortuna Dust staked.\\n    event Staked(address indexed user, uint256 amount);\\n\\n    /// @notice An event to be emitted when a user withdraws their staked Fortuna Dust.\\n    /// @param user A user (staker) address.\\n    /// @param amount An amount of the Fortuna Dust to be withdrawn.\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    /// @notice An event to be emitted when a user receives a reward Fortuna Dust.\\n    /// @param user A user (staker) address.\\n    /// @param reward A reward Fortuna Dust paid to the user.\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    /// @notice An event to be emitted when a user performs an emergency withdraw of their staked Fortuna Dust.\\n    /// @param user A user (staker) address.\\n    /// @param amount An amount of Fortuna Dust to be withdrawn.\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    /// @notice A getter function that returns a FortunnaFactory instance address.\\n    function factory() external view returns (address);\\n\\n    /// @notice A function that is to be called when the pool is created by the factory.\\n    /// @param poolOwner An owner of the pool address.\\n    /// @param poolParameters A scalar parameters of the pool.\\n    /// @param poolParametersArrays A vector parameters of the pool.\\n    function initialize(\\n        address poolOwner,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd5b6da214028d05d9cd532bcd50e070c2ca7edcc480e59e59e7d79240192e825\",\"license\":\"MIT\"},\"contracts/interfaces/IFortunnaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../libraries/FortunnaLib.sol\\\";\\nimport \\\"./INativeTokenReceivable.sol\\\";\\n\\n/// @title An interface to implement by the contract of the Fortuna Dust.\\n/// @author Fortunna Team\\n/// @notice The interface contains functions of the mint, burn and calculations of the dust.\\ninterface IFortunnaToken is IERC20, IERC20Metadata, INativeTokenReceivable {\\n    /// @notice A mint function that could be called either by anyone or only by an admin. Depends if the token is initialized as staking or reward token.\\n    /// @param user A user (minter) address.\\n    /// @param amount An amount to be minted.\\n    function mint(address user, uint256 amount) external payable;\\n\\n    function mint(\\n        address user,\\n        uint256[] calldata amounts\\n    ) external payable;\\n\\n    /// @notice A burn function that could be called either by anyone or only by an admin. Depends if the token is initialized as staking or reward token.\\n    /// @param user A user (burner) address.\\n    /// @param amount An amount to be burned.\\n    function burn(address payable user, uint256 amount) external;\\n\\n    /// @notice A helper function to calculate an amount of Fortuna Dust to be minted/burned if this amount of an underlying token is placed/taken as a collateral. \\n    /// @param underlyingTokenIdx A collateral token index.\\n    /// @param underlyingTokenAmountInOrOut An amount of the collateral token to be placed in or out.\\n    /// @return fortunnaTokensAmountInOrOut An amount of Fortuna Dust minted or burned.\\n    function calcFortunnaTokensInOrOutPerUnderlyingToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 underlyingTokenAmountInOrOut\\n    ) external view returns (uint256 fortunnaTokensAmountInOrOut);\\n\\n    /// @notice A helper function to calculate an amount of collateral tokens to be gotten out or placed in if a specified amount of Fortuna Dust provided.\\n    /// @param underlyingTokenIdx A collateral token index in the factory.\\n    /// @param amountToMintOrBurn An amount of the Fortuna Dust to be minted or burned.\\n    /// @return underlyingTokensInOrOut An amount of collateral token to be placed in or taken out.\\n    function calcUnderlyingTokensInOrOutPerFortunnaToken(\\n        uint256 underlyingTokenIdx,\\n        uint256 amountToMintOrBurn\\n    ) external view returns (uint256 underlyingTokensInOrOut);\\n\\n    /// @notice An initializing function that could be called only once and only by the Pool contract.\\n    /// @param stakingOrRewardTokens Decide whether the Fortuna Dust token is staking or reward.\\n    /// @param poolParameters The scalar parameters.\\n    /// @param poolParametersArrays The vector parameters. \\n    function initialize(\\n        bool stakingOrRewardTokens,\\n        FortunnaLib.PoolParameters calldata poolParameters,\\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa939f08eb4576b606b33ad8aaa8df0399349c01bb9342847d6ddbd7b87ed515e\",\"license\":\"MIT\"},\"contracts/interfaces/INativeTokenReceivable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title The interface for the Fortunna Yield Farming smart-contracts that can receive native tokens.\\n/// @author Fortunna Team\\n/// @notice The interface allows smart-contracts to use an event to document all native tokens incoms.\\ninterface INativeTokenReceivable {\\n    /// @notice An event to be fired when native tokens arrive to the fabric.\\n    /// @param amount An exact amount of the tokens arrived.\\n    event NativeTokenReceived(uint256 indexed amount);\\n}\\n\",\"keccak256\":\"0x4e36b4ed7155a888f381ce07e1e964291db1efb9d823edf6107187ed2fdc64e0\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaBitMaskLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FortunnaErrorsLib.sol\\\";\\n\\n/// @title Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.\\n/// @author Fortunna Team\\n/// @notice A lib holding bit mas manipulation functionality.\\nlibrary FortunnaBitMaskLib {\\n    /// @dev A helper function to generate bit masks from boolean array.\\n    /// @param flags A boolean array.\\n    function getMaskFromBooleans(\\n        bool[] calldata flags\\n    ) internal pure returns (bytes32 result) {\\n        if (flags.length > 256) {\\n            revert FortunnaErrorsLib.InvalidLength(\\n                flags.length,\\n                \\\"flagsLength>256\\\"\\n            );\\n        }\\n        for (uint256 i = 0; i < flags.length; i++) {\\n            if (flags[i]) {\\n                result |= bytes32(i == 0 ? 1 : 1 << i);\\n            }\\n        }\\n    }\\n\\n    /// @dev A helper function to check if some bit is up in the mask.\\n    /// @param mask A mask to be checked.\\n    /// @param index An index of the bit to be checked.\\n    function isBitUp(\\n        bytes32 mask,\\n        uint8 index\\n    ) internal pure returns (bool result) {\\n        uint256 counter = index == 0 ? 1 : 1 << index;\\n        return bytes32(counter) == mask & bytes32(counter);\\n    }\\n}\\n\",\"keccak256\":\"0x51229900d92e0c0ff03e279bfd36781868a1c3f6724031708d3b4c0885d7a30e\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Fortunna Yield Farming pools lib that contains all the errors.\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors.\\nlibrary FortunnaErrorsLib {\\n    /// @dev An error to be reverted if an `account` would be\\n    /// banned.\\n    /// @param account A banned user.\\n    error Banned(address account);\\n\\n    /// @dev An error to be reverted if an unknown prototype name would be used to deploy\\n    /// a pool or other utility smart-contract.\\n    /// @param prototypeIndex An index of prototype smart-contract.\\n    error UnknownPrototypeIndex(uint256 prototypeIndex);\\n\\n    /// @dev An error to be reverted if the pool deployer didn't payed enough for it.\\n    /// @param amount An actual amount the deployer sent.\\n    error NotEnoughtPayment(uint256 amount);\\n\\n    /// @dev An error to be reverted if some data structures `length` is not defined correctly.\\n    /// @param length An actual length of the data structure.\\n    /// @param comment Some comment as to what kind of a data structure has been addressed to.\\n    error InvalidLength(uint256 length, string comment);\\n\\n    /// @dev An error to be reverted if in some two addresses arrays the elements aren't unique.\\n    /// @param someAddress An address which is equal in both arrays.\\n    error NotUniqueAddresses(address someAddress);\\n\\n    /// @dev An error to be reverted if the contract is being deployed at a wrong chain.\\n    /// @param chainId An actual chain ID.\\n    error ForeignChainId(uint256 chainId);\\n\\n    /// @dev An error to be reverted if some Euclidean interval hasn't been defined correctly.\\n    /// @param start A start of the interval.\\n    /// @param finish An end of the interval.\\n    /// @param comment Some comment as to what kind of an interval this is.\\n    error IncorrectInterval(uint256 start, uint256 finish, string comment);\\n\\n    /// @dev An error to be reverted if some base points were defined out of their boundaries.\\n    /// @param basePoints An actual base points amount.\\n    /// @param comment Some comment as to what kind of a base points this is.\\n    error IncorrectBasePoints(uint256 basePoints, string comment);\\n\\n    /// @dev An error to be reverted if an `enity` is already exists in some address set.\\n    /// @param entity An entity address.\\n    error AddressAlreadyExists(address entity);\\n\\n    /// @dev An error to be reverted if the contract was being called before the initialization.\\n    error NotInitialized();\\n\\n    /// @dev An error to be reverted if an `entity` does not possess the `role`.\\n    /// @param role A role an entity doesn't posess.\\n    /// @param entity An entity violating authorization.\\n    error NotAuthorized(bytes32 role, address entity);\\n\\n    /// @dev An error to be reverted if some scalar property of the data structure was addressed wrongly.\\n    /// @param scalar A scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error InvalidScalar(uint256 scalar, string comment);\\n\\n    /// @dev An error to be reverted if some pair of scalars is not equal, but they should be.\\n    /// @param x A first scalar.\\n    /// @param y A second scalar.\\n    /// @param comment Some comment as to what kind of a data structure property this is.\\n    error AreNotEqual(uint256 x, uint256 y, string comment);\\n\\n    /// @dev An error to be reverted if some staker did not satisfy minimum limitations for the stake operation.\\n    /// @param amount An actual stake amount provided.\\n    /// @param limit A minimum limit to be satisfied.\\n    error NotEnoughStaked(uint256 amount, uint256 limit);\\n\\n    /// @dev An error to be reverted if some staker did not satisfy maximum limitations for the stake operation.\\n    /// @param amount An actual stake amount provided.\\n    /// @param limit A maximum limit to be satisfied.\\n    error TooMuchStaked(uint256 amount, uint256 limit);\\n\\n    /// @dev An error to be reverted if the pool expired.\\n    /// @param timeDifference A time how long the pool is expired.\\n    error DistributionEnded(uint256 timeDifference);\\n\\n    /// @dev An error to be reverted if the pool has not yet been started.\\n    /// @param timeDifference A time how long befire the pool is starting to work.\\n    error DistributionNotStarted(uint256 timeDifference);\\n\\n    /// @dev An error to be reverted if the pool lacks the rewards amount to distribute.\\n    error NotEnoughRewardToDistribute(uint256 provided, uint256 actual);\\n}\\n\",\"keccak256\":\"0x3fe2278065d3b4c6c6736eee09510160bab4c767a5c1c113f2bf1b420a9b06fe\",\"license\":\"MIT\"},\"contracts/libraries/FortunnaLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <=0.8.20;\\n\\n/// @title Canonical Fortunna Yield Farming pools lib\\n/// @author Fortunna Team\\n/// @notice A lib holding default errors, helpers functions and constants.\\nlibrary FortunnaLib {\\n    /// @dev A struct to hold some custom parameters for the pool that aren't external protocol agnostic.\\n    struct CustomPoolParameters {\\n        // An address of the Uniswap V3 NonfungiblePositionManager contract.\\n        address nonfungiblePositionManager;\\n    }\\n\\n    /// @dev A struct to hold pools scalar deploy parameters.\\n    struct PoolParameters {\\n        // An index of pool prototype in the factory list of prototypes.\\n        uint256 protoPoolIdx;\\n        // Start of the pool reward distribution period.\\n        uint256 startTimestamp;\\n        // End of the pool reward distribution period.\\n        uint256 endTimestamp;\\n        // Minimal amount for user to be able to deposit to the pool.\\n        uint256 minStakeAmount;\\n        // Maximal amount for user to be able to deposit to the pool.\\n        uint256 maxStakeAmount;\\n        // A time duration in seconds for a user to wait until they could receiver their rewards.\\n        uint256 minLockUpRewardsPeriod;\\n        // A fee amount in base points to be charged from user if they would attempt to receiver their rewards.\\n        uint256 earlyWithdrawalFeeBasePoints;\\n        // A fee amount in base points to be charged from user if they would attempt to perform deposit/withdraw.\\n        uint256 depositWithdrawFeeBasePoints;\\n        // A percent from total reward provided being distributed to stakers.\\n        uint256 totalRewardBasePointsPerDistribution;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is staking token.\\n        bytes32 stakingTokensMask;\\n        // A bit mask to indicate whether the token in `utilizingTokens` is reward token.\\n        bytes32 rewardTokensMask;\\n        CustomPoolParameters custom;\\n    }\\n\\n    /// @dev A struct to hold pools vector deploy parameters.\\n    struct PoolParametersArrays {\\n        // An array of tokens to be used as either reward or staking tokens.\\n        address[] utilizingTokens;\\n        // Array of pairs <index of reward token, initial total reward amount>\\n        uint256[2][] initialRewardAmounts;\\n        // An array of pairs <index of staking token, deposit amount>\\n        uint256[2][] initialDepositAmounts;\\n    }\\n\\n    /// @dev A struct to hold a pay info for pool deployment.\\n    struct PaymentInfo {\\n        // A token address to be accepted as payment.\\n        address paymentToken;\\n        // A payment amount for pool deploy.\\n        uint256 cost;\\n    }\\n\\n    /// @notice A role hash to mark addresses to be held as reward tokens.\\n    bytes32 public constant ALLOWED_REWARD_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_REWARD_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as staking tokens.\\n    bytes32 public constant ALLOWED_STAKING_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_STAKING_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as external reward tokens from another protocols.\\n    bytes32 public constant ALLOWED_EXTERNAL_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_EXTERNAL_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as banned users.\\n    bytes32 public constant BANNED_ROLE = keccak256(\\\"BANNED_ROLE\\\");\\n\\n    /// @notice A role hash to mark addresses to be held as payment for pool deploy tokens.\\n    bytes32 public constant ALLOWED_PAYMENT_TOKEN_ROLE =\\n        keccak256(\\\"ALLOWED_PAYMENT_TOKEN_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant LP_MINTER_BURNER_ROLE =\\n        keccak256(\\\"LP_MINTER_BURNER_ROLE\\\");\\n\\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\\n    bytes32 public constant POOL_REWARDS_PROVIDER =\\n        keccak256(\\\"POOL_REWARDS_PROVIDER\\\");\\n\\n    /// @notice A max of base points. (ex. Like 100 in percents)\\n    uint256 public constant BASE_POINTS_MAX = 10000;\\n\\n    /// @notice A given precision for math operations;\\n    uint256 public constant PRECISION = 1e10;\\n\\n    /// @notice A dead address for floor tokens to be minted\\n    address public constant DEAD_ADDRESS =\\n        0x000000000000000000000000000000000000dEaD;\\n}\\n\",\"keccak256\":\"0x397c16ecc55200397bc740e651295e71ccd2c79edf4baf747392233ae6047789\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405230608052348015610013575f80fd5b505f805462ff0000191690556001805560805161255a6100385f395f505061255a5ff3fe608060405234801561000f575f80fd5b50600436106101bb575f3560e01c806372f702f3116100f3578063c45a015511610093578063dec8a7471161006e578063dec8a7471461040a578063e3161ddd14610413578063f7c618c11461041b578063f8077fae1461042e575f80fd5b8063c45a0155146103e8578063db2e21bc146103f9578063dd69f04f14610401575f80fd5b80638e997622116100ce5780638e997622146103b1578063902c736f146103c457806390aeb57d146103cd578063a694fc3a146103d5575f80fd5b806372f702f31461036b57806373328ce9146103965780638456cb59146103a9575f80fd5b80633813f8751161015e5780634430135a116101395780634430135a146102ef5780634c179042146103025780635c975abb146103155780635d0eaaaf14610330575f80fd5b80633813f875146102d65780633d18b912146102df5780633f4ba83a146102e7575f80fd5b80632e1a7d4d116101995780632e1a7d4d146102945780632fbbb3e5146102a75780633027a704146102ba57806331d7a262146102c3575f80fd5b80630910638a146101bf5780630bbdd007146101db5780631481f800146101e5575b5f80fd5b6101c860175481565b6040519081526020015b60405180910390f35b6101e3610437565b005b600354600454600554600654600754600854600954600a54600b54600c54600d546040805160208101909152600e546001600160a01b031681526102319b9a999897969594939291908c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e0860152610100850152610120840152610140830152516001600160a01b0316610160820152610180016101d2565b6101e36102a2366004611bb7565b61052b565b6101c86102b5366004611c60565b6106b9565b6101c860155481565b6101c86102d1366004611d59565b6107a1565b6101c860135481565b6101e361084f565b6101e3610872565b6101e36102fd366004611d7b565b610883565b6101e3610310366004611d59565b610ef5565b5f5462010000900460ff1660405190151581526020016101d2565b61035661033e366004611d59565b60186020525f90815260409020805460019091015482565b604080519283526020830191909152016101d2565b600f5461037e906001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b6101e36103a4366004611df9565b610f35565b6101e3610ff8565b6101c86103bf366004611e2c565b611009565b6101c860145481565b6101e3611036565b6101e36103e3366004611bb7565b6110ea565b6002546001600160a01b031661037e565b6101e3611266565b6101c860125481565b6101c860165481565b6101e36112f5565b60105461037e906001600160a01b031681565b6101c860115481565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df361046181611372565b6010545f906001600160a01b03166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156104b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104db9190611e45565b90508060155f8282546104ee9190611e70565b90915550506040518181527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b610533611418565b61053b611471565b335f81815260186020526040902080548311156105a657826040516333bf2e9f60e01b815260040161059d918152604060208201819052601690820152750c6c2dcdcdee8aed2e8d0c8e4c2eea8d0d2e69aeac6d60531b606082015260800190565b60405180910390fd5b6105ae6114d8565b82815f015f8282546105c09190611e83565b909155505060125481546402540be400916105da91611e96565b6105e49190611ead565b81600101819055508260145f8282546105fd9190611e83565b9091555050600a541561065157600a545f906127109061061d9086611e96565b6106279190611ead565b90508060196002015f82825461063d9190611e70565b9091555061064d90508185611e83565b9350505b600f54610668906001600160a01b03168385611639565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5846040516106a391815260200190565b60405180910390a250506106b660018055565b50565b5f805b835181101561079a575f8482815181106106d8576106d8611ee0565b60200260200101519050806001600281106106f5576106f5611ee0565b60200201515f036107065750610788565b6020810151604051632f9d937f60e01b81526004810184905260248101919091526001600160a01b03851690632f9d937f90604401602060405180830381865afa158015610756573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061077a9190611e45565b6107849084611e70565b9250505b8061079281611ef4565b9150506106bc565b5092915050565b6001600160a01b0381165f908152601860205260408120601254601454601154421180156107ce57505f81115b15610819575f601354601154426107e59190611e83565b6107ef9190611e96565b9050816108016402540be40083611e96565b61080b9190611ead565b6108159084611e70565b9250505b600183015483546402540be40090610832908590611e96565b61083c9190611ead565b6108469190611e83565b95945050505050565b610857611418565b61085f611471565b6108676114d8565b61087060018055565b565b61087b5f611372565b6108706116a1565b5f54610100900460ff16158080156108a157505f54600160ff909116105b806108ba5750303b1580156108ba57505f5460ff166001145b61091d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059d565b5f805460ff19166001179055801561093e575f805461ff0019166101001790555b338084600361094d8282611f35565b50849050601c61095d8282612131565b5050600280546001600160a01b0319166001600160a01b0383161790555f6001826001600160a01b031663ce883cdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109dd9190611e45565b6109e79190611e83565b90505f826001600160a01b0316631bbb12fc846001600160a01b031663acc9606f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a35573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a599190611e45565b6040518263ffffffff1660e01b8152600401610a7791815260200190565b602060405180830381865afa158015610a92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab69190612215565b604080516020808201869052600160f81b8284015282516021818403018152604183018452805190820120606183018790525f6081840152835160628185030181526082909301909352815191012091925090610b1c6001600160a01b038416836116f4565b600f80546001600160a01b0319166001600160a01b03928316179055610b44908416826116f4565b601080546001600160a01b0319166001600160a01b03928316179055600f5460405163f436f09360e01b815291169063f436f09390610b8c906001908d908d906004016123a0565b5f604051808303815f87803b158015610ba3575f80fd5b505af1158015610bb5573d5f803e3d5ffd5b505060105460405163f436f09360e01b81526001600160a01b03909116925063f436f0939150610bed905f908d908d906004016123a0565b5f604051808303815f87803b158015610c04575f80fd5b505af1158015610c16573d5f803e3d5ffd5b505f9250610c2891508a905080611fb1565b905067ffffffffffffffff811115610c4257610c42611bce565b604051908082528060200260200182016040528015610c6b578160200160208202803683370190505b5090505f5b610c7d60408b018b612012565b9050811015610d2757610c9360408b018b612012565b82818110610ca357610ca3611ee0565b905060400201600160028110610cbb57610cbb611ee0565b602002013582610cce60408d018d612012565b84818110610cde57610cde611ee0565b9050604002015f60028110610cf557610cf5611ee0565b602002013581518110610d0a57610d0a611ee0565b602090810291909101015280610d1f81611ef4565b915050610c70565b50600f5460405163de836ebd60e01b81526001600160a01b039091169063de836ebd90610d5a908e908590600401612441565b5f604051808303815f87803b158015610d71575f80fd5b505af1158015610d83573d5f803e3d5ffd5b505050505f5b610d9660208b018b612012565b9050811015610e4357610dac60208b018b612012565b82818110610dbc57610dbc611ee0565b905060400201600160028110610dd457610dd4611ee0565b6020020135828b8060200190610dea9190612012565b84818110610dfa57610dfa611ee0565b9050604002015f60028110610e1157610e11611ee0565b602002013581518110610e2657610e26611ee0565b602090810291909101015280610e3b81611ef4565b915050610d89565b5060105460405163de836ebd60e01b81526001600160a01b039091169063de836ebd90610e76908e908590600401612441565b5f604051808303815f87803b158015610e8d575f80fd5b505af1158015610e9f573d5f803e3d5ffd5b50505050505050505050508015610eef575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610efe5f611372565b5f5b6003811015610f3157610f1f828260028111156103a4576103a4611ecc565b80610f2981611ef4565b915050610f00565b5050565b610f3e5f611372565b5f816002811115610f5157610f51611ecc565b03610f8557610f85826019836002811115610f6e57610f6e611ecc565b60038110610f7e57610f7e611ee0565b0154611794565b6001816002811115610f9957610f99611ecc565b1480610fb657506002816002811115610fb457610fb4611ecc565b145b15610f3157610f31826019836002811115610fd357610fd3611ecc565b60038110610fe357610fe3611ee0565b0154600f546001600160a01b03169190611639565b6110015f611372565b6108706117dd565b5f601982600281111561101e5761101e611ecc565b6003811061102e5761102e611ee0565b015492915050565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df361106081611372565b5f6127106003600801546015546110779190611e96565b6110819190611ead565b905061109b336010546001600160a01b031690308461181d565b8060175f8282546110ac9190611e70565b909155506110ba9050611855565b6040518181527fd2904f4877df3057e76c2da3130bd597114a6d0ff8b9952f7c99915a429e73709060200161051f565b6110f2611418565b600754811115611123576007546040516363038b1d60e11b815261059d918391600401918252602082015260400190565b6006548110156111545760065460405163b8d4634360e01b815261059d918391600401918252602082015260400190565b61115c611471565b335f8181526018602052604090206111726114d8565b600f5461118a906001600160a01b031683308661181d565b600a54156111d957600a545f90612710906111a59086611e96565b6111af9190611ead565b90508060196001015f8282546111c59190611e70565b909155506111d590508185611e83565b9350505b8260145f8282546111ea9190611e70565b90915550508054839082905f90611202908490611e70565b909155505060125481546402540be4009161121c91611e96565b6112269190611ead565b60018201556040518381526001600160a01b038316907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016106a3565b335f8181526018602052604090208054600f54611290916001600160a01b03909116908490611639565b80546040519081526001600160a01b038316907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a28054601480545f906112e3908490611e83565b90915550505f80825560019091015550565b601154421161130057565b6014545f0361130f5742601155565b5f601354601154426113219190611e83565b61132b9190611e96565b905061133681611877565b6014546402540be40060135461134c9190611e96565b6113569190611ead565b60125f8282546113669190611e70565b90915550504260115550565b5f33600254604051632474521560e21b8152600481018590526001600160a01b0380841660248301529293509116906391d1485490604401602060405180830381865afa1580156113c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e99190612496565b610f315760405163a78e4aa560e01b8152600481018390526001600160a01b038216602482015260440161059d565b60026001540361146a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161059d565b6002600155565b6004544210156114a557600454611489904290611e83565b60405163147fdec360e01b815260040161059d91815260200190565b600554421115610870576005546114bc9042611e83565b604051633652a8cb60e21b815260040161059d91815260200190565b335f8181526018602052604090206114ee6112f5565b5f81600101546402540be400601254845f015461150b9190611e96565b6115159190611ead565b61151f9190611e83565b6004549091505f821580159061153457508142115b801561154b57506008546115489083611e70565b42105b8015611558575060095415155b156115a0576009546127109061156e9085611e96565b6115789190611ead565b90508060195f015f82825461158d9190611e70565b9091555061159d90508184611e83565b92505b6115aa8584611794565b846001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040516115e591815260200190565b60405180910390a25f6115f88285611e70565b90508060165f82825461160b9190611e83565b925050819055508060175f8282546116239190611e83565b909155506116319050611855565b505050505050565b6040516001600160a01b03831660248201526044810182905261169c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118c1565b505050565b6116a9611994565b5f805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760095ff590506001600160a01b03811661178e5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640161059d565b92915050565b805f0361179f575050565b6016548111156117c657601654601054610f31916001600160a01b03909116908490611639565b601054610f31906001600160a01b03168383611639565b6117e56119e2565b5f805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116d73390565b6040516001600160a01b0380851660248301528316604482015260648101829052610eef9085906323b872dd60e01b90608401611665565b6004546005546118659190611e83565b6017546118729190611ead565b601355565b8060165f8282546118889190611e70565b909155505060175460165411156106b65760175460165460405163c006882b60e01b81526004810192909252602482015260440161059d565b5f611915826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a2d9092919063ffffffff16565b905080515f14806119355750808060200190518101906119359190612496565b61169c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059d565b5f5462010000900460ff166108705760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161059d565b5f5462010000900460ff16156108705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161059d565b6060611a3b84845f85611a43565b949350505050565b606082471015611aa45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059d565b5f80866001600160a01b03168587604051611abf91906124d7565b5f6040518083038185875af1925050503d805f8114611af9576040519150601f19603f3d011682016040523d82523d5f602084013e611afe565b606091505b5091509150611b0f87838387611b1a565b979650505050505050565b60608315611b885782515f03611b81576001600160a01b0385163b611b815760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059d565b5081611a3b565b611a3b8383815115611b9d5781518083602001fd5b8060405162461bcd60e51b815260040161059d91906124f2565b5f60208284031215611bc7575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715611c0557611c05611bce565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c3457611c34611bce565b604052919050565b6001600160a01b03811681146106b6575f80fd5b8035611c5b81611c3c565b919050565b5f806040808486031215611c72575f80fd5b833567ffffffffffffffff80821115611c89575f80fd5b8186019150601f8781840112611c9d575f80fd5b8235602083821115611cb157611cb1611bce565b611cbf818360051b01611c0b565b828152818101945060069290921b85018101918a831115611cde575f80fd5b948101945b82861015611d3d578a84870112611cf9575f8081fd5b611d01611be2565b808888018d811115611d12575f8081fd5b885b81811015611d2b5780358452928501928501611d14565b50508652509486019493810193611ce3565b9750611d4a898201611c50565b96505050505050509250929050565b5f60208284031215611d69575f80fd5b8135611d7481611c3c565b9392505050565b5f805f8385036101c0811215611d8f575f80fd5b8435611d9a81611c3c565b9350610180601f1982011215611dae575f80fd5b506020840191506101a084013567ffffffffffffffff811115611dcf575f80fd5b840160608187031215611de0575f80fd5b809150509250925092565b803560038110611c5b575f80fd5b5f8060408385031215611e0a575f80fd5b8235611e1581611c3c565b9150611e2360208401611deb565b90509250929050565b5f60208284031215611e3c575f80fd5b611d7482611deb565b5f60208284031215611e55575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561178e5761178e611e5c565b8181038181111561178e5761178e611e5c565b808202811582820484141761178e5761178e611e5c565b5f82611ec757634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60018201611f0557611f05611e5c565b5060010190565b8135611f1781611c3c565b81546001600160a01b0319166001600160a01b039190911617905550565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610f316101608301600b8301611f0c565b5f808335601e19843603018112611fc6575f80fd5b83018035915067ffffffffffffffff821115611fe0575f80fd5b6020019150600581901b3603821315611ff7575f80fd5b9250929050565b5b81811015610f31575f8155600101611fff565b5f808335601e19843603018112612027575f80fd5b83018035915067ffffffffffffffff821115612041575f80fd5b6020019150600681901b3603821315611ff7575f80fd5b815f5b6002811015610eef5781358382015560209091019060010161205b565b600160401b83111561208c5761208c611bce565b8054838255808410156120fd576001600160ff1b0381811682146120b2576120b2611e5c565b80851685146120c3576120c3611e5c565b50815f5260205f208160011b81018560011b820191505b808210156120fa576120ef6002830183611ffe565b6002820191506120da565b50505b505f8181526020812083915b858110156116315761211b8383612058565b6040929092019160029190910190600101612109565b8135601e19833603018112612144575f80fd5b8201803567ffffffffffffffff81111561215c575f80fd5b602080830192508160051b3603831315612174575f80fd5b600160401b82111561218857612188611bce565b8354828555808310156121ab57845f52815f206121a9828201858301611ffe565b505b50835f52805f205f5b838110156121d75784356121c781611c3c565b82820155938201936001016121b4565b50506121e581860186612012565b93509150506121f8828260018601612078565b50506122076040830183612012565b610eef818360028601612078565b5f60208284031215612225575f80fd5b8151611d7481611c3c565b803561223b81611c3c565b6001600160a01b031690915250565b5f808335601e1984360301811261225f575f80fd5b830160208101925035905067ffffffffffffffff81111561227e575f80fd5b8060061b3603821315611ff7575f80fd5b8183526020830192505f815f5b848110156122bb5760408083883795860195919091019060010161229c565b5093949350505050565b5f606083018235601e198436030181126122dd575f80fd5b8301602081810191359067ffffffffffffffff8211156122fb575f80fd5b8160051b360383131561230c575f80fd5b606087529281905290915f9190608087015b8284101561234e57843561233181611c3c565b6001600160a01b031681529381019360019390930192810161231e565b61235a8288018861224a565b955093508781038289015261237081868661228f565b945050505050612383604084018461224a565b858303604087015261239683828461228f565b9695505050505050565b5f6101c0851515835284356020840152602085013560408401526040850135606084015260608501356080840152608085013560a084015260a085013560c084015260c085013560e084015261010060e08601358185015261012081870135818601526101409150808701358286015250610160818701358186015261242c6101808601828901612230565b5050806101a0840152612396818401856122c5565b6001600160a01b03831681526040602080830182905283519183018290525f9184820191906060850190845b818110156124895784518352938301939183019160010161246d565b5090979650505050505050565b5f602082840312156124a6575f80fd5b81518015158114611d74575f80fd5b5f5b838110156124cf5781810151838201526020016124b7565b50505f910152565b5f82516124e88184602087016124b5565b9190910192915050565b602081525f82518060208401526125108160408501602087016124b5565b601f01601f1916919091016040019291505056fea26469706673582212205bc18d8d9a7a93dc3095c75f6dc48a15dcf4564907fbc81a4e892e937f0fe8ff64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106101bb575f3560e01c806372f702f3116100f3578063c45a015511610093578063dec8a7471161006e578063dec8a7471461040a578063e3161ddd14610413578063f7c618c11461041b578063f8077fae1461042e575f80fd5b8063c45a0155146103e8578063db2e21bc146103f9578063dd69f04f14610401575f80fd5b80638e997622116100ce5780638e997622146103b1578063902c736f146103c457806390aeb57d146103cd578063a694fc3a146103d5575f80fd5b806372f702f31461036b57806373328ce9146103965780638456cb59146103a9575f80fd5b80633813f8751161015e5780634430135a116101395780634430135a146102ef5780634c179042146103025780635c975abb146103155780635d0eaaaf14610330575f80fd5b80633813f875146102d65780633d18b912146102df5780633f4ba83a146102e7575f80fd5b80632e1a7d4d116101995780632e1a7d4d146102945780632fbbb3e5146102a75780633027a704146102ba57806331d7a262146102c3575f80fd5b80630910638a146101bf5780630bbdd007146101db5780631481f800146101e5575b5f80fd5b6101c860175481565b6040519081526020015b60405180910390f35b6101e3610437565b005b600354600454600554600654600754600854600954600a54600b54600c54600d546040805160208101909152600e546001600160a01b031681526102319b9a999897969594939291908c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e0860152610100850152610120840152610140830152516001600160a01b0316610160820152610180016101d2565b6101e36102a2366004611bb7565b61052b565b6101c86102b5366004611c60565b6106b9565b6101c860155481565b6101c86102d1366004611d59565b6107a1565b6101c860135481565b6101e361084f565b6101e3610872565b6101e36102fd366004611d7b565b610883565b6101e3610310366004611d59565b610ef5565b5f5462010000900460ff1660405190151581526020016101d2565b61035661033e366004611d59565b60186020525f90815260409020805460019091015482565b604080519283526020830191909152016101d2565b600f5461037e906001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b6101e36103a4366004611df9565b610f35565b6101e3610ff8565b6101c86103bf366004611e2c565b611009565b6101c860145481565b6101e3611036565b6101e36103e3366004611bb7565b6110ea565b6002546001600160a01b031661037e565b6101e3611266565b6101c860125481565b6101c860165481565b6101e36112f5565b60105461037e906001600160a01b031681565b6101c860115481565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df361046181611372565b6010545f906001600160a01b03166370a08231336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156104b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104db9190611e45565b90508060155f8282546104ee9190611e70565b90915550506040518181527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b610533611418565b61053b611471565b335f81815260186020526040902080548311156105a657826040516333bf2e9f60e01b815260040161059d918152604060208201819052601690820152750c6c2dcdcdee8aed2e8d0c8e4c2eea8d0d2e69aeac6d60531b606082015260800190565b60405180910390fd5b6105ae6114d8565b82815f015f8282546105c09190611e83565b909155505060125481546402540be400916105da91611e96565b6105e49190611ead565b81600101819055508260145f8282546105fd9190611e83565b9091555050600a541561065157600a545f906127109061061d9086611e96565b6106279190611ead565b90508060196002015f82825461063d9190611e70565b9091555061064d90508185611e83565b9350505b600f54610668906001600160a01b03168385611639565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5846040516106a391815260200190565b60405180910390a250506106b660018055565b50565b5f805b835181101561079a575f8482815181106106d8576106d8611ee0565b60200260200101519050806001600281106106f5576106f5611ee0565b60200201515f036107065750610788565b6020810151604051632f9d937f60e01b81526004810184905260248101919091526001600160a01b03851690632f9d937f90604401602060405180830381865afa158015610756573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061077a9190611e45565b6107849084611e70565b9250505b8061079281611ef4565b9150506106bc565b5092915050565b6001600160a01b0381165f908152601860205260408120601254601454601154421180156107ce57505f81115b15610819575f601354601154426107e59190611e83565b6107ef9190611e96565b9050816108016402540be40083611e96565b61080b9190611ead565b6108159084611e70565b9250505b600183015483546402540be40090610832908590611e96565b61083c9190611ead565b6108469190611e83565b95945050505050565b610857611418565b61085f611471565b6108676114d8565b61087060018055565b565b61087b5f611372565b6108706116a1565b5f54610100900460ff16158080156108a157505f54600160ff909116105b806108ba5750303b1580156108ba57505f5460ff166001145b61091d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059d565b5f805460ff19166001179055801561093e575f805461ff0019166101001790555b338084600361094d8282611f35565b50849050601c61095d8282612131565b5050600280546001600160a01b0319166001600160a01b0383161790555f6001826001600160a01b031663ce883cdb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109dd9190611e45565b6109e79190611e83565b90505f826001600160a01b0316631bbb12fc846001600160a01b031663acc9606f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a35573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a599190611e45565b6040518263ffffffff1660e01b8152600401610a7791815260200190565b602060405180830381865afa158015610a92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab69190612215565b604080516020808201869052600160f81b8284015282516021818403018152604183018452805190820120606183018790525f6081840152835160628185030181526082909301909352815191012091925090610b1c6001600160a01b038416836116f4565b600f80546001600160a01b0319166001600160a01b03928316179055610b44908416826116f4565b601080546001600160a01b0319166001600160a01b03928316179055600f5460405163f436f09360e01b815291169063f436f09390610b8c906001908d908d906004016123a0565b5f604051808303815f87803b158015610ba3575f80fd5b505af1158015610bb5573d5f803e3d5ffd5b505060105460405163f436f09360e01b81526001600160a01b03909116925063f436f0939150610bed905f908d908d906004016123a0565b5f604051808303815f87803b158015610c04575f80fd5b505af1158015610c16573d5f803e3d5ffd5b505f9250610c2891508a905080611fb1565b905067ffffffffffffffff811115610c4257610c42611bce565b604051908082528060200260200182016040528015610c6b578160200160208202803683370190505b5090505f5b610c7d60408b018b612012565b9050811015610d2757610c9360408b018b612012565b82818110610ca357610ca3611ee0565b905060400201600160028110610cbb57610cbb611ee0565b602002013582610cce60408d018d612012565b84818110610cde57610cde611ee0565b9050604002015f60028110610cf557610cf5611ee0565b602002013581518110610d0a57610d0a611ee0565b602090810291909101015280610d1f81611ef4565b915050610c70565b50600f5460405163de836ebd60e01b81526001600160a01b039091169063de836ebd90610d5a908e908590600401612441565b5f604051808303815f87803b158015610d71575f80fd5b505af1158015610d83573d5f803e3d5ffd5b505050505f5b610d9660208b018b612012565b9050811015610e4357610dac60208b018b612012565b82818110610dbc57610dbc611ee0565b905060400201600160028110610dd457610dd4611ee0565b6020020135828b8060200190610dea9190612012565b84818110610dfa57610dfa611ee0565b9050604002015f60028110610e1157610e11611ee0565b602002013581518110610e2657610e26611ee0565b602090810291909101015280610e3b81611ef4565b915050610d89565b5060105460405163de836ebd60e01b81526001600160a01b039091169063de836ebd90610e76908e908590600401612441565b5f604051808303815f87803b158015610e8d575f80fd5b505af1158015610e9f573d5f803e3d5ffd5b50505050505050505050508015610eef575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610efe5f611372565b5f5b6003811015610f3157610f1f828260028111156103a4576103a4611ecc565b80610f2981611ef4565b915050610f00565b5050565b610f3e5f611372565b5f816002811115610f5157610f51611ecc565b03610f8557610f85826019836002811115610f6e57610f6e611ecc565b60038110610f7e57610f7e611ee0565b0154611794565b6001816002811115610f9957610f99611ecc565b1480610fb657506002816002811115610fb457610fb4611ecc565b145b15610f3157610f31826019836002811115610fd357610fd3611ecc565b60038110610fe357610fe3611ee0565b0154600f546001600160a01b03169190611639565b6110015f611372565b6108706117dd565b5f601982600281111561101e5761101e611ecc565b6003811061102e5761102e611ee0565b015492915050565b7f508ce835b993083d562083854a88de07ecc701522f232cada7863173dfc40df361106081611372565b5f6127106003600801546015546110779190611e96565b6110819190611ead565b905061109b336010546001600160a01b031690308461181d565b8060175f8282546110ac9190611e70565b909155506110ba9050611855565b6040518181527fd2904f4877df3057e76c2da3130bd597114a6d0ff8b9952f7c99915a429e73709060200161051f565b6110f2611418565b600754811115611123576007546040516363038b1d60e11b815261059d918391600401918252602082015260400190565b6006548110156111545760065460405163b8d4634360e01b815261059d918391600401918252602082015260400190565b61115c611471565b335f8181526018602052604090206111726114d8565b600f5461118a906001600160a01b031683308661181d565b600a54156111d957600a545f90612710906111a59086611e96565b6111af9190611ead565b90508060196001015f8282546111c59190611e70565b909155506111d590508185611e83565b9350505b8260145f8282546111ea9190611e70565b90915550508054839082905f90611202908490611e70565b909155505060125481546402540be4009161121c91611e96565b6112269190611ead565b60018201556040518381526001600160a01b038316907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016106a3565b335f8181526018602052604090208054600f54611290916001600160a01b03909116908490611639565b80546040519081526001600160a01b038316907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a28054601480545f906112e3908490611e83565b90915550505f80825560019091015550565b601154421161130057565b6014545f0361130f5742601155565b5f601354601154426113219190611e83565b61132b9190611e96565b905061133681611877565b6014546402540be40060135461134c9190611e96565b6113569190611ead565b60125f8282546113669190611e70565b90915550504260115550565b5f33600254604051632474521560e21b8152600481018590526001600160a01b0380841660248301529293509116906391d1485490604401602060405180830381865afa1580156113c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e99190612496565b610f315760405163a78e4aa560e01b8152600481018390526001600160a01b038216602482015260440161059d565b60026001540361146a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161059d565b6002600155565b6004544210156114a557600454611489904290611e83565b60405163147fdec360e01b815260040161059d91815260200190565b600554421115610870576005546114bc9042611e83565b604051633652a8cb60e21b815260040161059d91815260200190565b335f8181526018602052604090206114ee6112f5565b5f81600101546402540be400601254845f015461150b9190611e96565b6115159190611ead565b61151f9190611e83565b6004549091505f821580159061153457508142115b801561154b57506008546115489083611e70565b42105b8015611558575060095415155b156115a0576009546127109061156e9085611e96565b6115789190611ead565b90508060195f015f82825461158d9190611e70565b9091555061159d90508184611e83565b92505b6115aa8584611794565b846001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040516115e591815260200190565b60405180910390a25f6115f88285611e70565b90508060165f82825461160b9190611e83565b925050819055508060175f8282546116239190611e83565b909155506116319050611855565b505050505050565b6040516001600160a01b03831660248201526044810182905261169c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118c1565b505050565b6116a9611994565b5f805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760095ff590506001600160a01b03811661178e5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640161059d565b92915050565b805f0361179f575050565b6016548111156117c657601654601054610f31916001600160a01b03909116908490611639565b601054610f31906001600160a01b03168383611639565b6117e56119e2565b5f805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116d73390565b6040516001600160a01b0380851660248301528316604482015260648101829052610eef9085906323b872dd60e01b90608401611665565b6004546005546118659190611e83565b6017546118729190611ead565b601355565b8060165f8282546118889190611e70565b909155505060175460165411156106b65760175460165460405163c006882b60e01b81526004810192909252602482015260440161059d565b5f611915826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a2d9092919063ffffffff16565b905080515f14806119355750808060200190518101906119359190612496565b61169c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059d565b5f5462010000900460ff166108705760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161059d565b5f5462010000900460ff16156108705760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161059d565b6060611a3b84845f85611a43565b949350505050565b606082471015611aa45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059d565b5f80866001600160a01b03168587604051611abf91906124d7565b5f6040518083038185875af1925050503d805f8114611af9576040519150601f19603f3d011682016040523d82523d5f602084013e611afe565b606091505b5091509150611b0f87838387611b1a565b979650505050505050565b60608315611b885782515f03611b81576001600160a01b0385163b611b815760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059d565b5081611a3b565b611a3b8383815115611b9d5781518083602001fd5b8060405162461bcd60e51b815260040161059d91906124f2565b5f60208284031215611bc7575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715611c0557611c05611bce565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c3457611c34611bce565b604052919050565b6001600160a01b03811681146106b6575f80fd5b8035611c5b81611c3c565b919050565b5f806040808486031215611c72575f80fd5b833567ffffffffffffffff80821115611c89575f80fd5b8186019150601f8781840112611c9d575f80fd5b8235602083821115611cb157611cb1611bce565b611cbf818360051b01611c0b565b828152818101945060069290921b85018101918a831115611cde575f80fd5b948101945b82861015611d3d578a84870112611cf9575f8081fd5b611d01611be2565b808888018d811115611d12575f8081fd5b885b81811015611d2b5780358452928501928501611d14565b50508652509486019493810193611ce3565b9750611d4a898201611c50565b96505050505050509250929050565b5f60208284031215611d69575f80fd5b8135611d7481611c3c565b9392505050565b5f805f8385036101c0811215611d8f575f80fd5b8435611d9a81611c3c565b9350610180601f1982011215611dae575f80fd5b506020840191506101a084013567ffffffffffffffff811115611dcf575f80fd5b840160608187031215611de0575f80fd5b809150509250925092565b803560038110611c5b575f80fd5b5f8060408385031215611e0a575f80fd5b8235611e1581611c3c565b9150611e2360208401611deb565b90509250929050565b5f60208284031215611e3c575f80fd5b611d7482611deb565b5f60208284031215611e55575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561178e5761178e611e5c565b8181038181111561178e5761178e611e5c565b808202811582820484141761178e5761178e611e5c565b5f82611ec757634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f60018201611f0557611f05611e5c565b5060010190565b8135611f1781611c3c565b81546001600160a01b0319166001600160a01b039190911617905550565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a820155610f316101608301600b8301611f0c565b5f808335601e19843603018112611fc6575f80fd5b83018035915067ffffffffffffffff821115611fe0575f80fd5b6020019150600581901b3603821315611ff7575f80fd5b9250929050565b5b81811015610f31575f8155600101611fff565b5f808335601e19843603018112612027575f80fd5b83018035915067ffffffffffffffff821115612041575f80fd5b6020019150600681901b3603821315611ff7575f80fd5b815f5b6002811015610eef5781358382015560209091019060010161205b565b600160401b83111561208c5761208c611bce565b8054838255808410156120fd576001600160ff1b0381811682146120b2576120b2611e5c565b80851685146120c3576120c3611e5c565b50815f5260205f208160011b81018560011b820191505b808210156120fa576120ef6002830183611ffe565b6002820191506120da565b50505b505f8181526020812083915b858110156116315761211b8383612058565b6040929092019160029190910190600101612109565b8135601e19833603018112612144575f80fd5b8201803567ffffffffffffffff81111561215c575f80fd5b602080830192508160051b3603831315612174575f80fd5b600160401b82111561218857612188611bce565b8354828555808310156121ab57845f52815f206121a9828201858301611ffe565b505b50835f52805f205f5b838110156121d75784356121c781611c3c565b82820155938201936001016121b4565b50506121e581860186612012565b93509150506121f8828260018601612078565b50506122076040830183612012565b610eef818360028601612078565b5f60208284031215612225575f80fd5b8151611d7481611c3c565b803561223b81611c3c565b6001600160a01b031690915250565b5f808335601e1984360301811261225f575f80fd5b830160208101925035905067ffffffffffffffff81111561227e575f80fd5b8060061b3603821315611ff7575f80fd5b8183526020830192505f815f5b848110156122bb5760408083883795860195919091019060010161229c565b5093949350505050565b5f606083018235601e198436030181126122dd575f80fd5b8301602081810191359067ffffffffffffffff8211156122fb575f80fd5b8160051b360383131561230c575f80fd5b606087529281905290915f9190608087015b8284101561234e57843561233181611c3c565b6001600160a01b031681529381019360019390930192810161231e565b61235a8288018861224a565b955093508781038289015261237081868661228f565b945050505050612383604084018461224a565b858303604087015261239683828461228f565b9695505050505050565b5f6101c0851515835284356020840152602085013560408401526040850135606084015260608501356080840152608085013560a084015260a085013560c084015260c085013560e084015261010060e08601358185015261012081870135818601526101409150808701358286015250610160818701358186015261242c6101808601828901612230565b5050806101a0840152612396818401856122c5565b6001600160a01b03831681526040602080830182905283519183018290525f9184820191906060850190845b818110156124895784518352938301939183019160010161246d565b5090979650505050505050565b5f602082840312156124a6575f80fd5b81518015158114611d74575f80fd5b5f5b838110156124cf5781810151838201526020016124b7565b50505f910152565b5f82516124e88184602087016124b5565b9190910192915050565b602081525f82518060208401526125108160408501602087016124b5565b601f01601f1916919091016040019291505056fea26469706673582212205bc18d8d9a7a93dc3095c75f6dc48a15dcf4564907fbc81a4e892e937f0fe8ff64736f6c63430008140033",
  "libraries": {
    "FortunnaLib": "0x35BB379Afe0bDA7B3DeC5f7E9ccEc2218aA5FDAe",
    "FortunnaErrorsLib": "0x2d263395545cDBB611EF39B649497ff2191Ad05D",
    "FortunnaBitMaskLib": "0x3Cb90a598cB93bc72467a50898a27dc09043Fdec"
  },
  "devdoc": {
    "author": "Fortunna Team",
    "errors": {
      "DistributionEnded(uint256)": [
        {
          "details": "An error to be reverted if the pool expired.",
          "params": {
            "timeDifference": "A time how long the pool is expired."
          }
        }
      ],
      "DistributionNotStarted(uint256)": [
        {
          "details": "An error to be reverted if the pool has not yet been started.",
          "params": {
            "timeDifference": "A time how long befire the pool is starting to work."
          }
        }
      ],
      "InvalidScalar(uint256,string)": [
        {
          "details": "An error to be reverted if some scalar property of the data structure was addressed wrongly.",
          "params": {
            "comment": "Some comment as to what kind of a data structure property this is.",
            "scalar": "A scalar."
          }
        }
      ],
      "NotAuthorized(bytes32,address)": [
        {
          "details": "An error to be reverted if an `entity` does not possess the `role`.",
          "params": {
            "entity": "An entity violating authorization.",
            "role": "A role an entity doesn't posess."
          }
        }
      ],
      "NotEnoughRewardToDistribute(uint256,uint256)": [
        {
          "details": "An error to be reverted if the pool lacks the rewards amount to distribute."
        }
      ],
      "NotEnoughStaked(uint256,uint256)": [
        {
          "details": "An error to be reverted if some staker did not satisfy minimum limitations for the stake operation.",
          "params": {
            "amount": "An actual stake amount provided.",
            "limit": "A minimum limit to be satisfied."
          }
        }
      ],
      "TooMuchStaked(uint256,uint256)": [
        {
          "details": "An error to be reverted if some staker did not satisfy maximum limitations for the stake operation.",
          "params": {
            "amount": "An actual stake amount provided.",
            "limit": "A maximum limit to be satisfied."
          }
        }
      ]
    },
    "events": {
      "EmergencyWithdraw(address,uint256)": {
        "params": {
          "amount": "An amount of Fortuna Dust to be withdrawn.",
          "user": "A user (staker) address."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "PartDistributed(uint256)": {
        "params": {
          "partOfTotalRewards": "An exact amount of the part."
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RewardAdded(uint256)": {
        "params": {
          "reward": "An exact amount of the total rewards."
        }
      },
      "RewardPaid(address,uint256)": {
        "params": {
          "reward": "A reward Fortuna Dust paid to the user.",
          "user": "A user (staker) address."
        }
      },
      "Staked(address,uint256)": {
        "params": {
          "amount": "Amount of the Fortuna Dust staked.",
          "user": "A user (staker) address."
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Withdrawn(address,uint256)": {
        "params": {
          "amount": "An amount of the Fortuna Dust to be withdrawn.",
          "user": "A user (staker) address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateFortunnaTokens(uint256[2][],address)": {
        "params": {
          "fortunnaTokenAddress": "A corresponding Fortuna Dust contract.",
          "initialAmounts": "A set of pairs of <index of the underlying token, an amount of this token>. "
        },
        "returns": {
          "amountToMint": "An amount of the Fortuna Dust minted."
        }
      },
      "getAccumulatedFeesAmount(uint8)": {
        "params": {
          "fee": "A type of the fees."
        },
        "returns": {
          "_0": "An amount claimable for the admin."
        }
      },
      "initialize(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))": {
        "params": {
          "poolOwner": "An owner of the pool address.",
          "poolParameters": "A scalar parameters of the pool.",
          "poolParametersArrays": "A vector parameters of the pool."
        }
      },
      "pause()": {
        "details": "Could be called only by the admin."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingRewards(address)": {
        "params": {
          "user": "A user (staker) address."
        },
        "returns": {
          "_0": "An amount of rewards that belongs to the `user`."
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "An amount of the Fortuna Dust to be staked."
        }
      },
      "unpause()": {
        "details": "Could be called only by the admin."
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "An amount of Fortuna Dust to be withdrawn."
        }
      },
      "withdrawAllFees(address)": {
        "params": {
          "receiver": "A receiver of the claimed fees."
        }
      },
      "withdrawFee(address,uint8)": {
        "params": {
          "fee": "A type of the fees.",
          "receiver": "A receiver of the claimed fees."
        }
      }
    },
    "stateVariables": {
      "_FEE_LENGTH": {
        "details": "A constant that equals to the `type(Fee).max`."
      },
      "_accumulatedFees": {
        "details": "An internal list of an accumulated fees amounts."
      },
      "vectorParams": {
        "details": "An internal container of vector parameters of the pool."
      }
    },
    "title": "Classic Fortunna Yield Farming pool",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EmergencyWithdraw(address,uint256)": {
        "notice": "An event to be emitted when a user performs an emergency withdraw of their staked Fortuna Dust."
      },
      "PartDistributed(uint256)": {
        "notice": "An event to be emitted when the part of the total reward is set to be distributed."
      },
      "RewardAdded(uint256)": {
        "notice": "An event to be emitted when the total reward is set up."
      },
      "RewardPaid(address,uint256)": {
        "notice": "An event to be emitted when a user receives a reward Fortuna Dust."
      },
      "Staked(address,uint256)": {
        "notice": "An event to be emitted when a user performs the stake."
      },
      "Withdrawn(address,uint256)": {
        "notice": "An event to be emitted when a user withdraws their staked Fortuna Dust."
      }
    },
    "kind": "user",
    "methods": {
      "accRewardTokenPerShare()": {
        "notice": "A getter function for the accrued rewards amount per share (deposit)."
      },
      "addExpectedRewardTokensBalanceToDistribute()": {
        "notice": "A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It sets an expected total amount of reward Fortuna Dust to be distributed."
      },
      "calculateFortunnaTokens(uint256[2][],address)": {
        "notice": "A helper function is to calculate the Fortuna Dust that would be minted when an initial amounts provided."
      },
      "emergencyWithdraw()": {
        "notice": "One of the main functions - only called when necessary by the staker, it withdraws senders (stakers) funds without getting the reward, so the funds would be returned safely."
      },
      "expectedRewardTokensBalanceToDistribute()": {
        "notice": "A getter for the variable that stores the total expected amount of Fortuna Dust to be distributed."
      },
      "factory()": {
        "notice": "A getter function that returns a FortunnaFactory instance address."
      },
      "getAccumulatedFeesAmount(uint8)": {
        "notice": "An information function for the admin and the public to acquire an accumulated fees."
      },
      "getReward()": {
        "notice": "One of the main functions - so that the staker could acquire the rewards without having to withdraw his funds."
      },
      "initialize(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32,(address)),(address[],uint256[2][],uint256[2][]))": {
        "notice": "A function that is to be called when the pool is created by the factory."
      },
      "lastRewardTimestamp()": {
        "notice": "A getter function for the timestamp when the pool was updated last."
      },
      "pause()": {
        "notice": "Triggers paused state."
      },
      "pendingRewards(address)": {
        "notice": "A view function that could get a reward amount belongs to the user."
      },
      "providePartOfTotalRewards()": {
        "notice": "A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It provides an actual part of the expected total reward Fortuna Dust to the pool and starts distributing."
      },
      "providedRewardTokensBalance()": {
        "notice": "A getter for the variable that stores the total provided Fortuna Dust tokens provided by the admin."
      },
      "requestedRewardTokensToDistribute()": {
        "notice": "A getter for the variable that stores the total requested amount of Fortuna Dust to be distrubted."
      },
      "rewardToken()": {
        "notice": "A getter function for reward Fortuna Dust token address."
      },
      "rewardTokensPerSec()": {
        "notice": "A getter for the amount of reward Fortuna Dust per second."
      },
      "scalarParams()": {
        "notice": "A scalar params of the pool;"
      },
      "stake(uint256)": {
        "notice": "One of the main functions - so the sender could stake the Fortuna Dust."
      },
      "stakingToken()": {
        "notice": "A getter function for staking Fortuna Dust token address."
      },
      "totalStakedTokensBalance()": {
        "notice": "A getter for the total staked Fortuna Dust amount."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      },
      "updatePool()": {
        "notice": "A function that updates the pool info. Rewards per seconds, accumulative variables."
      },
      "usersInfo(address)": {
        "notice": "A getter for the users info struct. (Parameter: A user (staker) address.)"
      },
      "withdraw(uint256)": {
        "notice": "One of the main functions - so the staker could withdraw his staked amounts."
      },
      "withdrawAllFees(address)": {
        "notice": "An analogical function like `withdrawFee`. But it claims all types of the fees."
      },
      "withdrawFee(address,uint8)": {
        "notice": "A function that callable only by the admin. It claims an accumulated fees."
      }
    },
    "notice": "Deploys Classic Fortunna Yield Farming pool.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 588,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 591,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 768,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_paused",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 869,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4450,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5384,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "scalarParams",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolParameters)8121_storage"
      },
      {
        "astId": 5388,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "stakingToken",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IFortunnaToken)7786"
      },
      {
        "astId": 5392,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IFortunnaToken)7786"
      },
      {
        "astId": 5395,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5398,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "accRewardTokenPerShare",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5401,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "rewardTokensPerSec",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5404,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "totalStakedTokensBalance",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5407,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "expectedRewardTokensBalanceToDistribute",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 5410,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "requestedRewardTokensToDistribute",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 5413,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "providedRewardTokensBalance",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 5419,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "usersInfo",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_struct(UserInfo)5371_storage)"
      },
      {
        "astId": 5424,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "_accumulatedFees",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 5428,
        "contract": "contracts/FortunnaPool.sol:FortunnaPool",
        "label": "vectorParams",
        "offset": 0,
        "slot": "28",
        "type": "t_struct(PoolParametersArrays)8136_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)2_storage)dyn_storage": {
        "base": "t_array(t_uint256)2_storage",
        "encoding": "dynamic_array",
        "label": "uint256[2][]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFortunnaToken)7786": {
        "encoding": "inplace",
        "label": "contract IFortunnaToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)5371_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FortunnaPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)5371_storage"
      },
      "t_struct(CustomPoolParameters)8094_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaLib.CustomPoolParameters",
        "members": [
          {
            "astId": 8093,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "nonfungiblePositionManager",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolParameters)8121_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaLib.PoolParameters",
        "members": [
          {
            "astId": 8097,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "protoPoolIdx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8099,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8101,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8103,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "minStakeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8105,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "maxStakeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8107,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "minLockUpRewardsPeriod",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8109,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "earlyWithdrawalFeeBasePoints",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8111,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "depositWithdrawFeeBasePoints",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8113,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "totalRewardBasePointsPerDistribution",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8115,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "stakingTokensMask",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          },
          {
            "astId": 8117,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "rewardTokensMask",
            "offset": 0,
            "slot": "10",
            "type": "t_bytes32"
          },
          {
            "astId": 8120,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "custom",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(CustomPoolParameters)8094_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PoolParametersArrays)8136_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaLib.PoolParametersArrays",
        "members": [
          {
            "astId": 8125,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "utilizingTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8130,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "initialRewardAmounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_array(t_uint256)2_storage)dyn_storage"
          },
          {
            "astId": 8135,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "initialDepositAmounts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)2_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)5371_storage": {
        "encoding": "inplace",
        "label": "struct FortunnaPool.UserInfo",
        "members": [
          {
            "astId": 5368,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5370,
            "contract": "contracts/FortunnaPool.sol:FortunnaPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}