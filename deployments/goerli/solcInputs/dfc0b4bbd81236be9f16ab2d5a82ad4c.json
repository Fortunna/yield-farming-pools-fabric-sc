{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-new/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-new/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-new/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-new/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "@openzeppelin/contracts-new/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "contracts/demo/ProductionTestTokenA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"../mock/MockToken.sol\";\n\ncontract ProductionTestTokenA is MockToken {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply\n    ) MockToken(name, symbol, initialSupply) {}\n\n    function setBlockTransfers(bool _block) public override onlyOwner {\n        super.setBlockTransfers(_block);\n    }\n\n    function setTransfersAllowed(\n        address sender,\n        address recipient,\n        bool _allowed\n    ) public override onlyOwner {\n        super.setTransfersAllowed(sender, recipient, _allowed);\n    }\n\n    function setBlockTransfersFrom(bool _block) public override onlyOwner {\n        super.setBlockTransfersFrom(_block);\n    }\n\n    function setBalanceOf(\n        address who,\n        uint256 amount\n    ) public override onlyOwner {\n        super.setBalanceOf(who, amount);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        return super.transfer(recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        return super.transferFrom(sender, recipient, amount);\n    }\n\n    function mint(address account, uint256 amount) public override onlyOwner {\n        super.mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public override onlyOwner {\n        super.burn(account, amount);\n    }\n}\n"
    },
    "contracts/demo/ProductionTestTokenB.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"../mock/MockToken.sol\";\n\ncontract ProductionTestTokenB is MockToken {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply\n    ) MockToken(name, symbol, initialSupply) {}\n\n    function setBlockTransfers(bool _block) public override onlyOwner {\n        super.setBlockTransfers(_block);\n    }\n\n    function setTransfersAllowed(\n        address sender,\n        address recipient,\n        bool _allowed\n    ) public override onlyOwner {\n        super.setTransfersAllowed(sender, recipient, _allowed);\n    }\n\n    function setBlockTransfersFrom(bool _block) public override onlyOwner {\n        super.setBlockTransfersFrom(_block);\n    }\n\n    function setBalanceOf(\n        address who,\n        uint256 amount\n    ) public override onlyOwner {\n        super.setBalanceOf(who, amount);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        return super.transfer(recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        return super.transferFrom(sender, recipient, amount);\n    }\n\n    function mint(address account, uint256 amount) public override onlyOwner {\n        super.mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public override onlyOwner {\n        super.burn(account, amount);\n    }\n}\n"
    },
    "contracts/FactoryAuthorized.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-new/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts-new/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts-new/security/Pausable.sol\";\n\nimport \"./libraries/FortunnaLib.sol\";\nimport \"./libraries/FortunnaErrorsLib.sol\";\n\n/// @title A contract that helps to manage the state of the Fortunna contracts.\n/// @author Fortunna Team\n/// @notice The contract contains protection from the direct calls and roles management.\nabstract contract FactoryAuthorized is\n    Initializable,\n    Pausable,\n    ReentrancyGuard\n{\n    /// @dev An address of the actual contract instance. The original address as part of the context.\n    address internal immutable __self = address(this);\n\n    /// @dev An address of the FortunnaFactory contract.\n    address internal _factory;\n\n    /// @dev A protection from the direct call modifier.\n    modifier delegatedOnly() {\n        if (_isInitializing() || __self == address(this)) {\n            revert FortunnaErrorsLib.NotInitialized();\n        }\n        _;\n    }\n\n    /// @dev An internal function that checks if a certain `role` is granted to the sender.\n    /// @param role A role hash.\n    function _onlyRoleInFactory(bytes32 role) internal view {\n        address sender = _msgSender();\n        if (!IAccessControl(_factory).hasRole(role, sender)) {\n            revert FortunnaErrorsLib.NotAuthorized(role, sender);\n        }\n    }\n\n    /// @dev A modifier that allows only the admin sender to proceed.\n    modifier onlyAdmin() {\n        // 0x00 == DEFAULT_ADMIN_ROLE\n        _onlyRoleInFactory(0x00);\n        _;\n    }\n\n    /// @dev A modifier that allows only a certain `role` bearer to proceed.\n    /// @param role A role hash.\n    modifier only(bytes32 role) {\n        _onlyRoleInFactory(role);\n        _;\n    }\n\n    /// @dev An internal initializer which stores an address pointer to the FortunnaFactory instance.\n    /// @param __factory The factory address.\n    function _initialize(address __factory) internal {\n        _factory = __factory;\n    }\n\n    /// @notice Triggers paused state.\n    /// @dev Could be called only by the admin.\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    /// @notice Returns to normal state.\n    /// @dev Could be called only by the admin.\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n}\n"
    },
    "contracts/FortunnaFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"@openzeppelin/contracts-new/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts-new/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts-new/utils/structs/BitMaps.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-new/utils/structs/EnumerableSet.sol\";\n\nimport \"./interfaces/IFortunnaFactory.sol\";\nimport \"./interfaces/IFortunnaPool.sol\";\nimport \"./interfaces/IFortunnaToken.sol\";\n\n/// @title Canonical Fortunna Yield Farming pools factory\n/// @author Fortunna Team\n/// @notice Deploys Fortunna Yield Farming pools and manages ownership and control over pool protocol fees.\ncontract FortunnaFactory is AccessControl, IFortunnaFactory {\n    using SafeERC20 for IERC20;\n    using FortunnaBitMaskLib for bytes32;\n    using Clones for address;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @inheritdoc IFortunnaFactory\n    FortunnaLib.PaymentInfo public override paymentInfo;\n\n    /// @dev A set of unique deployed pools.\n    EnumerableSet.AddressSet internal pools;\n\n    /// @dev A set of unique deployed prototypes.\n    EnumerableSet.AddressSet internal prototypes;\n\n    /// @notice An index in `prototypes` of FortunnaToken. Depends on the addition process in the initialization function.\n    uint256 public constant override FORTUNNA_TOKEN_PROTO_INDEX = 2;\n\n    /// @notice A constructor.\n    /// @param paymentTokens An array of tokens addresses to be allowed as payment for pool deploy tokens.\n    constructor(\n        address _fortunnaTokenPrototype,\n        address _fortunnaPoolPrototype,\n        address _fortunnaPoolUniswapV3Prototype,\n        address[] memory paymentTokens\n    ) {\n        address sender = _msgSender();\n        _grantRole(DEFAULT_ADMIN_ROLE, sender);\n        _grantRole(FortunnaLib.POOL_REWARDS_PROVIDER, sender);\n        _grantRole(FortunnaLib.ALLOWED_PAYMENT_TOKEN_ROLE, address(0));\n        prototypes.add(_fortunnaPoolPrototype);\n        prototypes.add(_fortunnaPoolUniswapV3Prototype);\n        prototypes.add(_fortunnaTokenPrototype);\n        for (uint256 i = 0; i < paymentTokens.length; i++) {\n            _grantRole(\n                FortunnaLib.ALLOWED_PAYMENT_TOKEN_ROLE,\n                paymentTokens[i]\n            );\n        }\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function getPoolAt(uint256 index) external view override returns (address) {\n        return pools.at(index);\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function getPoolsLength() external view override returns (uint256) {\n        return pools.length();\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function setPaymentInfo(\n        FortunnaLib.PaymentInfo calldata _paymentInfo\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        paymentInfo = _paymentInfo;\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function addPrototype(\n        address prototype\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        prototypes.add(prototype);\n    }\n\n    /// @inheritdoc AccessControl\n    function renounceRole(bytes32 role, address account) public override {\n        if (hasRole(FortunnaLib.BANNED_ROLE, account))\n            revert FortunnaErrorsLib.Banned(account);\n        super.renounceRole(role, account);\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function generateMask(\n        bool[] calldata flags\n    ) external pure override returns (bytes32) {\n        return FortunnaBitMaskLib.getMaskFromBooleans(flags);\n    }\n\n    /// @dev An internal function that validates the addresses if they're allowed\n    /// to be used as staking, reward, or external tokens and if the arrays lengths are less then 256.\n    /// Also there is a check if `_utilizingTokens` and `_externalRewardTokens` are unique arrays.\n    /// @param sender Alias for `_msgSender()`.\n    /// @param stakingTokensMask A bit mask to define if the `utilizingTokens` token is for staking.\n    /// @param rewardTokensMask A bit mask to define if the `utilizingTokens` token is for user rewards.\n    /// @param utilizingTokens An array of tokens either for stake or for rewards.\n    function _validateRoles(\n        address sender,\n        uint256 initialRewardAmountsLength,\n        uint256 initialDepositAmountsLength,\n        bytes32 stakingTokensMask,\n        bytes32 rewardTokensMask,\n        address[] calldata utilizingTokens\n    ) internal view {\n        if (hasRole(FortunnaLib.BANNED_ROLE, sender))\n            revert FortunnaErrorsLib.Banned(sender);\n        if (utilizingTokens.length > 256) {\n            revert FortunnaErrorsLib.InvalidLength(\n                utilizingTokens.length,\n                \"utilizingTokens>256\"\n            );\n        }\n        for (uint8 i = 0; i < utilizingTokens.length; i++) {\n            address token = utilizingTokens[i];\n            if (stakingTokensMask.isBitUp(i)) {\n                if (!hasRole(FortunnaLib.ALLOWED_STAKING_TOKEN_ROLE, token)) {\n                    revert FortunnaErrorsLib.NotAuthorized(\n                        FortunnaLib.ALLOWED_STAKING_TOKEN_ROLE,\n                        token\n                    );\n                }\n            }\n            if (rewardTokensMask.isBitUp(i)) {\n                if (!hasRole(FortunnaLib.ALLOWED_REWARD_TOKEN_ROLE, token)) {\n                    revert FortunnaErrorsLib.NotAuthorized(\n                        FortunnaLib.ALLOWED_REWARD_TOKEN_ROLE,\n                        token\n                    );\n                }\n            }\n        }\n        if (initialRewardAmountsLength != utilizingTokens.length) {\n            revert FortunnaErrorsLib.AreNotEqual(\n                initialRewardAmountsLength,\n                utilizingTokens.length,\n                \"tokensLen!=initRewardLen\"\n            );\n        }\n\n        if (initialDepositAmountsLength != utilizingTokens.length) {\n            revert FortunnaErrorsLib.AreNotEqual(\n                initialDepositAmountsLength,\n                utilizingTokens.length,\n                \"tokensLen!=initDepositLen\"\n            );\n        }\n    }\n\n    /// @dev An internal function that checks scalar parameters of the pools.\n    /// Firstly, if the chainIds are as expected equal. Secondly, if the start and end timestamps making\n    /// a valid time interval. Thirdly, if min and max stake amounts are making also a valid interval. Then,\n    /// if early withdrawal fee and deposit/withdraw fee are represented as base points validly.\n    /// @param _poolParameters A struct containing the scalar parameters of the pool.\n    function _validateScalarParameters(\n        FortunnaLib.PoolParameters calldata _poolParameters\n    ) internal view {\n        if (prototypes.at(_poolParameters.protoPoolIdx) == address(0)) {\n            revert FortunnaErrorsLib.UnknownPrototypeIndex(\n                _poolParameters.protoPoolIdx\n            );\n        }\n        if (_poolParameters.startTimestamp > _poolParameters.endTimestamp) {\n            revert FortunnaErrorsLib.IncorrectInterval(\n                _poolParameters.startTimestamp,\n                _poolParameters.endTimestamp,\n                \"time\"\n            );\n        }\n        if (_poolParameters.minStakeAmount > _poolParameters.maxStakeAmount) {\n            revert FortunnaErrorsLib.IncorrectInterval(\n                _poolParameters.minStakeAmount,\n                _poolParameters.maxStakeAmount,\n                \"stakeAmount\"\n            );\n        }\n        if (\n            _poolParameters.earlyWithdrawalFeeBasePoints >\n            FortunnaLib.BASE_POINTS_MAX\n        ) {\n            revert FortunnaErrorsLib.IncorrectBasePoints(\n                _poolParameters.earlyWithdrawalFeeBasePoints,\n                \"earlyWithdrawal\"\n            );\n        }\n        if (\n            _poolParameters.depositWithdrawFeeBasePoints >\n            FortunnaLib.BASE_POINTS_MAX\n        ) {\n            revert FortunnaErrorsLib.IncorrectBasePoints(\n                _poolParameters.depositWithdrawFeeBasePoints,\n                \"depositWithdraw\"\n            );\n        }\n        if (\n            _poolParameters.totalRewardBasePointsPerDistribution >\n            FortunnaLib.BASE_POINTS_MAX\n        ) {\n            revert FortunnaErrorsLib.IncorrectBasePoints(\n                _poolParameters.totalRewardBasePointsPerDistribution,\n                \"rewardBasePoints\"\n            );\n        }\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function predictPoolAddress(\n        uint256 poolProtoIdx\n    ) public view override returns (address result, bytes32 salt) {\n        address poolPrototypeAddress = prototypes.at(poolProtoIdx);\n        salt = keccak256(abi.encodePacked(pools.length()));\n        result = poolPrototypeAddress.predictDeterministicAddress(salt);\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function predictFortunnaTokenAddress(\n        uint256 poolProtoIdx,\n        uint256 poolIdx,\n        bool isStakingOrReward\n    ) external view override returns (address result, bytes32 salt) {\n        salt = keccak256(abi.encodePacked(poolIdx, isStakingOrReward));\n        address fortunnaTokenPrototype = prototypes.at(FORTUNNA_TOKEN_PROTO_INDEX);\n        address tokenDeployer = prototypes.at(poolProtoIdx)\n            .predictDeterministicAddress(keccak256(abi.encodePacked(poolIdx)));\n        result = fortunnaTokenPrototype.predictDeterministicAddress(salt, tokenDeployer);\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function createPool(\n        FortunnaLib.PoolParameters calldata poolParameters,\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\n    ) external payable override returns (address pool) {\n        address sender = _msgSender();\n        _validateRoles(\n            sender,\n            poolParametersArrays.initialRewardAmounts.length,\n            poolParametersArrays.initialDepositAmounts.length,\n            poolParameters.stakingTokensMask,\n            poolParameters.rewardTokensMask,\n            poolParametersArrays.utilizingTokens\n        );\n        _validateScalarParameters(poolParameters);\n\n        if (paymentInfo.paymentToken == address(0)) {\n            if (msg.value < paymentInfo.cost) {\n                revert FortunnaErrorsLib.NotEnoughtPayment(msg.value);\n            }\n        } else {\n            IERC20(paymentInfo.paymentToken).safeTransferFrom(\n                sender,\n                address(this),\n                paymentInfo.cost\n            );\n        }\n\n        bytes32 deploySalt;\n        (pool, deploySalt) = predictPoolAddress(\n            poolParameters.protoPoolIdx\n        );\n        _grantRole(FortunnaLib.LP_MINTER_BURNER_ROLE, pool);\n\n        if (!pools.add(pool)) {\n            revert FortunnaErrorsLib.AddressAlreadyExists(pool);\n        }\n\n        address prototypeAddress = prototypes.at(poolParameters.protoPoolIdx);\n        prototypeAddress.cloneDeterministic(deploySalt);\n\n        IFortunnaPool(pool).initialize(\n            sender,\n            poolParameters,\n            poolParametersArrays\n        );\n        emit PoolCreated(pool);\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function sendCollectedTokens(\n        address token,\n        address payable who,\n        uint256 amount\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (token != address(0)) {\n            IERC20(token).safeTransfer(_msgSender(), amount);\n        } else {\n            who.transfer(amount);\n        }\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function getPrototypeAt(\n        uint256 index\n    ) external view override returns (address result) {\n        result = prototypes.at(index);\n    }\n\n    /// @inheritdoc IFortunnaFactory\n    function getPrototypesLength()\n        external\n        view\n        override\n        returns (uint256 result)\n    {\n        result = prototypes.length();\n    }\n\n    /// @dev Every income in native tokens should be recorded as the behaviour\n    /// of the contract would be a funds hub like.\n    receive() external payable {\n        emit NativeTokenReceived(msg.value);\n    }\n}\n"
    },
    "contracts/FortunnaPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"@openzeppelin/contracts-new/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"./interfaces/IFortunnaFactory.sol\";\nimport \"./interfaces/IFortunnaPool.sol\";\nimport \"./interfaces/IFortunnaToken.sol\";\nimport \"./FactoryAuthorized.sol\";\n\n/// @title Classic Fortunna Yield Farming pool\n/// @author Fortunna Team\n/// @notice Deploys Classic Fortunna Yield Farming pool.\ncontract FortunnaPool is IFortunnaPool, FactoryAuthorized {\n    using Clones for address;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IFortunnaToken;\n    using FortunnaLib for bytes32;\n\n    /// @dev A struct to hold an info about a user.\n    struct UserInfo {\n        // An amount of staking Fortuna Dust. \n        uint256 amount;\n        // An amount of reward Fortuna Dust claimable.\n        uint256 rewardDebt;\n    }\n\n    /// @dev An enumeration that holds the types of fees that are collected from the pool operations.\n    enum Fee {\n        GET_REWARD,\n        STAKE,\n        WITHDRAW\n    }\n    /// @dev A constant that equals to the `type(Fee).max`.\n    uint256 private constant _FEE_LENGTH = 3;\n\n    /// @notice A scalar params of the pool;\n    FortunnaLib.PoolParameters public scalarParams;\n\n    /// @notice A getter function for staking Fortuna Dust token address.\n    IFortunnaToken public stakingToken;\n    /// @notice A getter function for reward Fortuna Dust token address.\n    IFortunnaToken public rewardToken;\n\n    /// @notice A getter function for the timestamp when the pool was updated last.\n    uint256 public lastRewardTimestamp;\n    /// @notice A getter function for the accrued rewards amount per share (deposit).\n    uint256 public accRewardTokenPerShare;\n\n    /// @notice A getter for the amount of reward Fortuna Dust per second.\n    uint256 public rewardTokensPerSec;\n\n    /// @notice A getter for the total staked Fortuna Dust amount.\n    uint256 public totalStakedTokensBalance;\n\n    /// @notice A getter for the variable that stores the total expected amount of Fortuna Dust to be distributed.\n    uint256 public expectedRewardTokensBalanceToDistribute;\n    /// @notice A getter for the variable that stores the total requested amount of Fortuna Dust to be distrubted.\n    uint256 public requestedRewardTokensToDistribute;\n    /// @notice A getter for the variable that stores the total provided Fortuna Dust tokens provided by the admin.\n    uint256 public providedRewardTokensBalance;\n\n    /// @notice A getter for the users info struct. (Parameter: A user (staker) address.)\n    mapping(address => UserInfo) public usersInfo;\n\n    /// @dev An internal list of an accumulated fees amounts.\n    uint256[_FEE_LENGTH] internal _accumulatedFees;\n\n    /// @dev An internal container of vector parameters of the pool.\n    FortunnaLib.PoolParametersArrays internal vectorParams;\n\n    /// @inheritdoc IFortunnaPool\n    function initialize(\n        address poolOwner,\n        FortunnaLib.PoolParameters calldata poolParameters,\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\n    ) external override initializer {\n        address sender = _msgSender();\n        IFortunnaFactory __factory = IFortunnaFactory(sender);\n        scalarParams = poolParameters;\n        vectorParams = poolParametersArrays;\n        super._initialize(address(__factory));\n\n        uint256 poolIdx = __factory.getPoolsLength() - 1;\n        address fortunnaTokenPrototype = __factory.getPrototypeAt(\n            __factory.FORTUNNA_TOKEN_PROTO_INDEX()\n        );\n        bytes32 stakingTokenDeploySalt = keccak256(abi.encodePacked(poolIdx, true));\n        bytes32 rewardTokenDeploySalt = keccak256(abi.encodePacked(poolIdx, false));\n\n        stakingToken = IFortunnaToken(\n            fortunnaTokenPrototype.cloneDeterministic(stakingTokenDeploySalt)\n        );\n        rewardToken = IFortunnaToken(\n            fortunnaTokenPrototype.cloneDeterministic(rewardTokenDeploySalt)\n        );\n        stakingToken.initialize(true, poolParameters, poolParametersArrays);\n        rewardToken.initialize(false, poolParameters, poolParametersArrays);\n\n        uint256[] memory amounts = new uint256[](poolParametersArrays.utilizingTokens.length);\n        for (uint256 i = 0; i < poolParametersArrays.initialDepositAmounts.length; i++) {\n            amounts[poolParametersArrays.initialDepositAmounts[i][0]] = poolParametersArrays.initialDepositAmounts[i][1];\n        }\n        stakingToken.mint(poolOwner, amounts);\n\n        for (uint256 i = 0; i < poolParametersArrays.initialRewardAmounts.length; i++) {\n            amounts[poolParametersArrays.initialRewardAmounts[i][0]] = poolParametersArrays.initialRewardAmounts[i][1];\n        }\n        rewardToken.mint(poolOwner, amounts);\n        \n        // uint256 amountToMint = calculateFortunnaTokens(\n        //     poolParametersArrays.initialDepositAmounts,\n        //     address(stakingToken)\n        // );\n        // if (amountToMint > 0) {\n        //     stakingToken.mint(poolOwner, amountToMint);\n        //     amountToMint = 0;\n        // }\n\n        // amountToMint = calculateFortunnaTokens(\n        //     poolParametersArrays.initialRewardAmounts,\n        //     address(rewardToken)\n        // );\n        // if (amountToMint > 0) {\n        //     rewardToken.mint(poolOwner, amountToMint);\n        // }\n    }\n\n    /// @notice A helper function is to calculate the Fortuna Dust that would be minted when an initial amounts provided.\n    /// @param initialAmounts A set of pairs of <index of the underlying token, an amount of this token>. \n    /// @param fortunnaTokenAddress A corresponding Fortuna Dust contract.\n    /// @return amountToMint An amount of the Fortuna Dust minted.\n    function calculateFortunnaTokens(\n        uint256[2][] memory initialAmounts,\n        address fortunnaTokenAddress\n    ) public view returns (uint256 amountToMint) {\n        for (uint256 i = 0; i < initialAmounts.length; i++) {\n            uint256[2] memory pair = initialAmounts[i];\n            if (pair[1] == 0) continue;\n            amountToMint += IFortunnaToken(fortunnaTokenAddress)\n                .calcFortunnaTokensInOrOutPerUnderlyingToken(i, pair[1]);\n        }\n    }\n\n    /// @notice A view function that could get a reward amount belongs to the user.\n    /// @param user A user (staker) address.\n    /// @return An amount of rewards that belongs to the `user`.\n    function pendingRewards(address user) external view returns (uint256) {\n        UserInfo storage userInfo = usersInfo[user];\n        uint256 _accRewardTokenPerShare = accRewardTokenPerShare;\n        uint256 _stakingTokenBalance = totalStakedTokensBalance;\n        if (block.timestamp > lastRewardTimestamp && _stakingTokenBalance > 0) {\n            uint256 reward = (block.timestamp - lastRewardTimestamp) *\n                rewardTokensPerSec;\n            _accRewardTokenPerShare +=\n                (reward * FortunnaLib.PRECISION) /\n                _stakingTokenBalance;\n        }\n        return\n            (userInfo.amount * _accRewardTokenPerShare) /\n            FortunnaLib.PRECISION -\n            userInfo.rewardDebt;\n    }\n\n    /// @dev An internal function that requests from the provided rewards a part to distribute.\n    /// @param amount An amount of Fortuna Dust to distribute.\n    function _provideRewardTokens(uint256 amount) internal {\n        requestedRewardTokensToDistribute += amount;\n        if (requestedRewardTokensToDistribute > providedRewardTokensBalance) {\n            revert FortunnaErrorsLib.NotEnoughRewardToDistribute(\n                providedRewardTokensBalance,\n                requestedRewardTokensToDistribute\n            );\n        }\n    }\n\n    /// @notice A function that updates the pool info. Rewards per seconds, accumulative variables.\n    function updatePool() public {\n        if (block.timestamp <= lastRewardTimestamp) {\n            return;\n        }\n        if (totalStakedTokensBalance == 0) {\n            lastRewardTimestamp = block.timestamp;\n            return;\n        }\n        uint256 reward = (block.timestamp - lastRewardTimestamp) *\n            rewardTokensPerSec;\n        _provideRewardTokens(reward);\n        accRewardTokenPerShare +=\n            (rewardTokensPerSec * FortunnaLib.PRECISION) /\n            totalStakedTokensBalance;\n        lastRewardTimestamp = block.timestamp;\n    }\n\n    /// @dev A validation internal function that checks if the pool is still functioning.\n    function _checkTimeIntervals() internal view {\n        if (block.timestamp < scalarParams.startTimestamp) {\n            revert FortunnaErrorsLib.DistributionNotStarted(\n                scalarParams.startTimestamp - block.timestamp\n            );\n        }\n        if (block.timestamp > scalarParams.endTimestamp) {\n            revert FortunnaErrorsLib.DistributionEnded(\n                block.timestamp - scalarParams.endTimestamp\n            );\n        }\n    }\n\n    /// @notice One of the main functions - so the sender could stake the Fortuna Dust.\n    /// @param amount An amount of the Fortuna Dust to be staked.\n    function stake(uint256 amount) external nonReentrant {\n        if (amount > scalarParams.maxStakeAmount) {\n            revert FortunnaErrorsLib.TooMuchStaked(\n                amount,\n                scalarParams.maxStakeAmount\n            );\n        }\n        if (amount < scalarParams.minStakeAmount) {\n            revert FortunnaErrorsLib.NotEnoughStaked(\n                amount,\n                scalarParams.minStakeAmount\n            );\n        }\n        _checkTimeIntervals();\n        address sender = _msgSender();\n        UserInfo storage userInfo = usersInfo[sender];\n        _getReward();\n        stakingToken.safeTransferFrom(sender, address(this), amount);\n        if (scalarParams.depositWithdrawFeeBasePoints > 0) {\n            uint256 fee = (amount * scalarParams.depositWithdrawFeeBasePoints) /\n                FortunnaLib.BASE_POINTS_MAX;\n            _accumulatedFees[uint256(Fee.STAKE)] += fee;\n            amount -= fee;\n        }\n        totalStakedTokensBalance += amount;\n        userInfo.amount += amount;\n        userInfo.rewardDebt =\n            (userInfo.amount * accRewardTokenPerShare) /\n            FortunnaLib.PRECISION;\n        emit Staked(sender, amount);\n    }\n\n    /// @notice One of the main functions - so the staker could withdraw his staked amounts.\n    /// @param amount An amount of Fortuna Dust to be withdrawn.\n    function withdraw(uint256 amount) external nonReentrant {\n        _checkTimeIntervals();\n        address sender = _msgSender();\n        UserInfo storage userInfo = usersInfo[sender];\n        if (userInfo.amount < amount) {\n            revert FortunnaErrorsLib.InvalidScalar(\n                amount,\n                \"cannotWithdrawThisMuch\"\n            );\n        }\n        _getReward();\n        userInfo.amount -= amount;\n        userInfo.rewardDebt =\n            (userInfo.amount * accRewardTokenPerShare) /\n            FortunnaLib.PRECISION;\n        totalStakedTokensBalance -= amount;\n        if (scalarParams.depositWithdrawFeeBasePoints > 0) {\n            uint256 fee = (amount * scalarParams.depositWithdrawFeeBasePoints) /\n                FortunnaLib.BASE_POINTS_MAX;\n            _accumulatedFees[uint256(Fee.WITHDRAW)] += fee;\n            amount -= fee;\n        }\n        stakingToken.safeTransfer(sender, amount);\n        emit Withdrawn(sender, amount);\n    }\n\n    /// @dev An internal helper function that recalculates an amount of rewards that belongs to a sender.\n    function _getReward() internal {\n        address sender = _msgSender();\n        UserInfo storage userInfo = usersInfo[sender];\n        updatePool();\n        uint256 pending = (userInfo.amount * accRewardTokenPerShare) /\n            FortunnaLib.PRECISION -\n            userInfo.rewardDebt;\n        uint256 startTimestamp = scalarParams.startTimestamp;\n\n        uint256 fee = 0;\n        if (\n            pending > 0 &&\n            block.timestamp > startTimestamp &&\n            block.timestamp <\n            startTimestamp + scalarParams.minLockUpRewardsPeriod &&\n            scalarParams.earlyWithdrawalFeeBasePoints > 0\n        ) {\n            fee =\n                (pending * scalarParams.earlyWithdrawalFeeBasePoints) /\n                FortunnaLib.BASE_POINTS_MAX;\n            _accumulatedFees[uint256(Fee.GET_REWARD)] += fee;\n            pending -= fee;\n        }\n\n        _safeRewardTransfer(sender, pending);\n        emit RewardPaid(sender, pending);\n        uint256 pendingAndFee = pending + fee;\n        requestedRewardTokensToDistribute -= pendingAndFee;\n        providedRewardTokensBalance -= pendingAndFee;\n        _recalcTokensPerSec();\n    }\n\n    /// @notice One of the main functions - so that the staker could acquire the rewards without having to withdraw his funds.\n    function getReward() external nonReentrant {\n        _checkTimeIntervals();\n        _getReward();\n    }\n\n    /// @notice One of the main functions - only called when necessary by the staker, it withdraws senders (stakers) funds without getting the reward, so the funds would be returned safely.\n    function emergencyWithdraw() external {\n        address sender = _msgSender();\n        UserInfo storage userInfo = usersInfo[sender];\n        stakingToken.safeTransfer(sender, userInfo.amount);\n        emit EmergencyWithdraw(sender, userInfo.amount);\n        totalStakedTokensBalance -= userInfo.amount;\n        userInfo.amount = 0;\n        userInfo.rewardDebt = 0;\n    }\n\n    /// @inheritdoc IFortunnaPool\n    function factory() external view override returns (address) {\n        return _factory;\n    }\n\n    /// @notice An information function for the admin and the public to acquire an accumulated fees.\n    /// @param fee A type of the fees.\n    /// @return An amount claimable for the admin.\n    function getAccumulatedFeesAmount(Fee fee) external view returns (uint256) {\n        return _accumulatedFees[uint256(fee)];\n    }\n\n    /// @notice A function that callable only by the admin. It claims an accumulated fees.\n    /// @param receiver A receiver of the claimed fees.\n    /// @param fee A type of the fees.\n    function withdrawFee(address receiver, Fee fee) public onlyAdmin {\n        if (fee == Fee.GET_REWARD) {\n            _safeRewardTransfer(receiver, _accumulatedFees[uint256(fee)]);\n        }\n        if (fee == Fee.STAKE || fee == Fee.WITHDRAW) {\n            stakingToken.safeTransfer(receiver, _accumulatedFees[uint256(fee)]);\n        }\n    }\n\n    /// @notice An analogical function like `withdrawFee`. But it claims all types of the fees.\n    /// @param receiver A receiver of the claimed fees.\n    function withdrawAllFees(address receiver) external onlyAdmin {\n        for (uint256 i = 0; i < _accumulatedFees.length; i++) {\n            withdrawFee(receiver, Fee(i));\n        }\n    }\n\n    /// @notice A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It sets an expected total amount of reward Fortuna Dust to be distributed.\n    function addExpectedRewardTokensBalanceToDistribute() \n        external \n        only(FortunnaLib.POOL_REWARDS_PROVIDER)\n    {\n        uint256 amount = rewardToken.balanceOf(_msgSender()); \n        expectedRewardTokensBalanceToDistribute += amount;\n        emit RewardAdded(amount);\n    }\n\n    /// @notice A function that only callable by the bearer of the `POOL_REWARDS_PROVIDER` role. It provides an actual part of the expected total reward Fortuna Dust to the pool and starts distributing.\n    function providePartOfTotalRewards()\n        external\n        only(FortunnaLib.POOL_REWARDS_PROVIDER)\n    {\n        uint256 amount = (expectedRewardTokensBalanceToDistribute *\n            scalarParams.totalRewardBasePointsPerDistribution) /\n            FortunnaLib.BASE_POINTS_MAX;\n        rewardToken.safeTransferFrom(_msgSender(), address(this), amount);\n        providedRewardTokensBalance += amount;\n        _recalcTokensPerSec();\n        emit PartDistributed(amount);\n    }\n\n    /// @dev An internal function that recalculates total reward Fortuna Dust per second.\n    function _recalcTokensPerSec() internal {\n        rewardTokensPerSec = providedRewardTokensBalance / (scalarParams.endTimestamp - scalarParams.startTimestamp);\n    }\n\n    /// @dev An internal function that makes transfers of the reward Fortuna Dust safely and more gas efficient.\n    function _safeRewardTransfer(address to, uint256 amount) internal {\n        if (amount == 0) return;\n        if (amount > requestedRewardTokensToDistribute) {\n            IERC20(rewardToken).safeTransfer(\n                to,\n                requestedRewardTokensToDistribute\n            );\n        } else {\n            IERC20(rewardToken).safeTransfer(to, amount);\n        }\n    }\n}\n"
    },
    "contracts/FortunnaToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"@openzeppelin/contracts-new/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-new/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts-new/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts-new/utils/Address.sol\";\n\nimport \"./libraries/FortunnaErrorsLib.sol\";\nimport \"./libraries/FortunnaBitMaskLib.sol\";\nimport \"./FactoryAuthorized.sol\";\nimport \"./interfaces/IFortunnaToken.sol\";\nimport \"./interfaces/IFortunnaPool.sol\";\n\n/// @title Fortunna Yield Farming Fortunna Token - Fortuna Dust.\n/// @author Fortunna Team\n/// @notice Deploys FortunnaToken either for staking or rewards providing.\ncontract FortunnaToken is ERC20, FactoryAuthorized, IFortunnaToken {\n    using SafeERC20 for IERC20;\n    using FortunnaBitMaskLib for bytes32;\n    using Address for address payable;\n\n    /// @notice A getter function of boolean variable that indicares either the token was meant for staking or rewards providing.\n    bool public isStakingOrRewardToken;\n    /// @notice A getter for the corresponding pool address that the contract is tied to.\n    address public pool;\n    /// @notice A getter for the generative symbol function (like in IERC20).\n    bytes internal underlyingTokensSymbols = bytes(\"\");\n\n    /// @notice A getter for the list of an underlying tokens.\n    address[] public underlyingTokens;\n    /// @notice A getter with 1 parameter - get an amount of an underlying token on the contract.\n    mapping(uint256 => uint256) public getReserve;\n\n    /// @notice A classic OZ ERC20 constructor.\n    constructor() ERC20(\"Fortunna Token\", \"FTA\") {}\n\n    /// @inheritdoc IFortunnaToken\n    function initialize(\n        bool _stakingOrRewardTokens,\n        FortunnaLib.PoolParameters calldata poolParameters,\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\n    ) external override initializer {\n        address sender = _msgSender();\n        pool = sender;\n        super._initialize(IFortunnaPool(sender).factory());\n        isStakingOrRewardToken = _stakingOrRewardTokens;\n        _mint(FortunnaLib.DEAD_ADDRESS, 1); // to make mint/burn functions work and not to dry out entirely the liquidity.\n        for (\n            uint8 i = 0;\n            i < poolParametersArrays.utilizingTokens.length;\n            i++\n        ) {\n            getReserve[i] = 1;\n            if (\n                _stakingOrRewardTokens\n                    ? poolParameters.stakingTokensMask.isBitUp(i)\n                    : poolParameters.rewardTokensMask.isBitUp(i)\n            ) {\n                underlyingTokens.push(poolParametersArrays.utilizingTokens[i]);\n                if (poolParametersArrays.utilizingTokens[i] != address(0)) {\n                    underlyingTokensSymbols = abi.encodePacked(\n                        underlyingTokensSymbols,\n                        IERC20Metadata(poolParametersArrays.utilizingTokens[i])\n                            .symbol(),\n                        \"x\"\n                    );\n                } else {\n                    underlyingTokensSymbols = abi.encodePacked(\n                        underlyingTokensSymbols,\n                        \"ETHx\"\n                    );\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc ERC20\n    function name()\n        public\n        view\n        override(ERC20, IERC20Metadata)\n        returns (string memory result)\n    {\n        result = string(\n            abi.encodePacked(\n                \"Fortunna LP token\",\n                isStakingOrRewardToken ? \" for staking <\" : \" for rewards <\",\n                underlyingTokensSymbols,\n                \">\"\n            )\n        );\n    }\n\n    /// @inheritdoc ERC20\n    function symbol()\n        public\n        view\n        override(ERC20, IERC20Metadata)\n        returns (string memory result)\n    {\n        result = string(\n            abi.encodePacked(\n                isStakingOrRewardToken ? \"fts\" : \"ftr\",\n                underlyingTokensSymbols\n            )\n        );\n    }\n\n    /// @inheritdoc IFortunnaToken\n    function calcUnderlyingTokensInOrOutPerFortunnaToken(\n        uint256 underlyingTokenIdx,\n        uint256 amountToMintOrBurn\n    ) public view override returns (uint256 underlyingTokensInOrOut) {\n        underlyingTokensInOrOut =\n            ((amountToMintOrBurn *\n                getReserve[underlyingTokenIdx] *\n                FortunnaLib.PRECISION) / totalSupply()) /\n            FortunnaLib.PRECISION;\n    }\n\n    /// @inheritdoc IFortunnaToken\n    function calcFortunnaTokensInOrOutPerUnderlyingToken(\n        uint256 underlyingTokenIdx,\n        uint256 underlyingTokenAmountInOrOut\n    ) public view override returns (uint256 fortunnaTokensAmountInOrOut) {\n        fortunnaTokensAmountInOrOut =\n            ((underlyingTokenAmountInOrOut *\n                totalSupply() *\n                FortunnaLib.PRECISION) / getReserve[underlyingTokenIdx]) /\n            FortunnaLib.PRECISION;\n    }\n\n    /// @inheritdoc IFortunnaToken\n    function mint(\n        address user,\n        uint256 amountToMint\n    ) public payable override delegatedOnly {\n        if (!isStakingOrRewardToken) {\n            _onlyRoleInFactory(FortunnaLib.LP_MINTER_BURNER_ROLE);\n        }\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\n            uint256 amountIn = calcUnderlyingTokensInOrOutPerFortunnaToken(\n                i,\n                amountToMint\n            );\n            if (underlyingTokens[i] != address(0)) {\n                IERC20(underlyingTokens[i]).safeTransferFrom(\n                    user,\n                    address(this),\n                    amountIn\n                );\n            } else {\n                if (amountIn > msg.value) {\n                    revert FortunnaErrorsLib.NotEnoughtPayment(amountIn);\n                }\n            }\n            getReserve[i] += amountIn;\n        }\n        _mint(user, amountToMint);\n    }\n\n    /// @inheritdoc IFortunnaToken\n    function mint(\n        address user,\n        uint256[] calldata amounts\n    ) public payable override delegatedOnly {\n        if (!isStakingOrRewardToken) {\n            _onlyRoleInFactory(FortunnaLib.LP_MINTER_BURNER_ROLE);\n        }\n        if (amounts.length != underlyingTokens.length) {\n            revert FortunnaErrorsLib.InvalidScalar(\n                amounts.length,\n                \"mustBeEqualToUnderlyingTokensLen\"\n            );\n        }\n        uint256 amountToMint = 0;\n        for (uint256 i = 0; i < amounts.length; i++) {\n            amountToMint += calcFortunnaTokensInOrOutPerUnderlyingToken(\n                i,\n                amounts[i]\n            );\n            if (underlyingTokens[i] != address(0)) {\n                IERC20(underlyingTokens[i]).safeTransferFrom(\n                    user,\n                    address(this),\n                    amounts[i]\n                );\n            } else {\n                if (amounts[i] > msg.value) {\n                    revert FortunnaErrorsLib.NotEnoughtPayment(amounts[i]);\n                }\n            }\n            getReserve[i] += amounts[i];\n        }\n        _mint(user, amountToMint);\n    }\n\n    /// @inheritdoc IFortunnaToken\n    function burn(\n        address payable user,\n        uint256 amount\n    ) external override delegatedOnly {\n        if (!isStakingOrRewardToken) {\n            _onlyRoleInFactory(FortunnaLib.LP_MINTER_BURNER_ROLE);\n        }\n        for (uint256 i = 0; i < underlyingTokens.length; i++) {\n            uint256 amountOut = calcUnderlyingTokensInOrOutPerFortunnaToken(\n                i,\n                amount\n            );\n            if (underlyingTokens[i] != address(0)) {\n                IERC20(underlyingTokens[i]).safeTransfer(\n                    user,\n                    amountOut\n                );\n            } else {\n                user.sendValue(amountOut);\n            }\n            getReserve[i] -= amountOut;\n        }\n        _burn(user, amount);\n    }\n\n    /// @dev A helper internal function that helps peruse the pairs list to find an amount of the underlying token under a certain index.\n    function _getInitialAmountOfUnderlyingToken(\n        uint256[2][] calldata pairs,\n        uint8 idx\n    ) internal pure returns (uint256 result) {\n        for (uint256 i = 0; i < pairs.length; i++) {\n            if (pairs[i][0] == idx) {\n                result = pairs[i][1];\n                break;\n            }\n        }\n    }\n\n    /// @inheritdoc ERC20\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (spender == pool) {\n            currentAllowance = type(uint256).max;\n        }\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"FortunnaToken: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /// @dev Every income in native tokens should be recorded as the behaviour\n    /// of the contract would be a funds hub like.\n    receive() external payable {\n        emit NativeTokenReceived(msg.value);\n    }\n}\n"
    },
    "contracts/interfaces/external/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\ninterface IAccessControl {\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(\n        bytes32 role,\n        address account\n    ) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IFortunnaFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"../libraries/FortunnaErrorsLib.sol\";\nimport \"../libraries/FortunnaBitMaskLib.sol\";\nimport \"../libraries/FortunnaLib.sol\";\nimport \"./INativeTokenReceivable.sol\";\n\n/// @title The interface for the Fortunna Yield Farming pools factory.\n/// @author Fortunna Team\n/// @notice The Fortunna Yield Faming pools factory facilitates creation of Fortunna pools and control over the protocol fees.\ninterface IFortunnaFactory is INativeTokenReceivable {\n    /// @notice An event to be emitted when the pool is created.\n    /// @param pool An address of the newly created pool.\n    event PoolCreated(address indexed pool);\n\n    /// @notice A getter function to acquire the payment info for one pool deploy.\n    /// @return token An address of the token to be held as payment asset.\n    /// @return cost An actual cost of the pool deploy.\n    function paymentInfo() external view returns (address token, uint256 cost);\n\n    /// @notice An admin setter function to adjust payment info.\n    /// @param _paymentInfo A struct to hold new payment info.\n    function setPaymentInfo(\n        FortunnaLib.PaymentInfo calldata _paymentInfo\n    ) external;\n\n    /// @notice An admin function to create to add deployed prototype.\n    /// @param prototype An address of the deployed prototype.\n    function addPrototype(address prototype) external;\n\n    /// @notice A public helper function to make mask generation quicker.\n    /// @param flags An array of booleans to be converted to a mask.\n    function generateMask(\n        bool[] calldata flags\n    ) external pure returns (bytes32);\n\n    /// @notice An admin function to send all collected payments in any tokens to the specific receiver.\n    /// @param token A token to be send to.\n    /// @param who A receiver of the tokens.\n    /// @param amount An exact amount of the tokens to be sent.\n    function sendCollectedTokens(\n        address token,\n        address payable who,\n        uint256 amount\n    ) external;\n\n    /// @notice The main public function. It is deploying the pool according to the pool parameters and it's prototype.\n    /// @param poolParameters A scalar parameters for the pool.\n    /// @param poolParametersArrays A vector parameters for the pool.\n    function createPool(\n        FortunnaLib.PoolParameters calldata poolParameters,\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\n    ) external payable returns (address poolAddress);\n\n    /// @notice A public getter function to acquire a pool address at the specific index.\n    /// @param index An index in the pools enumerable set.\n    function getPoolAt(uint256 index) external view returns (address);\n\n    /// @notice A public getter function to acquire the total amount of deployed pools.\n    function getPoolsLength() external view returns (uint256);\n\n    /// @notice A public getter function to acquire a prototype address at the specific index.\n    /// @param index An index in the pools enumerable set.\n    function getPrototypeAt(uint256 index) external view returns (address);\n\n    /// @notice A public getter function to acquire the total amount of deployed prototypes.\n    function getPrototypesLength() external view returns (uint256);\n\n    /// @notice A helper function that could predict an address for the pool with a `poolProtoIdx` parameter.\n    /// @param poolProtoIdx An index of the pool prototype in the factory.\n    /// @return result A predicted address of the pool.\n    /// @return salt A salt bytes to deploy the pool to the predicted address.\n    function predictPoolAddress(\n        uint256 poolProtoIdx\n    ) external view returns (address result, bytes32 salt);\n\n    /// @notice A helper function that could predict an address of the Fortuna Dust token for a specific pool.\n    /// @param poolProtoIdx A pool prototype index to which the token would be connected to.\n    /// @param poolIdx A specific already deployed pool index from the factory.\n    /// @param isStakingOrReward Is a Fortuna Dust token would be utilized as a staking or a reward token? True - staking, False - reward.\n    /// @return result An address of the would be deployed token.\n    /// @return salt A salt bytes to deploy such a token.\n    function predictFortunnaTokenAddress(\n        uint256 poolProtoIdx,\n        uint256 poolIdx,\n        bool isStakingOrReward\n    ) external view returns (address result, bytes32 salt);\n\n    /// @notice A constant that indicates under which index in the factory there is a Fortuna Dust token prototype.\n    function FORTUNNA_TOKEN_PROTO_INDEX() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IFortunnaPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\npragma abicoder v2;\n\nimport \"../libraries/FortunnaLib.sol\";\n\n/// @title An interface to implement by the contract of the Fortuna Pool.\n/// @author Fortunna Team\n/// @notice The interface contains events and initializing function of the pool.\ninterface IFortunnaPool {\n    /// @notice An event to be emitted when the part of the total reward is set to be distributed.\n    /// @param partOfTotalRewards An exact amount of the part.\n    event PartDistributed(uint256 partOfTotalRewards);\n\n    /// @notice An event to be emitted when the total reward is set up.\n    /// @param reward An exact amount of the total rewards.\n    event RewardAdded(uint256 reward);\n\n    /// @notice An event to be emitted when a user performs the stake.\n    /// @param user A user (staker) address.\n    /// @param amount Amount of the Fortuna Dust staked.\n    event Staked(address indexed user, uint256 amount);\n\n    /// @notice An event to be emitted when a user withdraws their staked Fortuna Dust.\n    /// @param user A user (staker) address.\n    /// @param amount An amount of the Fortuna Dust to be withdrawn.\n    event Withdrawn(address indexed user, uint256 amount);\n\n    /// @notice An event to be emitted when a user receives a reward Fortuna Dust.\n    /// @param user A user (staker) address.\n    /// @param reward A reward Fortuna Dust paid to the user.\n    event RewardPaid(address indexed user, uint256 reward);\n\n    /// @notice An event to be emitted when a user performs an emergency withdraw of their staked Fortuna Dust.\n    /// @param user A user (staker) address.\n    /// @param amount An amount of Fortuna Dust to be withdrawn.\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n\n    /// @notice A getter function that returns a FortunnaFactory instance address.\n    function factory() external view returns (address);\n\n    /// @notice A function that is to be called when the pool is created by the factory.\n    /// @param poolOwner An owner of the pool address.\n    /// @param poolParameters A scalar parameters of the pool.\n    /// @param poolParametersArrays A vector parameters of the pool.\n    function initialize(\n        address poolOwner,\n        FortunnaLib.PoolParameters calldata poolParameters,\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\n    ) external;\n}\n"
    },
    "contracts/interfaces/IFortunnaToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-new/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../libraries/FortunnaLib.sol\";\nimport \"./INativeTokenReceivable.sol\";\n\n/// @title An interface to implement by the contract of the Fortuna Dust.\n/// @author Fortunna Team\n/// @notice The interface contains functions of the mint, burn and calculations of the dust.\ninterface IFortunnaToken is IERC20, IERC20Metadata, INativeTokenReceivable {\n    /// @notice A mint function that could be called either by anyone or only by an admin. Depends if the token is initialized as staking or reward token.\n    /// @param user A user (minter) address.\n    /// @param amount An amount to be minted.\n    function mint(address user, uint256 amount) external payable;\n\n    function mint(\n        address user,\n        uint256[] calldata amounts\n    ) external payable;\n\n    /// @notice A burn function that could be called either by anyone or only by an admin. Depends if the token is initialized as staking or reward token.\n    /// @param user A user (burner) address.\n    /// @param amount An amount to be burned.\n    function burn(address payable user, uint256 amount) external;\n\n    /// @notice A helper function to calculate an amount of Fortuna Dust to be minted/burned if this amount of an underlying token is placed/taken as a collateral. \n    /// @param underlyingTokenIdx A collateral token index.\n    /// @param underlyingTokenAmountInOrOut An amount of the collateral token to be placed in or out.\n    /// @return fortunnaTokensAmountInOrOut An amount of Fortuna Dust minted or burned.\n    function calcFortunnaTokensInOrOutPerUnderlyingToken(\n        uint256 underlyingTokenIdx,\n        uint256 underlyingTokenAmountInOrOut\n    ) external view returns (uint256 fortunnaTokensAmountInOrOut);\n\n    /// @notice A helper function to calculate an amount of collateral tokens to be gotten out or placed in if a specified amount of Fortuna Dust provided.\n    /// @param underlyingTokenIdx A collateral token index in the factory.\n    /// @param amountToMintOrBurn An amount of the Fortuna Dust to be minted or burned.\n    /// @return underlyingTokensInOrOut An amount of collateral token to be placed in or taken out.\n    function calcUnderlyingTokensInOrOutPerFortunnaToken(\n        uint256 underlyingTokenIdx,\n        uint256 amountToMintOrBurn\n    ) external view returns (uint256 underlyingTokensInOrOut);\n\n    /// @notice An initializing function that could be called only once and only by the Pool contract.\n    /// @param stakingOrRewardTokens Decide whether the Fortuna Dust token is staking or reward.\n    /// @param poolParameters The scalar parameters.\n    /// @param poolParametersArrays The vector parameters. \n    function initialize(\n        bool stakingOrRewardTokens,\n        FortunnaLib.PoolParameters calldata poolParameters,\n        FortunnaLib.PoolParametersArrays calldata poolParametersArrays\n    ) external;\n}\n"
    },
    "contracts/interfaces/IMockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"@openzeppelin/contracts-new/token/ERC20/IERC20.sol\";\n\ninterface IMockToken is IERC20 {\n    function blockTransfers() external view returns (bool);\n\n    function blockTransfersFrom() external view returns (bool);\n\n    function transfersAllowed(address, address) external view returns (bool);\n\n    function setBlockTransfers(bool _block) external;\n\n    function setTransfersAllowed(\n        address sender,\n        address recipient,\n        bool _allowed\n    ) external;\n\n    function setBlockTransfersFrom(bool _block) external;\n\n    function setBalanceOf(address who, uint256 amount) external;\n\n    function getOwner() external view returns (address);\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/INativeTokenReceivable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\n/// @title The interface for the Fortunna Yield Farming smart-contracts that can receive native tokens.\n/// @author Fortunna Team\n/// @notice The interface allows smart-contracts to use an event to document all native tokens incoms.\ninterface INativeTokenReceivable {\n    /// @notice An event to be fired when native tokens arrive to the fabric.\n    /// @param amount An exact amount of the tokens arrived.\n    event NativeTokenReceived(uint256 indexed amount);\n}\n"
    },
    "contracts/libraries/FortunnaBitMaskLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./FortunnaErrorsLib.sol\";\n\n/// @title Fortunna Yield Farming pools lib that contains bit mas manipulation helpers.\n/// @author Fortunna Team\n/// @notice A lib holding bit mas manipulation functionality.\nlibrary FortunnaBitMaskLib {\n    /// @dev A helper function to generate bit masks from boolean array.\n    /// @param flags A boolean array.\n    function getMaskFromBooleans(\n        bool[] calldata flags\n    ) internal pure returns (bytes32 result) {\n        if (flags.length > 256) {\n            revert FortunnaErrorsLib.InvalidLength(\n                flags.length,\n                \"flagsLength>256\"\n            );\n        }\n        for (uint256 i = 0; i < flags.length; i++) {\n            if (flags[i]) {\n                result |= bytes32(i == 0 ? 1 : 1 << i);\n            }\n        }\n    }\n\n    /// @dev A helper function to check if some bit is up in the mask.\n    /// @param mask A mask to be checked.\n    /// @param index An index of the bit to be checked.\n    function isBitUp(\n        bytes32 mask,\n        uint8 index\n    ) internal pure returns (bool result) {\n        uint256 counter = index == 0 ? 1 : 1 << index;\n        return bytes32(counter) == mask & bytes32(counter);\n    }\n}\n"
    },
    "contracts/libraries/FortunnaErrorsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Fortunna Yield Farming pools lib that contains all the errors.\n/// @author Fortunna Team\n/// @notice A lib holding default errors.\nlibrary FortunnaErrorsLib {\n    /// @dev An error to be reverted if an `account` would be\n    /// banned.\n    /// @param account A banned user.\n    error Banned(address account);\n\n    /// @dev An error to be reverted if an unknown prototype name would be used to deploy\n    /// a pool or other utility smart-contract.\n    /// @param prototypeIndex An index of prototype smart-contract.\n    error UnknownPrototypeIndex(uint256 prototypeIndex);\n\n    /// @dev An error to be reverted if the pool deployer didn't payed enough for it.\n    /// @param amount An actual amount the deployer sent.\n    error NotEnoughtPayment(uint256 amount);\n\n    /// @dev An error to be reverted if some data structures `length` is not defined correctly.\n    /// @param length An actual length of the data structure.\n    /// @param comment Some comment as to what kind of a data structure has been addressed to.\n    error InvalidLength(uint256 length, string comment);\n\n    /// @dev An error to be reverted if in some two addresses arrays the elements aren't unique.\n    /// @param someAddress An address which is equal in both arrays.\n    error NotUniqueAddresses(address someAddress);\n\n    /// @dev An error to be reverted if the contract is being deployed at a wrong chain.\n    /// @param chainId An actual chain ID.\n    error ForeignChainId(uint256 chainId);\n\n    /// @dev An error to be reverted if some Euclidean interval hasn't been defined correctly.\n    /// @param start A start of the interval.\n    /// @param finish An end of the interval.\n    /// @param comment Some comment as to what kind of an interval this is.\n    error IncorrectInterval(uint256 start, uint256 finish, string comment);\n\n    /// @dev An error to be reverted if some base points were defined out of their boundaries.\n    /// @param basePoints An actual base points amount.\n    /// @param comment Some comment as to what kind of a base points this is.\n    error IncorrectBasePoints(uint256 basePoints, string comment);\n\n    /// @dev An error to be reverted if an `enity` is already exists in some address set.\n    /// @param entity An entity address.\n    error AddressAlreadyExists(address entity);\n\n    /// @dev An error to be reverted if the contract was being called before the initialization.\n    error NotInitialized();\n\n    /// @dev An error to be reverted if an `entity` does not possess the `role`.\n    /// @param role A role an entity doesn't posess.\n    /// @param entity An entity violating authorization.\n    error NotAuthorized(bytes32 role, address entity);\n\n    /// @dev An error to be reverted if some scalar property of the data structure was addressed wrongly.\n    /// @param scalar A scalar.\n    /// @param comment Some comment as to what kind of a data structure property this is.\n    error InvalidScalar(uint256 scalar, string comment);\n\n    /// @dev An error to be reverted if some pair of scalars is not equal, but they should be.\n    /// @param x A first scalar.\n    /// @param y A second scalar.\n    /// @param comment Some comment as to what kind of a data structure property this is.\n    error AreNotEqual(uint256 x, uint256 y, string comment);\n\n    /// @dev An error to be reverted if some staker did not satisfy minimum limitations for the stake operation.\n    /// @param amount An actual stake amount provided.\n    /// @param limit A minimum limit to be satisfied.\n    error NotEnoughStaked(uint256 amount, uint256 limit);\n\n    /// @dev An error to be reverted if some staker did not satisfy maximum limitations for the stake operation.\n    /// @param amount An actual stake amount provided.\n    /// @param limit A maximum limit to be satisfied.\n    error TooMuchStaked(uint256 amount, uint256 limit);\n\n    /// @dev An error to be reverted if the pool expired.\n    /// @param timeDifference A time how long the pool is expired.\n    error DistributionEnded(uint256 timeDifference);\n\n    /// @dev An error to be reverted if the pool has not yet been started.\n    /// @param timeDifference A time how long befire the pool is starting to work.\n    error DistributionNotStarted(uint256 timeDifference);\n\n    /// @dev An error to be reverted if the pool lacks the rewards amount to distribute.\n    error NotEnoughRewardToDistribute(uint256 provided, uint256 actual);\n}\n"
    },
    "contracts/libraries/FortunnaLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\n/// @title Canonical Fortunna Yield Farming pools lib\n/// @author Fortunna Team\n/// @notice A lib holding default errors, helpers functions and constants.\nlibrary FortunnaLib {\n    /// @dev A struct to hold some custom parameters for the pool that aren't external protocol agnostic.\n    struct CustomPoolParameters {\n        // An address of the Uniswap V3 NonfungiblePositionManager contract.\n        address nonfungiblePositionManager;\n    }\n\n    /// @dev A struct to hold pools scalar deploy parameters.\n    struct PoolParameters {\n        // An index of pool prototype in the factory list of prototypes.\n        uint256 protoPoolIdx;\n        // Start of the pool reward distribution period.\n        uint256 startTimestamp;\n        // End of the pool reward distribution period.\n        uint256 endTimestamp;\n        // Minimal amount for user to be able to deposit to the pool.\n        uint256 minStakeAmount;\n        // Maximal amount for user to be able to deposit to the pool.\n        uint256 maxStakeAmount;\n        // A time duration in seconds for a user to wait until they could receiver their rewards.\n        uint256 minLockUpRewardsPeriod;\n        // A fee amount in base points to be charged from user if they would attempt to receiver their rewards.\n        uint256 earlyWithdrawalFeeBasePoints;\n        // A fee amount in base points to be charged from user if they would attempt to perform deposit/withdraw.\n        uint256 depositWithdrawFeeBasePoints;\n        // A percent from total reward provided being distributed to stakers.\n        uint256 totalRewardBasePointsPerDistribution;\n        // A bit mask to indicate whether the token in `utilizingTokens` is staking token.\n        bytes32 stakingTokensMask;\n        // A bit mask to indicate whether the token in `utilizingTokens` is reward token.\n        bytes32 rewardTokensMask;\n        CustomPoolParameters custom;\n    }\n\n    /// @dev A struct to hold pools vector deploy parameters.\n    struct PoolParametersArrays {\n        // An array of tokens to be used as either reward or staking tokens.\n        address[] utilizingTokens;\n        // Array of pairs <index of reward token, initial total reward amount>\n        uint256[2][] initialRewardAmounts;\n        // An array of pairs <index of staking token, deposit amount>\n        uint256[2][] initialDepositAmounts;\n    }\n\n    /// @dev A struct to hold a pay info for pool deployment.\n    struct PaymentInfo {\n        // A token address to be accepted as payment.\n        address paymentToken;\n        // A payment amount for pool deploy.\n        uint256 cost;\n    }\n\n    /// @notice A role hash to mark addresses to be held as reward tokens.\n    bytes32 public constant ALLOWED_REWARD_TOKEN_ROLE =\n        keccak256(\"ALLOWED_REWARD_TOKEN_ROLE\");\n\n    /// @notice A role hash to mark addresses to be held as staking tokens.\n    bytes32 public constant ALLOWED_STAKING_TOKEN_ROLE =\n        keccak256(\"ALLOWED_STAKING_TOKEN_ROLE\");\n\n    /// @notice A role hash to mark addresses to be held as external reward tokens from another protocols.\n    bytes32 public constant ALLOWED_EXTERNAL_TOKEN_ROLE =\n        keccak256(\"ALLOWED_EXTERNAL_TOKEN_ROLE\");\n\n    /// @notice A role hash to mark addresses to be held as banned users.\n    bytes32 public constant BANNED_ROLE = keccak256(\"BANNED_ROLE\");\n\n    /// @notice A role hash to mark addresses to be held as payment for pool deploy tokens.\n    bytes32 public constant ALLOWED_PAYMENT_TOKEN_ROLE =\n        keccak256(\"ALLOWED_PAYMENT_TOKEN_ROLE\");\n\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\n    bytes32 public constant LP_MINTER_BURNER_ROLE =\n        keccak256(\"LP_MINTER_BURNER_ROLE\");\n\n    /// @notice A role hash to indicate who can mint and burn the `FortunnaToken`'s.\n    bytes32 public constant POOL_REWARDS_PROVIDER =\n        keccak256(\"POOL_REWARDS_PROVIDER\");\n\n    /// @notice A max of base points. (ex. Like 100 in percents)\n    uint256 public constant BASE_POINTS_MAX = 10000;\n\n    /// @notice A given precision for math operations;\n    uint256 public constant PRECISION = 1e10;\n\n    /// @notice A dead address for floor tokens to be minted\n    address public constant DEAD_ADDRESS =\n        0x000000000000000000000000000000000000dEaD;\n}\n"
    },
    "contracts/mock/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <=0.8.20;\n\nimport \"@openzeppelin/contracts-new/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts-new/access/Ownable.sol\";\n\ncontract MockToken is ERC20, Ownable {\n    bool public blockTransfers;\n    bool public blockTransfersFrom;\n\n    mapping(address => mapping(address => bool)) public transfersAllowed;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply\n    ) ERC20(name, symbol) {\n        _mint(msg.sender, initialSupply);\n    }\n\n    function setBlockTransfers(bool _block) public virtual {\n        blockTransfers = _block;\n    }\n\n    function setTransfersAllowed(\n        address sender,\n        address recipient,\n        bool _allowed\n    ) public virtual {\n        transfersAllowed[sender][recipient] = _allowed;\n    }\n\n    function setBlockTransfersFrom(bool _block) public virtual {\n        blockTransfersFrom = _block;\n    }\n\n    function setBalanceOf(address who, uint256 amount) public virtual {\n        uint256 balance = balanceOf(who);\n        if (balance > amount) {\n            _burn(who, balance - amount);\n        } else if (balance < amount) {\n            _mint(who, amount - balance);\n        }\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        if (blockTransfers) {\n            if (transfersAllowed[msg.sender][recipient]) {\n                super._transfer(msg.sender, recipient, amount);\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            super._transfer(msg.sender, recipient, amount);\n            return true;\n        }\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        if (blockTransfersFrom) {\n            if (transfersAllowed[sender][recipient]) {\n                return super.transferFrom(sender, recipient, amount);\n            } else {\n                return false;\n            }\n        } else {\n            return super.transferFrom(sender, recipient, amount);\n        }\n    }\n\n    function mint(address account, uint256 amount) public virtual {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public virtual {\n        _burn(account, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}